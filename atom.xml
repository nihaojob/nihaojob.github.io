<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦少卫的博客</title>
  
  
  <link href="https://nihaojob.github.io/atom.xml" rel="self"/>
  
  <link href="https://nihaojob.github.io/"/>
  <updated>2022-07-28T02:23:30.484Z</updated>
  <id>https://nihaojob.github.io/</id>
  
  <author>
    <name>nihaojob@163.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何写出不可维护的Vue代码</title>
    <link href="https://nihaojob.github.io/2022/07/28/vue-doce-do-not-maintain/"/>
    <id>https://nihaojob.github.io/2022/07/28/vue-doce-do-not-maintain/</id>
    <published>2022-07-28T10:17:28.000Z</published>
    <updated>2022-07-28T02:23:30.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>不止一次接手过复杂业务功能模块，开端总是深陷其中难以自拔，无数个深夜抚摸着头皮在内心暗暗咒骂。</p><p>相信你也有过类似的经历，面对复杂的业务逻辑，<strong>看代码俩小时，写代码五分钟，没有点胆识和谋略都不敢下手</strong>。</p><p>最近总结复盘了一下，以备后用，如果有喜欢的同事想坑他一把，可以按照此方法实践(不保证100%成功)，个人拙见，如有不当望指正。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>data属性数量过多</li><li>组件入参数量过多</li><li>mixins和业务代码耦合</li><li>不要封装纯函数</li><li>数据结构尽量复杂</li><li>不写注释或写无法理解的注释</li><li>将前端逻辑变重</li><li>不封装mixins与组件<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1、data属性数量过多"><a href="#1、data属性数量过多" class="headerlink" title="1、data属性数量过多"></a>1、data属性数量过多</h3>要多用data属性，放置一些用不到的key，让属性看起来更丰富，增加理解成本。</li></ol><p>最好一打开页面前100行都是data属性，让维护或者参与该组件开发的人员望而生畏，瞬间对组件肃然起敬。</p><p>这符合代码的坏味道所描述的：</p><blockquote><p>良药与毒药的区别在于剂量。有少量的全局数据或许无妨，<strong>但数量越多，处理的难度就会指数上升。</strong></p></blockquote><p>如图所示，效果更佳：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c77c98cac0da4e23977cc74d68fc0876~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="2、组件入参数量过多"><a href="#2、组件入参数量过多" class="headerlink" title="2、组件入参数量过多"></a>2、组件入参数量过多</h3><p>data属性的问题是在一个组件内，看多了加上注释可能就理解，而组件增加过多的props入参恰好能避免这个问题，<strong>过多的入参可以让理解变得更困难，要先理解父组件内绑定的值是什么，再理解子组件内的入参用做什么</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41dfb06081b94ae9a66a6d1476a420cc~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>当然了，还有高阶一点的用法，就是让父组件的值和子组件的props名称不一致，这样做就更有趣了，难度陡增。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41c5f208a96149c1822396c194b3ef0d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="3、mixins与业务代码耦合"><a href="#3、mixins与业务代码耦合" class="headerlink" title="3、mixins与业务代码耦合"></a>3、mixins与业务代码耦合</h3><p><strong>合理封装mixins能让代码变得更容易复用和理解，这不是我们想要的</strong>，让mixins与业务组件的代码耦合在一起，可以达到事倍功半的效果。</p><p>常规的做法是业务组件调用mixins的方法和变量，我们反其道而行之，让mixins调用组件中的方法和变量，然后让mixins多出引用，<strong>虽然看起来像mixins，但是并没有mixins的功能</strong>，让后期有心想抽离封装的人也无从下手。</p><p>小Tips：常见的mixins方法会加上特殊前缀与组件方法区分，我们可以不使用这个规范，让mixins方法更难被发现。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28f46dadf52242ce95eac22c1742d6e2~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="4、不要封装纯函数"><a href="#4、不要封装纯函数" class="headerlink" title="4、不要封装纯函数"></a>4、不要封装纯函数</h3><p>如果有一个很重要的业务组件可读性很差，势必要小步快跑的迭代重构，这种情况也不用怕，我们<strong>一个微小的习惯就可以让这件事情变得困难重重，那就是不要封装纯函数方法</strong>。</p><p><strong>纯函数的好处是不引用其他变量，可以轻易的挪动和替换；</strong> 让每个方法尽量引用data属性，当他人想迁移或替换你的方法时，就要先理解引用的属性和全局变量，再进一步，可以在方法里再引入mixnins里的变量和方法，这个小习惯就会让他们望而却步。</p><h3 id="5、数据结构尽量复杂"><a href="#5、数据结构尽量复杂" class="headerlink" title="5、数据结构尽量复杂"></a>5、数据结构尽量复杂</h3><p>让数据结构变复杂绝对是一个必杀技，<strong>数据结构随随便便循环嵌套几层</strong>，自己都能绕晕。</p><p>再加上一些骚操作，递归遍历加一些判断和删减，<strong>写上让人难以琢磨的注释</strong>，哪怕是高级工程师或是资深工程师都需要狠狠的磕上一段时间才能摸清真正的业务逻辑是什么。</p><p>这种方式还有另外一个优点，就是自己可能也会被绕晕，一起陷入有趣的逻辑梳理游戏。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc98d20ade67401db90a54b92cad0eb5~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="6、不写注释或写无法理解的注释"><a href="#6、不写注释或写无法理解的注释" class="headerlink" title="6、不写注释或写无法理解的注释"></a>6、不写注释或写无法理解的注释</h3><p>如果其他方式都复杂且耗时，那这种方法简直是高效的存在，<strong>只需要胡乱的写一些让别人看不懂或容易误解的注释</strong>，就可轻松把接手代码的同事KO掉。</p><p>这个技能也看个人发挥的水平了，你也可以在注释中恐吓、劝阻参与开发人员改动功能代码，煽动开发人员放弃修改，让其内心崩溃。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7398c6390f3c4740b7a3e36de9db7102~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="7、让前端逻辑变重"><a href="#7、让前端逻辑变重" class="headerlink" title="7、让前端逻辑变重"></a>7、让前端逻辑变重</h3><p>良好的分层设计能够让系统变得简洁和健壮；为了凸显前端的重要性，<strong>应该将逻辑一股脑的承接到前端，让前端逻辑变重</strong>，尤其是写一些特殊的编码配置和奇葩规则。</p><p>不要和产品、后端讲述这件事情的不合理性，统统塞到前端，当需求被重新讨论时，他们会把特殊逻辑忘的一干二净，而你可以根据代码翻出一大堆，这样你就显得尤为重要了。</p><h3 id="8、不封装mixins与组件"><a href="#8、不封装mixins与组件" class="headerlink" title="8、不封装mixins与组件"></a>8、不封装mixins与组件</h3><p>如果要让功能变得复杂，就不要拆分UI组件和业务组件，更不要按照业务抽离可复用的mixins方法，让组件尽量大，轻则一两千行，重则五六千行，不设上限，统统塞到一个组件里。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9084c89503264daeb00c93ef61757149~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>结合自己的踩坑经历写了这边偏笔记，调侃之处，纯属娱乐。<br>你有没有遇上过类似的场景，你的感受如何？又是如何解决的呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;不止一次接手过复杂业务功能模块，开端总是深陷其中难以自拔，无数个深夜抚摸着头皮在内心暗暗咒骂。&lt;/p&gt;
&lt;p&gt;相信你也有过类似的经历，面对复</summary>
      
    
    
    
    
    <category term="vue" scheme="https://nihaojob.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Axios源码学习</title>
    <link href="https://nihaojob.github.io/2021/11/22/axios-learning/"/>
    <id>https://nihaojob.github.io/2021/11/22/axios-learning/</id>
    <published>2021-11-22T19:26:07.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>介绍</li><li><strong>初始化</strong>：axios 、Axios、intance</li><li><strong>整体流程</strong>：request =&gt; deispatchRequest =&gt; Adapter</li><li>数据转换：despatchRequest</li><li>适配器：Adapter</li><li><strong>拦截器</strong>：request =&gt; deispatchRequest =&gt; response </li><li><strong>取消请求</strong>：cancelToken =&gt; adapter =&gt; cancel</li><li>回顾</li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>特点：</p><ol><li>支持浏览器与Node.js</li><li>API promise</li><li>请求/响应拦截器</li><li>请求/响应格式化方法</li><li>取消请求</li></ol><p>用法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 直接发送请求</span><span class="token function">axios</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token function">axios</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment">// 别名方法</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> config<span class="token punctuation">]</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>xxx<span class="token operator">:</span> 请求的默认全局配置 axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 添加请求拦截器 axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 添加响应拦截器axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> 创建一个新的 axios<span class="token comment">// 只有默认axios有的方法，新创建的没有</span>axios<span class="token punctuation">.</span><span class="token function">Cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 用于创建取消请求的错误对象 axios<span class="token punctuation">.</span><span class="token function">CancelToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 用于创建取消请求的 token 对象 axios<span class="token punctuation">.</span><span class="token function">isCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 是否是一个取消请求的错误 axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token operator">:</span> 用于批量执行多个异步请求 axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>目录结构</p><pre class="line-numbers language-none"><code class="language-none">├── adapters│   ├── README.md│   ├── http.js   &#x2F;&#x2F; Node环境请求│   └── xhr.js    &#x2F;&#x2F; 浏览器环境请求├── axios.js      &#x2F;&#x2F; 入口文件 初始化├── cancel        &#x2F;&#x2F; 请求取消模块│   ├── Cancel.js  │   ├── CancelToken.js│   └── isCancel.js├── core          &#x2F;&#x2F; 核心模块│   ├── Axios.js  &#x2F;&#x2F; 初始化│   ├── InterceptorManager.js   &#x2F;&#x2F; 拦截器管理│   ├── buildFullPath.js│   ├── createError.js│   ├── dispatchRequest.js       &#x2F;&#x2F; 请求调用│   ├── enhanceError.js│   ├── mergeConfig.js│   ├── settle.js│   └── transformData.js         &#x2F;&#x2F; 数据转换├── defaults.js                  &#x2F;&#x2F; 默认配置├── env│   ├── README.md│   └── data.js├── helpers│   ├── README.md│   ├── bind.js                  &#x2F;&#x2F; bind│   ├── buildURL.js│   ├── combineURLs.js│   ├── cookies.js│   ├── deprecatedMethod.js│   ├── isAbsoluteURL.js│   ├── isAxiosError.js│   ├── isURLSameOrigin.js│   ├── normalizeHeaderName.js│   ├── parseHeaders.js│   ├── spread.js│   └── validator.js└── utils.js          &#x2F;&#x2F; 类型判断、对象方法（forEach、merge、extend）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><strong>带着这个问题开始  axios与Axios的关系？</strong><br>入口文件lib/axios.js，通过 <strong>工厂函数 createInstance 初始化</strong>，得到axios，并给axios挂载Cancel、CancelToken等方法。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5581a72d43d7414e81f610a0d1d2eefd~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>​</p><p>初始化的流程开始从工厂函数 createInstance开始：</p><ol><li>Axios构造函数生成对象带有defaults属性和拦截器属性的对象</li><li><strong>bind(request, content) 返回一个闭包的request方法。</strong></li><li>拷贝Axios.prototype(get/post/request) </li><li>拷贝context上的 defaults 和 拦截器属性。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc7acb10099b4fb393e04b7029c44590~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><h4 id="逐行分析-debugger："><a href="#逐行分析-debugger：" class="headerlink" title="逐行分析 + debugger："></a>逐行分析 + debugger：</h4><ol><li><p>Axios构造函数生成对象带有defaults属性和拦截器属性的对象</p></li><li><p><strong>bind(request, content) 返回一个闭包的request方法。</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">var context <span class="token operator">=</span> new Axios<span class="token punctuation">(</span>defaultConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>var instance <span class="token operator">=</span> bind<span class="token punctuation">(</span>Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>request<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2495b480e814127a072d36cad79f7f9~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p></li><li><p>拷贝Axios.prototype(get/post/request) </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">utils<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>instance<span class="token punctuation">,</span> Axios<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68ff11904a3545f680057f002f236dbc~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p></li></ol><p><strong>​</strong></p><ol start="4"><li>拷贝context上的 defaults 和 拦截器属性。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40450fe97003425d8ea621ef1b028f36~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>Axios构造函数：<br>delete、get等方法都是request的别名，只不过是合并了一下不同的配置config配置。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f3c1979227540d5a3eec61e5973a448~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="axios-与-Axios-的关系"><a href="#axios-与-Axios-的关系" class="headerlink" title="axios 与 Axios 的关系"></a>axios 与 Axios 的关系</h3><ol><li>语法上：axios 不是Axios的对象实例</li><li>功能上：axios 具备 Axios实例上的所有功能（方法：Axios.porotype、属性：defaults/interceptors）</li><li><strong>axios 是 Axios.porotype.request 函数 bind返回的 warp 函数，可直接使用</strong>。</li></ol><h3 id="axios-created-创建的对象-与-axios-的区别"><a href="#axios-created-创建的对象-与-axios-的区别" class="headerlink" title="axios.created 创建的对象 与 axios 的区别"></a>axios.created 创建的对象 与 axios 的区别</h3><p>相同：直接发送请求、具有request、get/post方法，具有defaults/interceptors属性。<br>不同：<strong>新的instance 不具有 Cancel、CancelToken方法</strong>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39b51e1e7168475489a9bb95a39704c2~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>15</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4><blockquote><p>行为模式负责对象间的高效沟通和职责委派。<br>​</p></blockquote><blockquote><p><strong>责任链模式</strong>是一种行为设计模式， 允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8ee45588c6b491582ea5797ea6cbded~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>模块流程：<br>Axios.porotype.request(config) ==&gt; despatchRequest(config) ==&gt; adapter(config)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67e90f6988b0482aa0420da37c1dcbc7~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>重要模块与职责：</p><ol><li>request： 请求拦截 =&gt; despatchRequest =&gt; 响应拦截，通过promise串联</li><li>despatchRequest： 请求数据转换 =&gt; adapter =&gt; 响应数据转换</li><li>adpter：根据环境确定请求函数 返回promise</li></ol><p>整体流程：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26fa4c002c574c2f9ac5c01a3f863fc9~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>​</p><h2 id="转换数据-despatchRequest"><a href="#转换数据-despatchRequest" class="headerlink" title="转换数据 despatchRequest"></a>转换数据 despatchRequest</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1dd24ddd71f457bba35d66eaf5fecc4~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72611ca0631f451793d33098428ecc5a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e27b0982b364db2a85eaeae357803df~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>默认转换<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b437dff8f77b46d389c86b269d1d8dc8~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><blockquote><p>结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。<br><strong>适配器模式</strong>是一种结构型设计模式， 它能使接口不兼容的对象能够相互合作。</p></blockquote><p>​</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c813ac1d1a7d4eb9b72878578e44d35c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/54c23a0e88354f75a9509076d4d76d65~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4971605580de4afeb2b6d2b621f65d52~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d9db3c6abbd4a5fb5fead75e827274b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="拦截器管理"><a href="#拦截器管理" class="headerlink" title="拦截器管理"></a>拦截器管理</h3><p><strong>取消拦截器？</strong><br><strong>拦截器执行顺序？</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8640e451543f4c2bbb9996d5b7941337~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>lib/core/InterceptorManager.js</p><ul><li>user：添加</li><li>eject：删除</li><li>forEach：获取所有</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be60083f6201418a9bbab9799a10f2c6~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>添加/取消拦截器<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc8f2b5341fa4181bcf2fe4562b3a050~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>​</p><p>lib/core/Axios.js  <strong>Axios.prototype.request</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5f23db8338b4b30b9f44bc277cb932a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a20a2a95ec7420594b541697fc221c8~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0af9955c127419382709d939fbaa3a3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="同步执行"><a href="#同步执行" class="headerlink" title="同步执行"></a>同步执行</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91170dc400e8457a92b59059e3ad427b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6fd3b0fbb12461c9cb795d5201da31e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17cf0596de65468f92771dcf1e20f358~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa67dec98fa4487c8dffbc41224947b6~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>写一个demo</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">const config <span class="token operator">=</span> &#123;a:<span class="token string">'111'</span>&#125;const promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>const arr <span class="token operator">=</span> <span class="token punctuation">[</span>promise<span class="token punctuation">]</span>let resault <span class="token operator">=</span> promisearr<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> &#123;    config<span class="token punctuation">[</span><span class="token string">'user1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">111</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config&#125;<span class="token punctuation">)</span>arr<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> &#123;    config<span class="token punctuation">[</span><span class="token string">'user2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2222</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config&#125;<span class="token punctuation">)</span>arr<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> &#123;    config<span class="token punctuation">[</span><span class="token string">'user3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3333</span>    console<span class="token punctuation">.</span>log<span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">'333'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> config&#125;<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> &#123;    resault <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token keyword">then</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b144847eb274400db84221d14eaf7b33~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>取消的使用</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad71e5f80547421e903d51940cf40fca~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>lib/cancel/CancelToken.js  <strong>主函数与subscribe</strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f25715bcb1164575968fbef8254cd823~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>订阅函数<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6488499b46a4d349e22bcc0f989c53e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>第一步 生成<br>cancelToken = new axios.CancelToken(c =&gt; cancel = c)<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef146c5b72494f74a480023072784b24~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>第二步<br>xhr内  cancelToken.subscribe 存储取消事件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab8d364d94cc4892ada8e1f35834cd80~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/819ff9b682e94878b9861fabbbd83f9e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>第三步<br>执行通过subscribe存储的取消事件<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e005fcbb3f14898b9c90b49f57531ed~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66fd77ef63aa4f50bdb906b9f00dd57c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>观察者模式</p><blockquote><p><strong>观察者模式</strong>是一种行为设计模式， 允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c79aa6c1f6c1447eaf1535b60ba197b9~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>​</p><p>​</p><p><strong>观察者模式与发布订阅的关系 讨论？</strong><br>观察者模式包含发布订阅。<br>发布订阅是观察者的升级变种。<br>观察者模式与发布订阅的区别是否有事件调度中心。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6cf25846770474aa0719cdc02078688~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><ol><li>axios 、Axios 的区别、初始化流程</li><li>config责任链，关键模块 request、despatchRequest、adpter 的职责, 请求整体流程。</li><li>despatchRequest的default转换 自动转json</li><li>适配器实现</li><li>request 拦截器实现，取消拦截器、执行顺序。</li><li>取消请求的实现</li></ol><p>​</p><p>感悟：</p><ul><li>模块职责清晰</li><li>适配器易扩展</li><li>拦截器、格式转换灵活</li><li>设计模式的分类：创建型、结构型、行为型</li><li>技巧与方法 &amp;&amp; 持续学习</li></ul><p><a href="https://refactoringguru.cn/design-patterns/catalog"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;介绍&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;：axios 、Axios、intance&lt;/li&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我去参加了成人高考</title>
    <link href="https://nihaojob.github.io/2021/10/24/examination/"/>
    <id>https://nihaojob.github.io/2021/10/24/examination/</id>
    <published>2021-10-24T20:18:36.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>去考试前我和朋友一直在纠结要不要去考试，因为没准备，觉得考过的几率很小，又赶上保定疫情，报名费加车票加定酒店乱七八糟的也一千左右了，还是决定去了。</p><p>周五早上打车到公司附近的医院做核酸检测，晚上回来还做了分政治试卷，周六早上四点多起床洗漱，用高德预约出租车已到楼下，我穿上棉马甲，扣上鸭舌帽就出门了。</p><p>我们到保定东以后，分别打车到各自的考场，师傅跟我他们附近的小区已经封了3个，新闻说北京昌平也已经有了，等我们考完回来的时候，另一个司机师傅说已经封了18个小区了。</p><p>爱学习的人还是很多的：<br><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/20211024202023.png"></p><h3 id="成年人蹲在没有隔板的厕所里还是挺尴尬的。"><a href="#成年人蹲在没有隔板的厕所里还是挺尴尬的。" class="headerlink" title="成年人蹲在没有隔板的厕所里还是挺尴尬的。"></a>成年人蹲在没有隔板的厕所里还是挺尴尬的。</h3><p>考完第一科已经十一点了，出来学校找吃的，发现只有2个奶茶店，里边卖的都是炸鸡、奶茶、汉堡，我点了杯冰柠檬茶，然后吃了根烤肠，开考前它们就在我肚子里起了化学反应，我在入考场前上了个大号，因为学校的厕所没有隔板，蹲坑并排挨着，又有很多人来来往往的人小便，我觉得很尴尬，自己一个人蹲在那里，幸好肚子疼的人不止我一个，另一个人隔着了一个坑蹲在了我的左边，我突然觉得很不适应，上学时一直是这样的厕所，从来没觉得不正常，我意识到自己的习惯在这件小事上发生了这么大的改变。</p><h3 id="第一次考试睡觉"><a href="#第一次考试睡觉" class="headerlink" title="第一次考试睡觉"></a>第一次考试睡觉</h3><p>我上学时虽然不是学霸，但也不是垫底那种，平平庸庸的中游吧，对待考试还是很认真谨慎的，考英语时，我边上的一位考生发完卷后就没醒，直到交卷前才起身把卡涂了一下，我还是比较抵触考试睡觉的，但第二天我考数学时就改变了想法并付诸行动，我分析这场数据考试对我而言意味着什么，任凭再努力聪明，在一堆自己没见过没学过的公式和符号面前，我榨干了脑汁也不可能解答出来一道题，加上前一天晚上对数学考试耗神的分析和焦虑的失眠，我在发完试卷后，把选择题和填空题按照原计划全选B和1，然后把验算题按照答题模板写了一遍，就陷入了深深的困意，我试图挣扎，但是看着琳琅满目的符号和题目，再结合自己的分析，我还是趴了下去，直到交卷前，才朦胧的睁开双眼，考场睡了4个，我是其中之一。</p><h3 id="没感觉到英语难"><a href="#没感觉到英语难" class="headerlink" title="没感觉到英语难"></a>没感觉到英语难</h3><p>第一天下午考完英语后，我和朋友听另外一个考生说英语太难了，我仔细想了想，确实是这样，如果你会一点英语，又是个半瓶子醋，这场考试就会很困难，你想想那些英语选择和阅读理解，好像看懂了，又觉得好像不认识，当然会觉得难，但是对于我们，压根就不存在难不难的问题了，我们只是蒙题，完全感知不到难不难，突然一种超然世外的感觉。</p><p>最近经历公司大裁员，然后又参加考试，终于能闲下来，写点流水段子了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;去考试前我和朋友一直在纠结要不要去考试，因为没准备，觉得考过的几率很小，又赶上保定疫情，报名费加车票加定酒店乱七八糟的也一千左右了，还是决定去了。&lt;/p&gt;
&lt;p&gt;周五早上打车到公司附近的医院做核酸检测，晚上回来还做了分政治试卷，周六早上四点多起床洗漱，用高德预约出租车已到楼</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>赞赏渠道</title>
    <link href="https://nihaojob.github.io/2021/08/05/pay/"/>
    <id>https://nihaojob.github.io/2021/08/05/pay/</id>
    <published>2021-08-05T13:08:55.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>我与你素未谋面，你确愿为此付出。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG831.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我与你素未谋面，你确愿为此付出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG831.png&quot;&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>生成Github JS 仓库的测试覆盖率徽标</title>
    <link href="https://nihaojob.github.io/2021/08/04/test-coverage/"/>
    <id>https://nihaojob.github.io/2021/08/04/test-coverage/</id>
    <published>2021-08-04T16:56:07.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>今天给我的开源项目<a href="https://github.com/nihaojob/popular-message">popular-message</a>增加了一下测试覆盖率的图标，覆盖率提高到了88%，不过这个覆盖率的图标还真不是直接放个图片链接这么简单。</p><p>不过也难不到哪里去，除了jest单元测试框架的语法，主要是借助<a href="https://travis-ci.com/">travis-ci</a>、<a href="https://coveralls.io/">coveralls.io</a>这2工具实现测试报告自动上报。</p><p>快速的写下笔记备忘，如果你在搞单元测试，恰巧也要增加测试覆盖率图表，希望能够帮到你，大神跳过。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c04644be6c534feca262245878df6dd3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>涉及工具：</p><ol><li>Jest：Js测试框架</li><li>Travis-CI：CI 持续集成服务平台</li><li>Coveralls.io：测试报告展示</li></ol><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>首先选择一个单元测试框架，我用的Jest，编写完单元测试代码以后，我们要确保<a href="https://travis-ci.com/">travis-ci</a>、<a href="https://coveralls.io/">coveralls.io</a>这2个网站<strong>使用GitHub账号授权登录，并有响应的读写权限</strong>，然后再按照流程配置就轻车熟路了。</p><ol><li>GitHub账号授权登录<a href="https://travis-ci.com/">travis-ci</a>、<a href="https://coveralls.io/">coveralls.io</a></li><li>安装Jest，编写单元测试代码</li><li>安装 Coveralls， 增加测试报告上报脚本</li><li>配置Travis 文件，提交代码后自动执行上报</li><li>提交代码触发CI，查看覆盖率</li></ol><h3 id="1-GitHub账号授权登录travis-ci、coveralls-io"><a href="#1-GitHub账号授权登录travis-ci、coveralls-io" class="headerlink" title="1. GitHub账号授权登录travis-ci、coveralls.io"></a>1. GitHub账号授权登录<a href="https://travis-ci.com/">travis-ci</a>、<a href="https://coveralls.io/">coveralls.io</a></h3><p>这一步很简单，只需要授权登录就好，但是必须的，否则不能根据仓库自动执行。</p><p>授权后会有项目列表：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cb12f51fd3140d7b78934b12296206b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9e642816b9d49a2be91296ac15703af~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="2-安装Jest，编写单元测试代码"><a href="#2-安装Jest，编写单元测试代码" class="headerlink" title="2. 安装Jest，编写单元测试代码"></a>2. 安装Jest，编写单元测试代码</h3><p>安装依赖，编写单测代码，增加Script选项，然后直接运行即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> jest -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://github.com/nihaojob/popular-message/blob/main/test/index.test.js">测试代码</a>不再贴进来，可在Github查看。</p><p>package.json增加测试脚本</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d80f723a707e4fd5860a734d643879ab~tplv-k3u1fbpfcp-zoom-1.image" alt="2021-08-04 19.02.48.gif"></p><h3 id="3-安装-Coveralls，-增加测试报告上报脚本"><a href="#3-安装-Coveralls，-增加测试报告上报脚本" class="headerlink" title="3. 安装 Coveralls， 增加测试报告上报脚本"></a>3. 安装 Coveralls， 增加测试报告上报脚本</h3><p>本地执行 jest –coverage 时会生成测试报告HTML文件， Coveralls工具会把测试报告上传到<a href="https://coveralls.io/">coveralls.io</a>网站，可以展示测试报告并生成徽章。</p><p>安装coveralls：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> coveralls -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>package.json增加上报脚本：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"popular-message"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span><span class="token punctuation">,</span>    <span class="token property">"coveralls"</span><span class="token operator">:</span> <span class="token string">"jest --coverage --coverageReporters=text-lcov | coveralls"</span><span class="token punctuation">,</span> <span class="token comment">// 上报脚本</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地执行生成覆盖率的效果，这一步仅演示覆盖率生成，与上报无关。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75404c00583141efb62b50b2e792812a~tplv-k3u1fbpfcp-zoom-1.image" alt="1.gif"></p><h3 id="4-配置Travis-文件，提交代码后自动执行上报"><a href="#4-配置Travis-文件，提交代码后自动执行上报" class="headerlink" title="4. 配置Travis 文件，提交代码后自动执行上报"></a>4. 配置Travis 文件，提交代码后自动执行上报</h3><p>授权Github账号授权Travis后，在每次提交会按照项目中的<code>.travis.yml</code>配置文件自动执行脚本，只配置自动上报测试报告脚本。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">language<span class="token operator">:</span> node_jsnode_js<span class="token operator">:</span>  <span class="token operator">-</span> <span class="token number">14</span> # use nodejs v10 <span class="token constant">LTS</span>cache<span class="token operator">:</span> npmscript<span class="token operator">:</span>  <span class="token operator">-</span> yarn coveralls # generate <span class="token keyword">static</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-提交代码触发CI，查看覆盖率"><a href="#5-提交代码触发CI，查看覆盖率" class="headerlink" title="5. 提交代码触发CI，查看覆盖率"></a>5. 提交代码触发CI，查看覆盖率</h3><p>提交代码后，就可以在Travis-CI后台看到执行过程了，执行成功后等几分钟去<a href="https://coveralls.io/">coveralls.io</a>查看报告，这是我项目的<a href="https://coveralls.io/github/nihaojob/popular-message">测试报告</a>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a5e2dd5d3b7493c9d6a23d5a7e6ea8c~tplv-k3u1fbpfcp-zoom-1.image"></p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b50e6c759484b6295df557e4d720bd3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></h3><p>点击EMBED按钮获得带覆盖率的徽章，拷贝到自己的项目ReadMe文件里就可以了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92185563e95844558bb817d248497a25~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>自己最近的一篇笔记是<a href="https://juejin.cn/post/6978831511164289055">《Vue业务系统落地单元测试》</a>，对单元测试的空白算是补上了一点，趁着热乎劲把自己的小插件也加了一下单元测试，如果你也在学习单元测试，大家一起Star、相互鼓励学习吧。</p><p>看到自己的开源小插件<a href="https://github.com/nihaojob/popular-message">popular-message</a>从0到200多Star，真的是满心欢喜，感谢阮一峰老师博客的介绍，感谢公众号的推送，感谢素未谋面的朋友提来PR和Issue。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天给我的开源项目&lt;a href=&quot;https://github.com/nihaojob/popular-message&quot;&gt;popular-message&lt;/a&gt;增加了一下测试覆盖率的图标，覆盖率提高到了88%，不过这个覆盖率的图标还真不是直接放个图片链接这么简单。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>再次游泳，聊聊最近听的和看的</title>
    <link href="https://nihaojob.github.io/2021/07/29/swimming/"/>
    <id>https://nihaojob.github.io/2021/07/29/swimming/</id>
    <published>2021-07-29T19:59:54.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游泳"><a href="#游泳" class="headerlink" title="游泳"></a>游泳</h3><p>周日花了50块钱体验游泳了，结婚前学会的游泳，现在孩子都快三岁了，中间好几年都没去过游泳馆，毫无意外的被呛水，在前二十分钟里，基本上是在适应对水的恐惧，后边就好了很多，慢慢的找到了游泳的感觉。</p><p>回忆起蛙泳的动作后，感觉比之前游的更舒服，可能是错觉吧，身体慢慢放松后，随着水的浮力飘起来，缓慢的游着，能感觉到还没有完全的恢复到当时的水平，记得当时可以潜泳4/5的泳道长度，在泳道末尾翻转往回游，并且可以在游泳的同时轻松的注意到周围的变化，这次显然是没有到达这个标准，我没办法注意到周围的变化，要专注在呼吸和动作上，我希望办卡，把这个习惯捡起来，1600 一年，价格不算太贵，准备周末办卡。<br>​</p><h3 id="三五环"><a href="#三五环" class="headerlink" title="三五环"></a>三五环</h3><p>今天听早上听了刘飞老师的三五环博客，和少楠老师一起聊创业和独立开发者的话题，有2个点印象蛮深刻：</p><ol><li>任何事情都存在局限性</li><li>把精力分配给机会而非惯性</li></ol><p>刘飞老师在刚从事产品经理两年半的时间里，就写了一本《产品思维》，刘飞老师谈起这本书的名字还稍微有点不好意思，少楠说：“任何事情都存在局限性”，在现在看起来，真正的产品思维可能在广义和狭义上都有更高一层的解释，但在那个时间，有人能够系统的记录下来当时的职业状态本身就是有价值的事情。</p><p>少楠老师说的自己在做创业的这时间段，发现从打工人到创业者的转变过程中是有惯性的，在职场的环境中，要想优秀，获得认可，是需要计划和工作，做更多的事情，让自己忙碌起来，从职场到创业，这种惯性的力量会很强，但是做更多的事情与创造更多价值并没有太大关系。<br>​</p><h3 id="熊小夕"><a href="#熊小夕" class="headerlink" title="熊小夕"></a>熊小夕</h3><p>在听创业内幕的播客中，有一个水家电的创业者采访，里边提到产品人的能力，我自己定义为用户思维能力。<br>用户思维：通过用户的反馈，洞见用户背后真正的需求，给出符合用户期望的解决方案，而不是让用户创造或直接给出答案。<br>​</p><h3 id="架构能力"><a href="#架构能力" class="headerlink" title="架构能力"></a>架构能力</h3><p>现在负责的项目复杂度越来越高，通过阅读《架构整洁之道》，结合玉伯最近一篇文章中提到的“文档优先”的工作习惯，我越来越有编程的感觉了，每添加一个功能，我会先梳理文档，确定如何实现的细节，如何划分模块间的功能职责，我会花很多精力思考如何让代码能被他人轻松理解，最近增加的功能如日志插件、推流优化方案都是按照插件的方式来扩展功能，将他们聚合在一个模块内。<br>​</p><h3 id="最近在看的内容"><a href="#最近在看的内容" class="headerlink" title="最近在看的内容"></a>最近在看的内容</h3><p>除了听播客以外，最近还在看的2本书是《不再害羞》和《善战者说》，第一本看了70%，里对害羞做了一些很深刻的剖析，人格特质轮、遗传了等各种有史以来对害羞的论证，最后得出一个积极乐观的结论是：害羞可以后天克服，再后边是讲一些实践的部分，还有很一大章节是要自我分析的问卷，因为用kindle读，直接都忽略了，我一直有这个困惑的，很多改变认知或者习惯的书籍，都有这样的问卷分析，但作为一个电子阅读器读者来说，会觉得很遗憾，我的阅读场景就是在地铁或者公交上，捧着一个阅读器，如果要按照书中的问卷一个一个列下来，然后再算分数分析觉得很困难，跳过又觉得遗漏了重要内容。</p><p>有点跑题，第二本看了36%，刚开始看很爽，不过后边读的欲望就不是特别的强烈了，因为我之前没接触过战略相关的内容，所以对我的吸引力很强，看过一些内容以后，就不再那么吸引我，不过很好读，都是一些故事和分析，包括战争和商战，因为都是事后的一些分析，也不是100%对内容不质疑，但描述的战略概念对我来说更清晰了。</p><p>还有就是一些公众号推送的文章也挺不错：</p><ul><li><a href="https://weibo.com/ttarticle/p/show?id=2309404661380316790945">看完地球首富贝佐斯的100条思考，我才意识到他是“外星人”</a></li><li><a href="https://xw.qq.com/partner/sxs/20210712A005S2/20210712A005S200?ADTAG=sxs&pgv_ref=sxs">从取消大小周，联想到互联网英雄主义时代的落幕</a></li><li><a href="http://app.myzaker.com/news/article.php?pk=60d865818e9f096e8360c437&f=diandiannews">日本的内卷经验告诉我们什么？</a></li><li><a href="http://www.eepw.com.cn/article/202105/425307.htm">华为内部论坛的这篇雄文火了：社会内卷的真正原因</a></li></ul><p>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;游泳&quot;&gt;&lt;a href=&quot;#游泳&quot; class=&quot;headerlink&quot; title=&quot;游泳&quot;&gt;&lt;/a&gt;游泳&lt;/h3&gt;&lt;p&gt;周日花了50块钱体验游泳了，结婚前学会的游泳，现在孩子都快三岁了，中间好几年都没去过游泳馆，毫无意外的被呛水，在前二十分钟里，基本上是在适应</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>最近关键词：述职、线上事故、买床、雨中望京</title>
    <link href="https://nihaojob.github.io/2021/07/12/mylift/"/>
    <id>https://nihaojob.github.io/2021/07/12/mylift/</id>
    <published>2021-07-12T13:01:52.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>本来预计本周三下午述职，结果提前到今天中午一点，最近搞的有点累，周日刚加班一天，接着晚上听述职，又上线一个小功能。今天自己述职，中午没吃饭，有点疲惫。</p><p>说点开心的，终于有一个自己的地方了，搭建了一个自己的博客，可以记录点生活相关的内容了，在掘金和知乎发表这些都感觉不太合适，看自己更新的进度吧，还是有抑制不住注册个人公众号的冲动，无所谓了，先在自己的这个“小地方”造吧，写点自己的东西。</p><h3 id="鼻毛修剪器"><a href="#鼻毛修剪器" class="headerlink" title="鼻毛修剪器"></a>鼻毛修剪器</h3><p>最近在拼多多上买了一个鼻毛修剪器，9块9手动版，用着还不错；之前买过一个电动的，需要装一节电池，但是鼻毛不像胡子，不需要每天都修剪，所以电池会放很长时间，等需要用的时候发现已经放没电了，体验特别不好，这款手动的从外观和使用上来说，基本可以满足我的需求。</p><p>我最近也在用刀片剃须刀，越来越觉得这些手动的东西有更好的体验，不需要关心充电，不需要带充电器，现在只要出门我基本上带的都是刀片剃须刀。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/src%3Dhttp___cbu01.alicdn.com_img_ibank_2013_262_930_1008039262_1124984138.jpg%26refer%3Dhttp___cbu01.alicdn.jpeg" alt="修剪器"></p><h3 id="线上事故"><a href="#线上事故" class="headerlink" title="线上事故"></a>线上事故</h3><p>周五出了一次线上事故，从接口400报错开始，原因是我们有一个设计是前端通过判断userID前缀来区分用户类型，占用了前4位，结果用户增长较快，java中init类型溢出最大值，导致崩溃，周五紧急修复。</p><h3 id="宜家买床垫"><a href="#宜家买床垫" class="headerlink" title="宜家买床垫"></a>宜家买床垫</h3><p>周六去了宜家，花了四千多，买了床和一个床垫，床架一千多，对于我们这种收入的群体来时，还是觉得蛮奢侈的，能够下决心买，主要是因为看过《睡眠革命》这本书，人的一生要在床上渡过很长时间，高效的休息能带来好的精神状态，我认为这不再是消费，而是投资，是值得的。</p><p>我和我爱人都不太喜欢太软的床垫，体验了大弹簧、袋装弹簧、和双层袋装弹簧，特别喜欢双层袋装弹框的床垫，但是太贵了，要五千多，我们没舍得买，最后选了2999元的单层袋装弹簧加硬型菲因维尔床垫和一千多的床架。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG776.jpeg"></p><p>床板选用的普通床板，我们原本打算三千多搞定的，已经超预算了，就没买好的床板，好一点的床板会根据不同的区域选用不同的软硬接头与木板材质，一分钱一分货，真的是好细致。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG775.jpeg"></p><p>我家娃可能是逛家居店太无聊，吃完饭后就睡着了，我就把他放在试用床上睡觉，很多人过来说小宝宝给宜家做广告了，证明床垫特别舒服，哈哈哈。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG773.jpeg"></p><h3 id="雨中望京"><a href="#雨中望京" class="headerlink" title="雨中望京"></a>雨中望京</h3><p>今天周一，昨天晚上暴雨，早上骑小踏板去上班，拍到了雨中云雾缭绕的绿地中心和阿里巴巴大厦。</p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG772.jpeg"></p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG771.jpeg"></p><p><img src="https://raw.githubusercontent.com/nihaojob/blogImg/main/WechatIMG770.jpeg"></p><h3 id="最近看的GitHub项目"><a href="#最近看的GitHub项目" class="headerlink" title="最近看的GitHub项目"></a>最近看的GitHub项目</h3><ul><li>js分析图片主色：<a href="https://github.com/briangonzalez/rgbaster.js">rgbaster.js</a></li><li>HTML转图片：<a href="https://github.com/cburgmer/rasterizeHTML.js">rasterizeHTML.js</a></li></ul><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li><p><a href="https://mp.weixin.qq.com/s/L90F_s9-jdYXWXTrpq4G5Q">当 Vue 只有 5kb：尤雨溪发布新作 petite-vue，针对渐进增强进行优化</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/1tnDvvaG_w_ycVKjIdnwTg">Windows Terminal性能再惹争议，难度相当于博士项目？</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/o0kzYzX5El4QiWEpczklGQ">下班打卡字节跳动，令人震撼来袭！</a></p></li></ul><ul><li><p><a href="https://mp.weixin.qq.com/s/IGTirxb6Cg7c_uMrHyvhHw">WebIM原理解析</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/iwYN4a_YNosyjTGBodCm9Q">Vision 内核大升级——可视化搭建引擎 Gems 应运而生</a></p></li></ul><h3 id="文摘"><a href="#文摘" class="headerlink" title="文摘"></a>文摘</h3><p>我们能尝试的只是设计一种自动装置，在大部分失效发生时仍能继续工作</p><blockquote><p>《系统化思维导论》一书中引用冯诺依曼的话写道：如果你观察一些自动装置，不论它们是人类设计的还是自然界本来就存在的，你通常会发现，它们的结构很大程度上受控于它们可能失效的方式，以及针对失效所采取的防御性措施（多少有些效果），说它们能预防失效有点夸张，它们不是能预防失效的，只是被设计成试图达到这种状态，这样至少大部分失效都不会是毁灭性的。所以，根本谈不上消除失效，或完全消除失效带来的影响。我们能尝试的只是设计一种自动装置，在大部分失效发生时仍能继续工作，这种装置减轻了失效的后果，而不是治愈失效，大部分人造的和自然界存在的自动装置，其内部原理都是如此。</p></blockquote><p>纪律的重要性</p><blockquote><p>纪律是关键，只有持之以恒的遵守制度，才能避免方法和规定沦为空谈。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来预计本周三下午述职，结果提前到今天中午一点，最近搞的有点累，周日刚加班一天，接着晚上听述职，又上线一个小功能。今天自己述职，中午没吃饭，有点疲惫。&lt;/p&gt;
&lt;p&gt;说点开心的，终于有一个自己的地方了，搭建了一个自己的博客，可以记录点生活相关的内容了，在掘金和知乎发表这些都</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决github无法访问【极简免费】</title>
    <link href="https://nihaojob.github.io/2021/07/08/github-visit/"/>
    <id>https://nihaojob.github.io/2021/07/08/github-visit/</id>
    <published>2021-07-08T15:30:11.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub访问慢、访问超时一直是个困扰我的问题，网上各种ping IP、配Host的方式，我自己也买了Vpn，但也总是出问题，无法一劳永逸.</p><p>最近使用  GitHub520 + SwitchHosts 2个开源项目轻松解决了GitHub访问的难题，一分钟配置完，优秀的解决方案真的是使用过程中基本无感，安心使用就好了，完全不用关心IP、手动配置Host的问题。</p><h3 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h3><ul><li><a href="https://github.com/521xueweihan/GitHub520">GitHub520</a>：试图解决访问速度慢、图片加载失败的问题</li><li><a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a>：SwitchHosts 是一个管理 hosts 文件的应用</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>下载SwitchHosts</li><li>配置远程地址：填入GitHub520提供的远程地址即可</li><li>无感使用</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6f6e65403a24ba69cb06ca7d5187670~tplv-k3u1fbpfcp-watermark.image" alt="2021-07-08 15.15.41.gif"></p><p>地址：<a href="https://raw.fastgit.org/521xueweihan/GitHub520/main/hosts">https://raw.fastgit.org/521xueweihan/GitHub520/main/hosts</a></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dad50df9f94544bea31c9b89132a48ce~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>我是骑踏板摩托的JSer，欢迎关注我。</p><p>RSS：<a href="https://nihaojob.github.io/atom.xml">https://nihaojob.github.io/atom.xml</a></p><ul><li><a href="https://www.zhihu.com/people/nihaojob">知乎</a></li><li><a href="https://www.yuque.com/zaotalk/ip/yg2gct">早早聊</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub访问慢、访问超时一直是个困扰我的问题，网上各种ping IP、配Host的方式，我自己也买了Vpn，但也总是出问题，无法一劳永逸.&lt;/p&gt;
&lt;p&gt;最近使用  GitHub520 + SwitchHosts 2个开源项目轻松解决了GitHub访问的难题，一分钟配置</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue业务系统落地单元测试</title>
    <link href="https://nihaojob.github.io/2021/07/08/vue-Jest/"/>
    <id>https://nihaojob.github.io/2021/07/08/vue-Jest/</id>
    <published>2021-07-08T13:01:52.000Z</published>
    <updated>2022-07-28T02:23:30.472Z</updated>
    
    <content type="html"><![CDATA[<p>一直对单测很感兴趣，但对单测覆盖率、测试报告等关键词懵懵懂懂，最近几个月一直在摸索如何在Vue业务系统中落地单元测试，看到慢慢增长的覆盖率，慢慢清晰的模块，对单元测试的理解也比以前更加深入，也有一些心得和收获。</p><p>今天把自己的笔记分享出来，和大家一起交流我在2个较为复杂的Vue业务系统中落地单测的一些思路和方法，算是入门实践类的笔记，资深大佬还请跳过。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ol><li>定义</li><li><strong>安装与使用</strong></li><li><strong>常用API</strong></li><li><strong>落地单元测试</strong></li><li><strong>演进：构建可测试的单元模块</strong></li><li><strong>可维护的单元模块</strong></li><li>回顾</li><li>讨论 &amp;&amp; Thank</li></ol><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p><strong>单元测试定义：</strong></p><p>单元测试是指对软件中的<strong>最小可测试单元进行检查和验证</strong>。单元在质量保证中是非常重要的环节，根据测试金字塔原理，越往上层的测试，所需的测试投入比例越大，效果也越差，而单元测试的成本要小的多，也更容易发现问题。</p><p>也有不同的测试分层策略（冰淇淋模型、冠军模型）。</p><p><strong><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c916b65f711945a19d6f61ecdc386882~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></strong></p><h2 id="2-安装与使用"><a href="#2-安装与使用" class="headerlink" title="2. 安装与使用"></a>2. 安装与使用</h2><h4 id="1-vue项目添加-vue-unit-jest-文档"><a href="#1-vue项目添加-vue-unit-jest-文档" class="headerlink" title="1. vue项目添加 @vue/unit-jest 文档"></a>1. vue项目添加 @vue/unit-jest <a href="https://vue-test-utils.vuejs.org/zh/guides/#%E5%AE%89%E8%A3%85">文档</a></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vue <span class="token function">add</span> @vue/unit-jest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，在package.json中会多出test:unit脚本选项，并生成jest.config.js文件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"avatar"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"test:unit"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service test:unit"</span><span class="token punctuation">,</span> <span class="token comment">// 新增的脚本</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成测试报告的脚本：增加–coverage自定义参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"avatar"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"test:unit"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service test:unit"</span><span class="token punctuation">,</span>    <span class="token string">"test:unitc"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service test:unit  --coverage"</span><span class="token punctuation">,</span> <span class="token comment">// 测试并生成测试报告</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-VScode-vscode-jest-runner-插件配置"><a href="#2-VScode-vscode-jest-runner-插件配置" class="headerlink" title="2. VScode vscode-jest-runner 插件配置"></a>2. VScode vscode-jest-runner 插件配置</h4><p>作用：VS Code打开测试文件后，可直接运行用例。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4df9e177d49140d3833c73235b1ff00a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>运行效果：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2617ab4e4ba24c6c825ae557e0ef8284~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>不通过效果：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7adf5ee537f342948bf8e1429b8ccf5e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>安装插件：<a href="https://marketplace.visualstudio.com/items?itemName=firsttris.vscode-jest-runner">https://marketplace.visualstudio.com/items?itemName=firsttris.vscode-jest-runner</a><br>配置项：设置 =&gt; jest-Runner Config</p><ul><li>Code Lens Selector：匹配的文件，**/*.{test,spec}.{js,jsx,ts,tsx}</li><li>Jest Command：定义Jest命令，默认为Jest 全局命令。</li></ul><p>将Jest Command替换为 test:unit，使用vue脚手架提供的 test:unit 进行单元测试。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/326c34d8ec3a45e09ed532267c395892~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h4 id="3-githook-配置"><a href="#3-githook-配置" class="headerlink" title="3. githook 配置"></a>3. githook 配置</h4><p>作用：在提交时执行所有测试用例，有测试用例不通过或覆盖率不达标时取消提交。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/571482fd44e6457694730be6fe93ccb6~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8063d92f2b9244cf9e57306460369803~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> husky --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"avatar"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"test:unit"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service test:unit"</span><span class="token punctuation">,</span>    <span class="token string">"test:unitc"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service test:unit  --coverage"</span><span class="token punctuation">,</span> <span class="token comment">// 测试并生成测试报告</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"npm run test:unitc"</span> <span class="token comment">// commit时执行参单元测试 并生成测试报告</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置牵引指标：jest.config.js，可全局设置、对文件夹设置、对单个文件设置。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  preset<span class="token operator">:</span> <span class="token string">'@vue/cli-plugin-unit-jest'</span><span class="token punctuation">,</span>  timers<span class="token operator">:</span> <span class="token string">'fake'</span><span class="token punctuation">,</span>  coverageThreshold<span class="token operator">:</span> <span class="token punctuation">&#123;</span>   global<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 全局</span>      branches<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      functions<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      lines<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>      statements<span class="token operator">:</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'./src/common/**/*.js'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 文件夹</span>      branches<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      statements<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">'./src/common/agoraClientUtils.js'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 单个文件</span>      branches<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      functions<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      lines<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>      statements<span class="token operator">:</span> <span class="token number">80</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试报告"><a href="#4-测试报告" class="headerlink" title="4. 测试报告"></a>4. 测试报告</h4><p>生成的测试报告在跟目录下的<code>coverage</code>文件夹下，主要是4个指标。</p><blockquote><ul><li>语句覆盖率（statement coverage）每个语句是否都执行</li><li>分支覆盖率（branch coverage）每个if代码块是否都执行</li><li>函数覆盖率（function coverage）每个函数是否都调用</li><li>行覆盖率（line coverage) 每一行是否都执行了</li></ul></blockquote><p>根目录截图<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad0e6c648ab14d048149a6eb149e606b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>文件夹目录截图：三种颜色代表三种状态：红色、黄色、绿色。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d4d1d67eec04889820a6a0736debe3e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><br>单个文件截图：红色行为未覆盖，绿色行为运行次数。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a4abfd2c214484e8ee7dcd24b64dcd5~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="3-常用API"><a href="#3-常用API" class="headerlink" title="3. 常用API"></a>3. 常用API</h2><p>抛砖引玉，只展示简单的用法，具体可参见文档。</p><p><strong>Jest常用方法：</strong><br><a href="https://jestjs.io/zh-Hans/">文档</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例子</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'versionToNum 版本号转数字'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'10.2.3 => 10.2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">versionToNum</span><span class="token punctuation">(</span><span class="token string">'10.2.3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10.2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'11.2.3 => 11.2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">versionToNum</span><span class="token punctuation">(</span><span class="token string">'11.2.3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">11.2</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*------------------------------------------------*/</span><span class="token comment">// 值对比</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">expect</span><span class="token punctuation">(</span>operationServe<span class="token punctuation">.</span>operationPower<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 对象对比</span><span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>one<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// JSON 对比</span><span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span>afterJson<span class="token punctuation">)</span><span class="token comment">// 每次执行前</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// do  some thing....</span>  <span class="token comment">// DOM 设置</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div id="pc" class="live-umcamera-video" style="position: relative;">        &lt;div style="width:200px; height:300px; position:absolute; top:20px; left:500px;">            &lt;video style="width:300px; height:400px;"                autoplay="" muted="" playsinline="">&lt;/video>        &lt;/div>    &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Mock</span><span class="token keyword">const</span> getCondition <span class="token operator">=</span>  jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameterName<span class="token operator">:</span> <span class="token string">'hulala'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Promise 方法</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取预置埋点 - pages'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'pages'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// logType不包含presetEvent、不等于 pages，获取预置埋点</span>    <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>findPresetList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 定时器方法  </span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'定时器 新建 执行'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntervalStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> callback <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">'oneset'</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  jest<span class="token punctuation">.</span><span class="token function">runTimersToTime</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment">// 等待2秒</span>  <span class="token function">expect</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@vue/test-utils常用方法：</strong><br><a href="https://vue-test-utils.vuejs.org/zh/">文档</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 例子</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mount <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token keyword">import</span> Counter <span class="token keyword">from</span> <span class="token string">'./counter'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Counter'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 现在挂载组件，你便得到了这个包裹器</span>  <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'renders the correct markup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="count">0&lt;/span>'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 也便于检查已存在的元素</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'has a button'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/*------------------------------------------------*/</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> shallowMount<span class="token punctuation">,</span> mount<span class="token punctuation">,</span> render<span class="token punctuation">,</span> renderToString<span class="token punctuation">,</span> createLocalVue <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token keyword">import</span> Component <span class="token keyword">from</span> <span class="token string">'../HelloWorld.vue'</span><span class="token comment">// router模拟</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> localVue <span class="token operator">=</span> <span class="token function">createLocalVue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>localVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token function">shallowMount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> localVue <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 伪造</span><span class="token keyword">const</span> $route <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token string">'/some/path'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  mocks<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    $route  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// store 模拟</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      state<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      actions <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">shallowMount</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> localVue<span class="token punctuation">,</span> store <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'错误信息展示'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// shallowMount  入参模拟</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">shallowMount</span><span class="token punctuation">(</span>cloudPhone<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      propsData<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        mosaicStatus<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        customerOnLine<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        cloudPhoneState<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        cloudPhoneError<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        cloudPhoneTip<span class="token operator">:</span> <span class="token string">'发生错误'</span><span class="token punctuation">,</span>        delay<span class="token operator">:</span> <span class="token string">''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token comment">// 子组件是否展示</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Tip<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment">// html判断</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'发生错误'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment">// DOM 元素判断</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'.mosaicStatus'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">// 执行点击事件</span>    <span class="token keyword">await</span> wrapper<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token comment">// class</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">classes</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 子组件查找  </span>  wrapper<span class="token punctuation">.</span><span class="token function">findComponent</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span>    <span class="token comment">// 销毁</span>   wrapper<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// </span>   wrapper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'bar'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// axios模拟</span>   jest<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      get<span class="token operator">:</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-落地单元测试"><a href="#4-落地单元测试" class="headerlink" title="4. 落地单元测试"></a>4. 落地单元测试</h2><p>❌ 直接对一个较大的业务组件添加单元测试，需要模拟一系列的全局函数，无法直接运行。</p><p><strong>问题：</strong></p><ol><li>逻辑多：业务逻辑不清楚，1000+ 行</li><li>依赖多：<code>$dayjs、$api、$validate、$route、$echarts、mixins、$store</code>…</li><li>路径不一致：有<code>@</code>、<code>./</code>、<code>../</code></li></ol><blockquote><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。<br>– 廖雪峰的官方网站</p></blockquote><p><strong>落地：</strong></p><p>✅ 对业务逻辑关键点，<strong>抽出纯函数、类方法、组件，并单独增加测试代码</strong>。</p><p><strong>例子：</strong><br>获取分组参数，由7个接口聚合。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59831dcee1794629955d3d5a0ad2618f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b06a2326738f40d1ab942eb6540e84d4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b45f82ac9d542788aa3b2126d1252d8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>原有逻辑：<br>系统参数存全局变量，自定义参数存全局变量</p><ul><li>无法看出多少种类型与接口数量</li><li>无法在多个位置直接复用<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getCondition</span> <span class="token punctuation">(</span><span class="token parameter">fIndex<span class="token punctuation">,</span> oneFunnel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 添加限制条件，如果该事件没有先拉取</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>biz<span class="token punctuation">,</span> logType<span class="token punctuation">,</span> event<span class="token punctuation">,</span> feCreateType<span class="token punctuation">&#125;</span> <span class="token operator">=</span> oneFunnel      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 私有限制条件为空，且不是预置事件 或 页面组，就拉取私有限制条件</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>extraParamsList<span class="token punctuation">.</span>parameterList<span class="token punctuation">,</span> fIndex<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>logType <span class="token operator">!==</span> <span class="token string">'pages'</span> <span class="token operator">&amp;&amp;</span> logType<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'presetEvent'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>logType<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">ParameterList</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              biz<span class="token operator">:</span> logType <span class="token operator">===</span> <span class="token string">'server'</span> <span class="token operator">&amp;&amp;</span> feCreateType <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">''</span> <span class="token operator">:</span> biz<span class="token punctuation">,</span>              event<span class="token operator">:</span> event<span class="token punctuation">,</span>              terminal<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customType<span class="token punctuation">[</span>logType<span class="token punctuation">]</span><span class="token punctuation">,</span>              platform<span class="token operator">:</span> logType <span class="token operator">===</span> <span class="token string">'server'</span> <span class="token operator">&amp;&amp;</span> feCreateType <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'common'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>              pageNum<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>ret <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>extraParamsList<span class="token punctuation">.</span>parameterList<span class="token punctuation">[</span>fIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> element<span class="token punctuation">.</span>parameterName <span class="token operator">||</span> element<span class="token punctuation">.</span>parameter_name<span class="token punctuation">,</span> element<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'获取事件属性失败，请联系后台管理员'</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>logType <span class="token operator">===</span> <span class="token string">'presetEvents'</span> <span class="token operator">||</span>  logType <span class="token operator">===</span> <span class="token string">'presetEventsApp'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span><span class="token function">findPresetList</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              biz<span class="token punctuation">,</span>              appTerminal<span class="token operator">:</span> logType<span class="token punctuation">,</span>              operation<span class="token operator">:</span> event            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                  item<span class="token punctuation">.</span>description <span class="token operator">=</span> item<span class="token punctuation">.</span>name                  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>extraParamsList<span class="token punctuation">.</span>parameterList<span class="token punctuation">[</span>fIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span> item<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'无需拉取'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token function">getGlobalCondition</span> <span class="token punctuation">(</span><span class="token parameter">funnelId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 获取 全局 基础选项</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span><span class="token function">getGlobalCondition</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          funnelId<span class="token operator">:</span> funnelId<span class="token punctuation">,</span>          type<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>conditionMode        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>bizList<span class="token punctuation">,</span> expressions<span class="token punctuation">,</span> expressionsNumber<span class="token punctuation">,</span> comBizList<span class="token punctuation">&#125;</span> <span class="token operator">=</span> res<span class="token punctuation">.</span>data            <span class="token keyword">this</span><span class="token punctuation">.</span>bizList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token operator">...</span>bizList<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comBizList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token operator">...</span>comBizList<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comBizKeyList <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>comBizList<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>operatorList <span class="token operator">=</span> expressions            <span class="token keyword">this</span><span class="token punctuation">.</span>numberOperatorList <span class="token operator">=</span> expressionsNumber            <span class="token keyword">this</span><span class="token punctuation">.</span>comBizKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>comBizList<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComBizEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'获取基础选项失败，请联系后台管理员'</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'获取基础选项失败，请联系后台管理员'</span><span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token function">setCommonPropertiesList</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 初始化 公共限制条件列表 commonPropertiesList</span>      <span class="token keyword">const</span> commonPropertiesList <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        auto<span class="token operator">:</span> data<span class="token punctuation">.</span>h5AutoCommonProperties<span class="token punctuation">,</span>        pages<span class="token operator">:</span> data<span class="token punctuation">.</span>h5PagesCommonProperties<span class="token punctuation">,</span>        presetEvents<span class="token operator">:</span> data<span class="token punctuation">.</span>h5PresetCommonProperties<span class="token punctuation">,</span> <span class="token comment">// h5 预置事件 公共属性</span>        customH5<span class="token operator">:</span> data<span class="token punctuation">.</span>h5CustomCommonProperties<span class="token punctuation">,</span>        customApp<span class="token operator">:</span> data<span class="token punctuation">.</span>appCustomCommonProperties<span class="token punctuation">,</span>        presetEventsApp<span class="token operator">:</span> data<span class="token punctuation">.</span>appPresetCommonProperties<span class="token punctuation">,</span> <span class="token comment">// App 预置事件 公共属性</span>        server<span class="token operator">:</span> data<span class="token punctuation">.</span>serverCommonProperties<span class="token punctuation">,</span>        customWeapp<span class="token operator">:</span> data<span class="token punctuation">.</span>weappCustomCommonProperties<span class="token punctuation">,</span>        presetEventsWeapp<span class="token operator">:</span> data<span class="token punctuation">.</span>weappPresetCommonProperties<span class="token punctuation">,</span> <span class="token comment">// Weapp 预置事件 公共属性</span>        presetEventsServer<span class="token operator">:</span> data<span class="token punctuation">.</span>serverPresetCommonProperties <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Server 预置事件 公共属性</span>        presetEventsAd<span class="token operator">:</span> data<span class="token punctuation">.</span>adPresetCommonProperties      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> type <span class="token keyword">in</span> commonPropertiesList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将parameter_name的值作为key，item作为value，组合为k-v形式</span>        <span class="token keyword">let</span> properties <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commonPropertiesList<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span>        commonPropertiesList<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          properties<span class="token punctuation">[</span>item<span class="token punctuation">.</span>parameter_name<span class="token punctuation">]</span> <span class="token operator">=</span> item        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        commonPropertiesList<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> properties      <span class="token punctuation">&#125;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>commonPropertiesList <span class="token operator">=</span> commonPropertiesList    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>拆分模块后：<br>建立GetParamsServer主类，该类由2个子类构成，并聚合子类接口。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/754d1c384cf841c69b5a558c87341f6a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></li></ul><p>这是其中一个子类，获取私有参数的单元测试：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> GetParamsServer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> GetPrivateParamsServer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/views/analysis/components/getParamsServer.js'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'GetPrivateParamsServer 私有参数获取'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> $api    <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      $api <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        analysis<span class="token operator">:</span> <span class="token punctuation">&#123;</span>          findPresetList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'hulala'</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">'234234'</span><span class="token punctuation">,</span> data_type<span class="token operator">:</span> <span class="token string">'event'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 预置埋点</span>          serverParameterList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameterName<span class="token operator">:</span> <span class="token string">'hulala'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 服务端埋点</span>          autoParameterList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameter_name<span class="token operator">:</span> <span class="token string">'hulala'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// H5全埋点</span>          customH5ParameterList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameterName<span class="token operator">:</span> <span class="token string">'hulala'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// H5自定义</span>          customWeappParameterList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameter_name<span class="token operator">:</span> <span class="token string">'hulala'</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">'234234'</span><span class="token punctuation">,</span> data_type<span class="token operator">:</span> <span class="token string">'event'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Weapp自定义</span>          customAppParameterList<span class="token operator">:</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            ret<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> parameterName<span class="token operator">:</span> <span class="token string">'hulala'</span><span class="token punctuation">,</span> description<span class="token operator">:</span> <span class="token string">'asdfafd'</span><span class="token punctuation">,</span> data_type<span class="token operator">:</span> <span class="token string">'event'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// App自定义</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'GetPrivateParamsServer 不同类型获取'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取预置埋点 - pages'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'pages'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// logType不包含presetEvent、不等于 pages，获取预置埋点</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>findPresetList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取预置埋点 - presetEvent '</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'presetEvent'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// logType不包含presetEvent、不等于 pages，获取预置埋点</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>findPresetList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - 其他'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'12312'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>findPresetList<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>serverParameterList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - auto'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>autoParameterList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - customH5'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'customH5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>customH5ParameterList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - customWeapp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'customWeapp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>customWeappParameterList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - customApp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'customApp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>$api<span class="token punctuation">.</span>analysis<span class="token punctuation">.</span>customAppParameterList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - 不存在类型'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getCondition</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'哈哈哈哈'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'GetPrivateParamsServer 结果转换为label'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取预置埋点 - pages'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getConditionLabel</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'pages'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>types<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'custom'</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dataType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - customWeapp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getConditionLabel</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'customWeapp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>types<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'custom'</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dataType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'获取非预置埋点 - customApp'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> paramsServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetPrivateParamsServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      paramsServer<span class="token punctuation">.</span><span class="token function">initApi</span><span class="token punctuation">(</span>$api<span class="token punctuation">)</span>      <span class="token keyword">return</span> paramsServer<span class="token punctuation">.</span><span class="token function">getConditionLabel</span><span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'customApp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>types<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'custom'</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dataType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'event'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/415670ec89c54c75b61c2f1b1200ef84~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><strong>从测试用例看到的代码逻辑：</strong></p><ul><li>6个接口</li><li>6种事件类型</li><li>类型与接口的对应关系</li><li>接口格式有三种</li></ul><p><strong>作用：</strong></p><ol><li>复用：将复杂的业务逻辑封闭在黑盒里，更方便复用。</li><li>质量：模块的功能通过测试用例得到保障。</li><li>维护：测试即文档，方便了解业务逻辑。</li></ol><p>实践：在添加单测的过程中，抽象模块，重构部分功能，并对单一职责的模块增加单测。</p><h2 id="5-演进：构建可测试单元模块"><a href="#5-演进：构建可测试单元模块" class="headerlink" title="5. 演进：构建可测试单元模块"></a>5. 演进：构建可测试单元模块</h2><p>将业务代码代码演变为可测试代码，重点在：</p><ol><li>设计：将业务逻辑<strong>拆分为单元模块</strong>（UI组件、功能模块）。</li><li>时间：可行的重构目标与重构方法，要有<strong>长期重构</strong>的心理预期。</li></ol><p><strong>为单一职责的模块设计测试用例，才会对功能覆盖的更全面，所以设计这一步尤为重要。</strong></p><blockquote><p>如果挽救一个系统的办法是重新设计一个新的系统，那么，<strong>我们有什么理由认为从头开始，结果会更好呢</strong>?<br>–《架构整洁之道》</p></blockquote><p>原来模块也是有设计，我们如何保证重构后真的比之前更好吗？还是要根据设计原则客观的来判断。</p><p><strong>设计原则 SOLID：</strong></p><ul><li>SRP-单一职责</li><li>OCP-开闭：易与扩展，抗拒修改。</li><li>LSP-里氏替换：子类接口统一，可相互替换。</li><li>ISP-接口隔离：不依赖不需要的东西。</li><li>DIP-依赖反转：构建稳定的抽象层，单向依赖（例：A =&gt; B =&gt; C， 反例：A  =&gt; B =&gt; C =&gt; A）。</li></ul><p>在应接不暇的需求面前，还要拆模块、重构、加单测，无疑是增加工作量，显得不切实际，《重构》这本书给了我很多指导。</p><p><strong>重构方法：</strong></p><ul><li>预备性重构</li><li>帮助理解的重构</li><li>捡垃圾式重构（营地法则：遇到一个重构一个，像见垃圾一样，让你离开时的代码比来时更干净、健康）</li><li>有计划的重构与见机行事的重构</li><li>长期重构</li></ul><p><strong>业务系统1的模块与UI梳理：</strong></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d341a479c8349418e1be072284936e2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><strong>业务系统2的模块与UI梳理：</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af1688492c8449aabf15f1797b0569f6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="6-可维护的单元模块"><a href="#6-可维护的单元模块" class="headerlink" title="6. 可维护的单元模块"></a>6. 可维护的单元模块</h2><blockquote><p>避免重构后再次写出坏味道的代码，提取执行成本更低的规范。</p></blockquote><p><strong>代码坏味道：</strong></p><ul><li><strong>神秘命名-无法取出好名字，背后可能潜藏着更深的设计问题。</strong></li><li>重复代码</li><li><strong>过长函数-小函数、纯函数</strong>。</li><li>过长参数</li><li><strong>全局数据-数量越多处理难度会指数上升。</strong></li><li>可变数据-不知道在哪个节点修改了数据。</li><li>发散式变化-只关注当前修改，不用关注其他关联。</li><li><strong>霰弹式修改-修改代码散布四处</strong>。</li><li>依恋情结-与外部模块交流数据胜过内部数据。</li><li><strong>数据泥团-相同的参数在多个函数间传递。</strong></li><li>基本类型偏执</li><li>重复的switch</li><li>循环语句</li><li>冗赘的元素</li><li>夸夸其谈通用性</li><li>临时字段</li><li>过长的消息链</li><li>中间人</li><li>内幕交易</li><li><strong>过大的类</strong></li><li>异曲同工的类</li><li>纯数据类</li><li>被拒绝的遗赠-继承父类无用的属性或方法</li><li><strong>注释-当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。</strong></li></ul><p><strong>规范：</strong></p><ul><li>全局变量数量：20 ±</li><li>方法方法行数：15 ±</li><li>代码行数：300-500</li><li>内部方法、内联方法：下划线开头</li></ul><p><strong>技巧：</strong></p><ul><li>使用class语法：将紧密关联的方法和变量封装在一起。</li><li>使用Eventemitter 工具库：实现简单发布订阅。</li><li>使用vue  provide语法：传递实例。</li><li>使用koroFileHeader插件： 统一注释规范。</li><li>使用Git-commit-plugin插件： 统一commit规范。</li><li>使用eslint + stylelint（未使用变量、误改变量名、debugger，自动优化的css）。</li></ul><p>示例代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * @name: 轻量级message提示插件 * @Description: 模仿iview的$message方法，api与样式保持一致。 */</span><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls <span class="token operator">=</span> <span class="token string">'i-message-'</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_default <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            top<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>            duration<span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_message</span><span class="token punctuation">(</span><span class="token string">'info'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">success</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_message</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">warning</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_message</span><span class="token punctuation">(</span><span class="token string">'warning'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_message</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">loading</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_message</span><span class="token punctuation">(</span><span class="token string">'loading'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">config</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_default<span class="token punctuation">.</span>top<span class="token punctuation">,</span> duration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_default<span class="token punctuation">.</span>duration <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_default <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            top<span class="token punctuation">,</span>            duration        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_setContentBoxTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> boxId <span class="token operator">=</span> <span class="token string">'messageBox'</span>        <span class="token keyword">const</span> contentBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> boxId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentBox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>contentBox<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_resetDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 渲染消息     * @param &#123;String&#125; type 类型     * @param &#123;Object | String&#125; options 详细格式     */</span>    <span class="token function">_message</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> options <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                content<span class="token operator">:</span> options            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>content<span class="token punctuation">,</span> options<span class="token punctuation">.</span>duration<span class="token punctuation">,</span> type<span class="token punctuation">,</span> options<span class="token punctuation">.</span>onClose<span class="token punctuation">,</span> options<span class="token punctuation">.</span>closable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 渲染消息     * @param &#123;String&#125; content 消息内容     * @param &#123;Number&#125; duration 持续时间     * @param &#123;String&#125; type 消息类型     */</span>    <span class="token function">_render</span><span class="token punctuation">(</span>content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> duration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_default<span class="token punctuation">.</span>duration<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">'info'</span><span class="token punctuation">,</span>        <span class="token function-variable function">onClose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> closable <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取节点信息</span>        <span class="token keyword">const</span> messageDOM <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getMsgHtml</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> content<span class="token punctuation">,</span> closable<span class="token punctuation">)</span>        <span class="token comment">// 插入父容器</span>        <span class="token keyword">const</span> contentBox <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getContentBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        contentBox<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>messageDOM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除方法</span>        <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_removeMsg</span><span class="token punctuation">(</span>contentBox<span class="token punctuation">,</span> messageDOM<span class="token punctuation">,</span> onClose<span class="token punctuation">)</span>        <span class="token keyword">let</span> removeTimer        <span class="token keyword">if</span><span class="token punctuation">(</span>duration <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            removeTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>remove<span class="token punctuation">,</span> duration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭按钮</span>        closable <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_addClosBtn</span><span class="token punctuation">(</span>messageDOM<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> removeTimer<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 删除消息     * @param &#123;Element&#125; contentBox 父节点     * @param &#123;Element&#125; messageDOM 消息节点     * @param &#123;Number&#125; duration 持续时间     */</span>    <span class="token function">_removeMsg</span><span class="token punctuation">(</span><span class="token parameter">contentBox<span class="token punctuation">,</span> messageDOM<span class="token punctuation">,</span> onClose</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        messageDOM<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">box animate__animated animate__fadeOutUp</span><span class="token template-punctuation string">`</span></span>        messageDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            contentBox<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>messageDOM<span class="token punctuation">)</span>            <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 获取图标     * @param &#123;String&#125; type     * @return &#123;String&#125; DOM HTML 字符串     */</span>    <span class="token function">_getIcon</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token string">'info'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            info<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg style="color:#2db7f5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">           &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />         &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            success<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg style="color:#19be6b"  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">           &lt;path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />         &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            warning<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg style="color:#ff9900" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">           &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />         &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            error<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg style="color:#ed4014" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">           &lt;path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />         &lt;/svg></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>            loading<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg style="color:#2db7f5" xmlns="http://www.w3.org/2000/svg" class="loading" viewBox="0 0 20 20" fill="currentColor">           &lt;path fill-rule="evenodd" d="M9.504 1.132a1 1 0 01.992 0l1.75 1a1 1 0 11-.992 1.736L10 3.152l-1.254.716a1 1 0 11-.992-1.736l1.75-1zM5.618 4.504a1 1 0 01-.372 1.364L5.016 6l.23.132a1 1 0 11-.992 1.736L4 7.723V8a1 1 0 01-2 0V6a.996.996 0 01.52-.878l1.734-.99a1 1 0 011.364.372zm8.764 0a1 1 0 011.364-.372l1.733.99A1.002 1.002 0 0118 6v2a1 1 0 11-2 0v-.277l-.254.145a1 1 0 11-.992-1.736l.23-.132-.23-.132a1 1 0 01-.372-1.364zm-7 4a1 1 0 011.364-.372L10 8.848l1.254-.716a1 1 0 11.992 1.736L11 10.58V12a1 1 0 11-2 0v-1.42l-1.246-.712a1 1 0 01-.372-1.364zM3 11a1 1 0 011 1v1.42l1.246.712a1 1 0 11-.992 1.736l-1.75-1A1 1 0 012 14v-2a1 1 0 011-1zm14 0a1 1 0 011 1v2a1 1 0 01-.504.868l-1.75 1a1 1 0 11-.992-1.736L16 13.42V12a1 1 0 011-1zm-9.618 5.504a1 1 0 011.364-.372l.254.145V16a1 1 0 112 0v.277l.254-.145a1 1 0 11.992 1.736l-1.735.992a.995.995 0 01-1.022 0l-1.735-.992a1 1 0 01-.372-1.364z" clip-rule="evenodd" />         &lt;/svg></span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> map<span class="token punctuation">[</span>type<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 获取消息节点     * @param &#123;String&#125; type 类型     * @param &#123;String&#125; content 消息内容     * @return &#123;Element&#125; 节点DOM对象     */</span>    <span class="token function">_getMsgHtml</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> messageDOM <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>        messageDOM<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">box animate__animated animate__fadeInDown</span><span class="token template-punctuation string">`</span></span>        messageDOM<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">36</span> <span class="token operator">+</span> <span class="token string">'px'</span>        messageDOM<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">message" >                    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getIcon</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">                    &lt;div class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">content-text"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/div>                &lt;/div>        </span><span class="token template-punctuation string">`</span></span>        <span class="token keyword">return</span> messageDOM    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 添加关闭按钮     * @param &#123;Element&#125; messageDOM 消息节点DOM     */</span>    <span class="token function">_addClosBtn</span><span class="token punctuation">(</span><span class="token parameter">messageDOM<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> removeTimer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> svgStr <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;svg class="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">btn" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">            &lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />        &lt;/svg></span><span class="token template-punctuation string">`</span></span>        <span class="token keyword">const</span> closBtn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseFromString</span><span class="token punctuation">(</span>svgStr<span class="token punctuation">,</span> <span class="token string">'text/html'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        closBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            removeTimer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>removeTimer<span class="token punctuation">)</span>            <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        messageDOM<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>_prefixCls<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">message</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>closBtn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 获取父节点容器     * @return &#123;Element&#125; 节点DOM对象     */</span>    <span class="token function">_getContentBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> boxId <span class="token operator">=</span> <span class="token string">'messageBox'</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> boxId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> boxId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> contentBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>            contentBox<span class="token punctuation">.</span>id <span class="token operator">=</span> boxId            contentBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_default<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>contentBox<span class="token punctuation">)</span>            <span class="token keyword">return</span> contentBox        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 重新设置父节点高度     */</span>    <span class="token function">_setContentBoxTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> boxId <span class="token operator">=</span> <span class="token string">'messageBox'</span>        <span class="token keyword">const</span> contentBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#'</span> <span class="token operator">+</span> boxId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentBox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            contentBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_default<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @description: 恢复默认值     */</span>    <span class="token function">_resetDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_default <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            top<span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>            duration<span class="token operator">:</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> module<span class="token punctuation">.</span>exports <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span>$message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f9c76b639ef46999ed7ac6553208dff~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="6-回顾"><a href="#6-回顾" class="headerlink" title="6. 回顾"></a>6. 回顾</h2><ul><li>定义</li><li>安装与使用（安装、调试、git拦截、测试报告）</li><li>常用API（jest、vue组件）</li><li>落地单元测试（拆分关键模块加单测）</li><li>演进：构建可测试单元模块（设计原则、重构）</li><li>可维护的单元模块（代码规范）</li></ul><p><strong>落地线路：</strong></p><p>① 安装使用 =&gt; ② API学习 =&gt; ③ 落地：拆分关键模块加单测 =&gt;  ④ 演进：架构设计与重构 =&gt;  ⑤ 代码规范 </p><p><strong>未来：</strong></p><p>⑥ 文档先行(待探索) </p><p>在较为复杂的业务系统开发过程中，从第一版代码到逐步划分模块、增加单测，还是走了一段弯路。<br>如果能够养成文档先行的习惯，先设计模块、测试用例，再编写代码，会更高效。</p><p><strong>理解：</strong></p><ul><li>单元测试有长期价值，也有执行成本。</li><li>好的架构设计是单测的土壤，<strong>为单一职责的模块设计单测、增加单元测试更加顺畅</strong>。</li><li>每个项目的业务形态与阶段不一样，不一定都适合，<strong>找到适合项目的平衡点</strong>。</li></ul><h2 id="7-讨论-amp-amp-Thank"><a href="#7-讨论-amp-amp-Thank" class="headerlink" title="7. 讨论 &amp;&amp; Thank"></a>7. 讨论 &amp;&amp; Thank</h2><p>感谢各位能够看到最后，前半部偏干，后半部分偏水，为内部分享笔记，部分代码和图片经过处理，重在分享和大家一起交流，恳请斧正，有收获还请点赞收藏。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直对单测很感兴趣，但对单测覆盖率、测试报告等关键词懵懵懂懂，最近几个月一直在摸索如何在Vue业务系统中落地单元测试，看到慢慢增长的覆盖率，慢慢清晰的模块，对单元测试的理解也比以前更加深入，也有一些心得和收获。&lt;/p&gt;
&lt;p&gt;今天把自己的笔记分享出来，和大家一起交流我在2个</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>七年切图仔如何面试大厂web前端？（沟通软技能总结）</title>
    <link href="https://nihaojob.github.io/2021/07/04/7years/"/>
    <id>https://nihaojob.github.io/2021/07/04/7years/</id>
    <published>2021-07-04T12:15:29.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近面了很多大厂的web前端岗位，都被刷了，在决定入职前，手里拿了几分待遇差不多的offer，后期的面试越来越顺，自己思考和总结了一下，原来面试也有好多技巧和方法可循，希望这些方法可以帮助到为找工作而且苦恼的你，可能每个人的方法不一样，不过至少可以提供一些参考。</p><p>先说明一下我的基本情况，93年生人，初中毕业后上了一家技校，网络工程专业，函授中央广播电视大学信息管理专科证书，11年毕业，工作7年了，前2年换了3家公司，基本上做都是偏设计的工作，也就是大家总说的低端美工（非美术工程师，会改图的切图仔），最近5年都在一家<strong>外包公司做前端</strong>，从单打独斗到建立团队再到爆发成长和稳定运行再到最近的衰落，5年时间里，自己有很多心得，离职前也写了自己的五年反思，不过本次的重点是自己如何在一家公司呆了5年以上还能凭借综合能力找到一份待遇还不错的工作。</p><h3 id="1、适应与了解：让自己适应外面的技术和文化"><a href="#1、适应与了解：让自己适应外面的技术和文化" class="headerlink" title="1、适应与了解：让自己适应外面的技术和文化"></a>1、适应与了解：让自己适应外面的技术和文化</h3><p>这里我们先要思考一个问题，在一个环境下呆5年，即便业务或者技术能力很强，也很难适合每一个公司的招聘岗位，另外，在一个环境下5年，你的思维模式基本固化到和你现在所处的公司文化同步。</p><p>综合以上两点，就会有一个客观存在的问题，技术与业务以及思维固化5年，如果想快速的找到心怡的工作其实很难，除非你能碰到和你现在所处公司的业务、技术、文化基本一致的公司，那么即便是这样，你估计也不会对这个职位感兴趣。</p><p>我的经验是这样（很伤心的向你讲述我的错误经历），我刚刚提完离职申请，就在boss和拉钩上更新简历，<strong>因为工作年限比较长，基本上都是高级工程师或偏架构和管理的岗位</strong>，而且由于<strong>工作年限很有优势</strong>，简历稍微漂亮一点，<strong>很容易能够拿到大厂的面试邀请</strong>，我拿到了京东、阿里、36氪、CSDN等比较大型的互联网公司的面试邀请。</p><p>我呢，在十几人的前端团队里任命为一个小leader，自以为技术还可以，自己懂一些前端的生态，做过几个小程序和基于vue或者其他框架的项目，就飘飘然的去面试了，结果就是面试官们一个个微笑着告诉你“静候佳音”。</p><p>所以，比较好的做法是在招聘网站上把大厂的公司设置不可见，先投递规模比较小的公司试试水，权衡一下自己的期望薪资和市场环境，了解一下技术现状和外面行业的各种动态，面试官们都比较关注的问题有哪些，根据这些，改进一下自己的自我介绍和简历。</p><p>技术上，除了js语言自己的特性问题，如原型链、作用域、继承等，基础的问题大部分都是数组的操作，排序怎么写，map和forEach的区别，object的属性和方法有哪些等等，vue被问的比较多，vue的响应原理，父子组件通信，vue-router的应用，vueX的核心api，还有就是部分关于小程序、ES6、webpack等问题，另外会问一些状态码、jsonp、同域跨域、动画性能、前端优化方面的问题，<strong>其实大部分问题百度一下都能找到答案，不会因为某一个知识点没有答出来就起了决定性作用</strong>，毕竟前端的范畴很大，比这些更重要的还有其他问题。</p><p>比如经常被问到，如果你与中级开发相比，工资要求比别人高，那么你的优势是什么？你比其他人更有价值的地方在哪里？这个也是自己要思考的问题，面试官有可能不会前端技术，但会通过沟通技巧把你的技术水平、工作能力等还原出来，是否能够直观的表达出自己的优势也关系到你能不能入职一份你向往的工作。</p><h3 id="2、包装：自己的价值"><a href="#2、包装：自己的价值" class="headerlink" title="2、包装：自己的价值"></a>2、包装：自己的价值</h3><p>我们之前的公司的大部分工作是页面制作，一小部分是做前端业务逻辑的开发，而且我一干就是五年，所谓的一个技能重复运用了5年，大家理所当人认为工作能力是没有提升的，肯定没有人要，我也在思考自己的价值是什么？</p><p><strong>设计排查</strong><br>我在之前的工作中，会涉及上下游工作，我们会做设计的排查，是不是少404、500等特殊页面，用户登录与未登录的状态是否完整，列表页面有没有loading效果，数据最多和最少的情况怎么展示，表单有没有多次提交的验证码，有没有校验和格式提示，这些都能有效的避免前端工作后期出现恶性迭代，提高前端效率。我是从UI转的前端开发，平常除了看一些前端技术外，也会看一些用户体验和设计规范方面的知识，所以在实际项目中，面对临时的需求任务，会结合技术、视觉、用户体验三方面的信息做出更好的决策。</p><p><strong>组件划分</strong><br>另一方面，组件划分也是一部分，一个项目划分多少页面，划分多少复用组件，如何更高效的组织它们，它们的api怎么定，场景是否都能满足，每个人写一套别人已经写好的东西，既浪费时间又不能提高，而且还不能集中精力去做一个精美的组件出来，后期使用和维护也有很大的问题，而这个正好是我目前的重点工作。</p><p><strong>前端技术</strong><br>当然了，打铁还需自身硬，技术就是要懒，就是要提效，就是要比别人快，持续的学习前端技术，懂得运用自动化工具解决开发痛点并提高效率，从grun到gulp再到现在的打包工具webpack，怎么找到目前工作和技术的契合点来提效；前端框架，有没有应用和对比？怎么根据团队的实际情况去选型和应用，解决工程上的问题，前后端分离的开发流程，怎么定义符合restful 的api接口。另外，小程序和H5的区别是什么？http协议怎么样？怎么用node去解决实际工作中的问题，比如联调转发、mock数据、接口校验等等，这些也是自己扎扎实实的底子，是自己吃饭的家伙。</p><p><strong>软技能</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/12/165cae131b731468?w=849&h=180&f=png&s=58309"></p><p>另外，从一个开发到管理，技能有所变化，也涉及到很多知识，怎么建立团队？自己怎么做奖惩制度，保证公平性，怎么建立良性的沟通？怎么激励成员？怎么调节矛盾？怎么上情下达？如何应对平行沟通与斜向沟通？也有很多技巧，自己一方面在自考项目管理的课程，另一方面，也看一些管理类的书籍，德鲁克、安迪格鲁夫等等，很助于管理工作的完成。</p><p>我在做自我介绍的时候经常被问到：日常的工作是什么？后期回答是：<strong>“前端的技术架构、难点攻坚和工作分配协调，保证前端开发任务的顺利进行”</strong>，这个才是你7年工作年限岗位的职责，当然还有比如团建、技术氛围、人员管理等辅助的技能，不是和初中级抢开发任务，也不是和各个负责人天天扯皮。</p><p>这个问题你即不能回答我是以技术为主，管理一窍不通，也不能回答我只是协调沟通，很少写代码，技术比较弱，我也是在被问及多次后，才想到的回答，<strong>有准备和无准备的回答相差甚远，至少我前两次临时想到的回答没有令面试官脸上泛起信任的微笑。</strong></p><h3 id="3、高效：面试中的沟通"><a href="#3、高效：面试中的沟通" class="headerlink" title="3、高效：面试中的沟通"></a>3、高效：面试中的沟通</h3><p>有时候很多HR小姐姐会在boss直聘上沟通两句就直接发面试邀请了，最好抓住这个时机多了解了解你要应聘的岗位和公司，<strong>最最重要的是问清楚岗位的薪资预算</strong>，防止出现这种情况：你面的很开心，面试官很满意，最后因为预算问题浪费大家的时间。我也有遇到过，最好提前委婉的问清楚，毕竟最关心这件事是你自己。</p><p>还有很多直接HR看一下简历就在招聘软件上给你发面试邀请了，其实大厂的公司都会先电话确认，然后再发面试邀请函，大家都重视自己的时间，也是对应聘者的尊重。</p><p>我之前也负责过前端人员的招聘，我的领导也传授给我很多经验，大部分有面试经验的面试官一般会让应聘者自我介绍一下，包括自己的学习历程，工作经历，主要技能等等，根据这些信息初步判断一下应聘者的技术水平，然后挑选一些细节的问题再追问一下真实性，如果感觉技术水平与公司的岗位相符，就问一些自己团队现在或者未来要用的技术，根据答题情况评估一下学习成本，然后再问问求职者自己的职业规划，讲讲这个岗位的职责和工作内容，看这个岗位是否与求职者的预期相符，辅助的会问一些日常的学习方式和爱好，综合的对应聘者进行考量，毕竟是双向选择，<strong>仅仅干巴巴的问几个技术问题来找到合适岗位的应聘者其实很难的</strong>。</p><p>当然，并不是每一个人都能遇到沟通技巧运用特别熟练的面试官，我也遇见过好几个拿着简历翻来覆去的看，最后憋出几个不知所云也不知怎么回答的发散性问题，我刚刚负责招聘工作的时候也经常出现这样的情况，大家尬聊十几分钟后不欢而散，应聘者觉得自己没有给表达的机会，面试官觉得自己没了解到应聘者。</p><p>我的经验是以下四点：</p><p><strong>第一，要做自我介绍</strong>，要讲一下自己的工作经历，介绍负责过的项目和主要职责，如果面试官对项目感兴趣再具体讲一下项目细节，为的是<strong>让面试官快速了解你的经历和水平</strong>，最好可以在简历上准备二维码，方便预览。</p><p><strong>第二，要表达自己的价值</strong>，告诉面试官<strong>你的优势和价值，比别人强的地方在哪里</strong>。</p><p><strong>第三，要表达自己的期望</strong>，比如我期望自己在未来五年内，沉下心来做事情，框架也好，项目也好，工具也好，这些想做的事会不会有助于岗位工作的提高，有没有大幅改进和提升，<strong>让面试官对你未来的期望值提高</strong>。</p><p><strong>第四，要问</strong>，你不能总是干巴巴的去输出，别人对你了解的很清楚，你却一点不了解对方，找工作就像交女朋友一样，要互相了解后再下决定，你要问问公司的核心业务是什么呀，是朝阳产业还是夕阳产业，这个岗位的主要工作是什么呀，有没有未来的晋升空间，公司有没有培养的计划呀，公司是技术为主还是业务为主还是销售为主呀，侧面或者正面的去了解这个公司，了解要加入的团队，去<strong>考量自己是否适合这个岗位</strong>。</p><p>四个点清楚以后，我们就知道自己是去干吗了，根据现场情况去反映，比如有的面试官对沟通比较生疏，上来问了几个技术问题，你可以委婉的说：“不好意思，我比较紧张，我能先自我介绍一下吗？”，另外，如果面试官尬聊，自己也可以趁着空档去问问岗位的工作内容和公司的主营业务，或者说说自己对工作的期望，当然，也许会遇到很多突发的情况，老生长谈，还是要控制情绪，因为自己的目的是高效的获得适合自己的岗位，其他都是次要的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上边写了这么多，最后归纳一个顺序出来吧。</p><ol><li>思考：自己的工作优势与价值</li><li>准备：自我介绍内容与简历</li><li>反馈：小公司面试，适应和了解文化、技术、行业</li><li>调整：调整自我介绍和沟通技巧</li><li>实战：应聘自己心仪的公司</li></ol><p>当然了，这只是自己的一些心得，不一定适合每一个人，只是自己记录一下自己是怎么走出来的，可以做一些参考，另外可以看看罗振宇的《知识就是力量之如何找到一份合适的工作》来扩宽一下思路，最后，祝各位找到自己心仪的工作。</p><h3 id="才疏学浅，恳请斧正"><a href="#才疏学浅，恳请斧正" class="headerlink" title="才疏学浅，恳请斧正"></a>才疏学浅，恳请斧正</h3><p>我在参加掘金秋招求职征文，你也来参加吧👉<a href="http://t.cn/Ehgg23C">掘金秋招征文活动链接</a></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/12/165cb8c551346e24?w=1226&h=240&f=png&s=37970"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近面了很多大厂的web前端岗位，都被刷了，在决定入职前，手里拿了几分待遇差不多的offer，后期的面试越来越顺，自己思考和总结了一下，原来</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>离职后才搞懂vue项目开发流程中的疑惑点</title>
    <link href="https://nihaojob.github.io/2021/07/04/vue-dev/"/>
    <id>https://nihaojob.github.io/2021/07/04/vue-dev/</id>
    <published>2021-07-04T12:14:49.000Z</published>
    <updated>2022-07-28T02:23:30.472Z</updated>
    
    <content type="html"><![CDATA[<p>在离职的最后一个月，帮两位同事申请加薪，确切的说，申请加薪是导火索，我被扣上了哄抬同事工资以提高自己工资的帽子，在推动前后端分离工作中处处碰壁，点燃了压抑许久的离职冲动，领导培养自己四五年，不让声张，答应悄悄离开。</p><p>离开时原来公司项目里剩下很多问题没有解决，现在自己还在做vue和动画的项目，现在或许之前的问题已经解决了，但我还是把思路写下来，也算对的起自己悄悄离职的事情了，看到你们获得优秀团队奖的照片了，很棒，祝福你们👍👏👏👏。</p><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>这边用的是gitLab做git服务器，可以配置commit的钩子函数，实现自动部署和线上发布，就相当服务器监听你的提交，在你commit之后，服务器自动执行了一下<code>npm run build</code>，放到对应的测试服务器目录，配置文件在根目录下有<code>.gitlab-ci.yml</code>文件，起作用的是下边一段代码，<code>script</code>是linux脚本，拷贝文件到指定的静态资源CDN目录和web服务器目录，这块知识点是<code>gitlab-ci 持续集成</code>，可以关注一下，svn应该也有类似的配置，让运维帮忙给配一下吧。</p><pre class="line-numbers language-none"><code class="language-none">npm-build-test:  image: cdn路径  stage: build  cache:    untracked: true    paths:      - node_modules&#x2F;  before_script:    - export BI_ENV&#x3D;&quot;test&quot;  script:    - &quot;npm install --registry&#x3D;http:&#x2F;&#x2F;代理地址 --sass_binary_site&#x3D;https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node-sass&#x2F;&quot;     - &quot;npm run build&quot;    - &quot;rsync -auvz dist&#x2F;index.html  ip::服务器开发分支目录&#x2F;trunk&#x2F;resources&#x2F;views&#x2F;index&#x2F;&quot;    - &quot;rsync -auvz dist&#x2F;* 静态资源cdn目录&#x2F;trunk&#x2F;bi&#x2F;&quot;  only:    - master  分支名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><p>以前咱们经常出现这种情况， v0.1的需求已经上线，v0.2的需求已经提测了，v0.3的需求在开发中，现在要修复一下v1.0的线上bug，用svn的话可能就是把修复后的文件更新到三个分支上继续开发，更新来更新去就<code>lock</code>了。</p><p>如果用git做版本管理，就方便很多，按照分支规范，常用4个分支，<br><code>Develop</code>持续开发分支，<code>Release</code>版本分支，<br><code>Hotfix</code>紧紧热修复分支，<code>Master</code>上线版本主分支，<br>可以看看<code>GitFlow工作流</code>方面的资料，真的比svn的分支好用太多了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687b99acf98287f?w=614&h=380&f=png&s=35398"></p><h3 id="脚手架升级与优化"><a href="#脚手架升级与优化" class="headerlink" title="脚手架升级与优化"></a>脚手架升级与优化</h3><p>我们目前在用webpack 4.0 和 vue-cli3.0，编译很快，建议升级，记得之前项目用vue-cli2.0编译和打包时间很长。</p><h3 id="Ajax全局设置"><a href="#Ajax全局设置" class="headerlink" title="Ajax全局设置"></a>Ajax全局设置</h3><p>原来项目里用的是<code>jQuery.ajax</code>方法，其实也可以全局设置拦截，我们用的是<code>axios</code>，在<code>main.js</code>中引用，设置<strong>根路径、状态码、token、超时时间</strong>等全局设置，代码如下:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 引入axiosimport axios from &#39;axios&#39;&#x2F;&#x2F; axios配置Vue.prototype.$http &#x3D; axios&#x2F;&#x2F; 配置默认axios参数axios.defaults.baseURL &#x3D; &#39;&#x2F;&#39;axios.defaults.timeout &#x3D; 1000000axios.defaults.headers.post[&#39;Content-Type&#39;] &#x3D; &#39;application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8&#39;&#x2F;&#x2F; 添加请求拦截器axios.interceptors.request.use(function (config) &#123;  let token &#x3D; localStorage.getItem(&#39;token&#39;)  if(token&#x3D;&#x3D; null &amp;&amp; router.currentRoute.path &#x3D;&#x3D; &#39;&#x2F;login&#39;)&#123;&#x2F;&#x2F; 本地无token,不为登录 跳转至登录页面    router.push(&#39;&#x2F;login&#39;)  &#125;else&#123;    if(config.data&#x3D;&#x3D;undefined)&#123;      config.data &#x3D; &#123;        &quot;token&quot;:token      &#125;    &#125;else&#123;      Object.assign(config.data,&#123;&quot;token&quot;:token&#125;)    &#125;  &#125;  return config&#125;, function (error) &#123;  iView.Message.error(&#39;请求失败&#39;)  return Promise.reject(error)&#125;)&#x2F;&#x2F; 返回结果拦截axios.interceptors.response.use(function (response) &#123;  if(response.hasOwnProperty(&quot;data&quot;) &amp;&amp; typeof response.data &#x3D;&#x3D; &quot;object&quot;)&#123;      if(response.data.code &#x3D;&#x3D;&#x3D; 998)&#123;&#x2F;&#x2F; 登录超时 跳转至登录页面          iView.Message.error(response.data.msg)          router.push(&#39;&#x2F;login&#39;)          return Promise.reject(response)      &#125;else if (response.data.code &#x3D;&#x3D;&#x3D; 1000) &#123;&#x2F;&#x2F; 成功        return Promise.resolve(response)      &#125;  &#125; else &#123;    return Promise.resolve(response)  &#125;&#125;, function (error) &#123;  &#x2F;&#x2F; 请求取消 不弹出  if(error.message !&#x3D; &#39;0000&#39;)&#123;    iView.Message.error(&#39;请求失败&#39;)  &#125;  &#x2F;&#x2F; 请求错误时做些事  return Promise.reject(error)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步操作与数据遍历"><a href="#异步操作与数据遍历" class="headerlink" title="异步操作与数据遍历"></a>异步操作与数据遍历</h3><p>原来的项目是保险项目，大家没有前后端分离的业务系统经验，都是<strong>最基础的接口</strong>，一个一个接口都是从数据字典中取出，业务逻辑往前端移，<strong>导致前端有很多的串行、并行的异步操作</strong>，请求各种接口，然后遍历合并各种数据，串行并行我们用<code>promise</code>写，异步操作的问题就解决了，数据的操作我们用<code>lodash.js</code>，效率比手写快，这两块可以加深一下。</p><pre class="line-numbers language-none"><code class="language-none">initializationTab(obj)&#123;    let This &#x3D; this    return new Promise((resolve, reject) &#x3D;&gt; &#123;        This.$http            .post(&#39;&#x2F;api&#x2F;show&#x2F;ograde-header&#39;,obj)            .then(function(response) &#123;              return resolve(response.data.datas)            &#125;)            .catch(function(error) &#123;                &#x2F;&#x2F;数据丢失的状态                This.isContent&#x3D;false   &#x2F;&#x2F;是否展示加载后内容                This.isLoading&#x3D;false   &#x2F;&#x2F;是否展示loading                This.isContentError&#x3D;true                 This.isReady &#x3D; false &#x2F;&#x2F;是否展示数据准备中状态                reject(error)            &#125;);    &#125;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>原来项目登录是跳转到jsp登录页面，然后再跳回静态页面，<code>sessionID</code>就存到<code>cookie</code>里了，建立会话，<strong>也可以<code>Form</code>提交做登录，</strong> 正常走接口，也会在<code>cookie</code>里存上<code>sessionID</code>建立会话。</p><p>当然前后端分离最好用<code>JWT</code>方案，把生成的<code>token</code>放在<code>redis</code>里，建立<code>事务</code>,<code>token</code>过期后自动删除，<strong>如有提前退出，则给改<code>token</code>打上标识，不通过该<code>token</code>通过即可</strong>，<strong>续签也好解决</strong>，在如果<code>token</code>在到期5分钟前访问，则生成新<code>token</code>返回给前端，给即将过期的<code>token</code>打上标识，到期后自动删除。</p><h3 id="H5动画"><a href="#H5动画" class="headerlink" title="H5动画"></a>H5动画</h3><p>我们H5动画做了很多尝试，民生银行的蓝精灵主题、租房分期、招聘3D、消消乐等，在适配、时间轴、精灵图、动画性能等方面有了一定积累，笔记夭折在我的MWeb编辑器里，如果后边有时间再更新出来吧。</p><p>之前蓝精灵动画需求用的<code>TweenMax.js</code>和<code>gka</code>生成的css帧动画做了那么复杂的一个效果，性能不是特别好，毕竟操作的是DOM，如果动画需求还多，就多熟悉熟悉<code>PIXI.js+TweenMax.js</code>两个工具吧，我刚用它们做了一个需求，<code>PIXI.js</code>有加载器、精灵图、滤镜、物理引擎、音视频等好多辅助工具，基本可以实现大部分我们在朋友圈看到的H5效果，<code>PIXI.js</code>支持<code>canvas</code>和<code>webGL</code>两种渲染。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687bd5f866be363?w=483&h=269&f=gif&s=2014168"></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687be36bb53bac3?w=493&h=263&f=gif&s=4394991"></p><h3 id="通读API"><a href="#通读API" class="headerlink" title="通读API"></a>通读API</h3><p>最新的项目是自己搭建的vue架子，功能和场景也慢慢复杂起来，还是要多看api和文档，多了解原理，才能游刃有余的使用这些工具，高效的完成开发任务，比如vue的组件递归、缓存、强制刷新、混入、过滤器，Axios的默认配置、CancelToken等等，最近的项目笔记总结还没有写完，先把目录贴出来，期望进步吧。</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/24/1687bf0c6a18e16a?w=992&h=1024&f=png&s=225533"></p><p>如果你们还在从事前端，相忘于江湖吧🤣😂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在离职的最后一个月，帮两位同事申请加薪，确切的说，申请加薪是导火索，我被扣上了哄抬同事工资以提高自己工资的帽子，在推动前后端分离工作中处处碰壁，点燃了压抑许久的离职冲动，领导培养自己四五年，不让声张，答应悄悄离开。&lt;/p&gt;
&lt;p&gt;离开时原来公司项目里剩下很多问题没有解决，现</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue + iview 项目实践总结</title>
    <link href="https://nihaojob.github.io/2021/07/04/vue-iview/"/>
    <id>https://nihaojob.github.io/2021/07/04/vue-iview/</id>
    <published>2021-07-04T12:13:27.000Z</published>
    <updated>2022-07-28T02:23:30.472Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直想把一大篇的总结写完、写好，感觉自己拖延太严重还总想写完美，然后好多笔记都死在编辑器里了，以后还按照一个小节一个小节的更新吧，小步快跑😂，先发出来，以后再迭代吧。</p></blockquote><p>最近我们参与开发了一个（年前了）BI项目，前端使用vue全家桶，项目功能基本开发完成，剩下的修修补补，开发过程还算顺畅，期间遇到好多问题，也记录了一下，发出来一起交流，主要是思路，怎么利用vue给的API实现功能，避免大家在同样的坑里待太长时间，如果有更好实现思路可以一起交流讨论😎🤗。</p><p>前后端分离形式开发，<code>vue+vueRouter+vueX+iviewUI+elementUI</code>，大部分功能我们都用的iviewUI，有部分组件我们用了elementUI，比如表格、日历插件，我们没接mock工具，接口用文档的形式交流，团队氛围比较和谐，三个PHP三个前端，效率还可以，两个前端伙伴比较厉害，第一次使用vue，就承担了90%的开发工作任务，我没到上线就跑回家休陪产假了，特别感谢同事们的支持，我才能回家看娃。</p><p>前端其实不太复杂，但是只要用vue开发基本上都会遇到的几个问题，比如菜单组件多级嵌套、刷新后选中当前项、</p><p>涉及几个点，表格表头表体合并、文件上传、富文本编辑器、权限树等等。</p><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>系统的主要功能就是面向各个部门查看报表数据，后端同学们很厉害，能汇总到一个集团的所有数据，各种炫酷大数据技术；</p><p><strong>菜单功能：</strong></p><ul><li><strong>数据看板：</strong> 筛选、展示日期和表格分页</li><li><strong>业务报表：</strong> 报表类型，日期筛选、表格分页</li><li><strong>数据检索：</strong> 筛选项联动、表格分页</li><li><strong>损耗地图：</strong> 筛选项、关系图插件</li><li><strong>展开分析：</strong> 筛选项、分类、卡片、表格</li><li><strong>系统信息：</strong> 版本发布、步骤条、富文本编辑</li><li><strong>数据源上传：</strong> 手动上传、表格展示</li><li><strong>权限管理：</strong> 用户管理、角色管理（权限菜单配置）</li></ul><p><strong>项目预览图：</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b9e86c0f2431?w=1008&h=503&f=gif&s=271766"></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695ba7011ff8f6a?w=951&h=445&f=gif&s=243118"></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695ba693b32253a?w=880&h=425&f=gif&s=61438"></p><p>对勾为已更新。</p><ul><li><input checked="" disabled="" type="checkbox"> <ol><li>使用v-if解决异步传参</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="2"><li>使用$refs调用子组件方法</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="3"><li>组件递归实现多级菜单</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="4"><li>使用watch监听路由参数重新获取数据</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="5"><li>页面刷新后Menu根据地址选中当前菜单项</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="6"><li>使用Axios统一状态码判断、统一增加token字段</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="7"><li>点击左侧菜单选中项点击刷新页面</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="8"><li>使用Axios.CancelToken切换路由取消请求</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="9"><li>使用element的table组件实现 表头表体合并</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="10"><li>iview的Menu组件+vuex实现面包屑导航</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="11"><li>iview上传组件手动上传与富文本编辑器接入</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="12"><li>使用cheerio获取表格数据</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="13"><li>keep-live组件缓存</li></ol></li><li><input checked="" disabled="" type="checkbox"> <ol start="14"><li>让数据保持单向流动（不要在子组件中操作父组件的数据）</li></ol></li></ul><h3 id="1-使用v-if解决异步传参组件重绘"><a href="#1-使用v-if解决异步传参组件重绘" class="headerlink" title="1. 使用v-if解决异步传参组件重绘"></a>1. 使用v-if解决异步传参组件重绘</h3><p>大部分的交互的流程都是 “ajax请求数据=&gt;传入组件渲染”，很多属性需要异步传入子组件然后进行相关的计算，如果绑定很多computed或者watch，性能开销会很大，而且有些场景并不需要使用computed和watch，我们只需要在最初创建的时候获取一次就够了。</p><p>如下gif例子,点击上方TAB后重新刷新折线组件：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b5069d34e6ff?w=1086&h=549&f=gif&s=74828"></p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--模板--&gt;&lt;mapBox v-if&#x3D;&quot;mapData&quot; :data&#x3D;&quot;mapData&quot;&gt;&lt;&#x2F;mapBox&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;!--点击搜索后执行--&gt;let This &#x3D; this&#x2F;&#x2F; setp1 重点this.mapData &#x3D; falsethis.$http.post(&#39;&#x2F;api&#x2F;show&#x2F;mapcondition&#39;,&#123;key:key,type:type&#125;).then(function(response)&#123;&#x2F;&#x2F; setp2 重点    this.mapData &#x3D; response.data&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候会出现DOM元素与数据不同步，可以使用使用其他方式让DOM强刷</p><pre class="line-numbers language-none"><code class="language-none">- setTimeou- $forceUpdate()- $nextTick()- $set()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-refs调用子组件方法"><a href="#2-使用-refs调用子组件方法" class="headerlink" title="2. 使用$refs调用子组件方法"></a>2. 使用$refs调用子组件方法</h3><p>有时候会涉及到父组件调用子组件方法的情况，例如，iview的Tree组件暴露出来的<code>getCheckedAndIndeterminateNodes</code>方法，详见官网文档<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E8%AE%BF%E9%97%AE%E5%AD%90%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E6%88%96%E5%AD%90%E5%85%83%E7%B4%A0">link</a>。</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!--模板--&gt;&lt;Tree v-if&#x3D;&quot;menu&quot; :data&#x3D;&quot;menu&quot; show-checkbox multiple ref&#x3D;&quot;Tree&quot;&gt;&lt;&#x2F;Tree&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let rules &#x3D; this.$refs.Tree.getCheckedAndIndeterminateNodes();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-组件递归实现多级菜单"><a href="#3-组件递归实现多级菜单" class="headerlink" title="3. 组件递归实现多级菜单"></a>3. 组件递归实现多级菜单</h3><p>递归组件用的很多，我们的左侧菜单还有无限拆分的表格合并，都用到了递归组件，详见官网链接<a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6">link</a>。</p><p>效果图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b53d364ac870?w=207&h=534&f=gif&s=142519"></p><p>大致思路就是先创建一个子组件，然后再创建一个父组件，循环引用，拿左侧菜单说明，代码如下，数据结构也在父组件中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--index.vue  父组件 数据接口在default中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Menu</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>        <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dark<span class="token punctuation">"</span></span>        <span class="token attr-name">:active-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeName<span class="token punctuation">"</span></span>        <span class="token attr-name">:open-names</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openNames<span class="token punctuation">"</span></span>        <span class="token attr-name">@on-select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSelect<span class="token punctuation">"</span></span>        <span class="token attr-name">:accordion</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>side-menu-item</span>            <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.children&amp;&amp;item.children.length!==0<span class="token punctuation">"</span></span>            <span class="token attr-name">:parent-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>            <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span>            <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>side-menu-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">v-else</span>            <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span>            <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.path<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.icon<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Menu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> sideMenuItem <span class="token keyword">from</span> <span class="token string">'@/components/Menu/side-menu-item.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'sideMenu'</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        activeName<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'auth'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        openNames<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> Array<span class="token punctuation">,</span>            <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>                <span class="token string">'other'</span><span class="token punctuation">,</span>                <span class="token string">'role'</span><span class="token punctuation">,</span>                <span class="token string">'auth'</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        items<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> Array<span class="token punctuation">,</span>            <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    name <span class="token operator">:</span> <span class="token string">'system'</span><span class="token punctuation">,</span>                    title <span class="token operator">:</span> <span class="token string">'数据看板'</span><span class="token punctuation">,</span>                    icon <span class="token operator">:</span> <span class="token string">'ios-analytics'</span><span class="token punctuation">,</span>                    children<span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> title <span class="token operator">:</span> <span class="token string">'用户管理'</span><span class="token punctuation">,</span> icon <span class="token operator">:</span> <span class="token string">'outlet'</span><span class="token punctuation">,</span>                          children <span class="token operator">:</span> <span class="token punctuation">[</span>                                <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'auth'</span><span class="token punctuation">,</span> title <span class="token operator">:</span> <span class="token string">'权限管理1'</span><span class="token punctuation">,</span> icon <span class="token operator">:</span> <span class="token string">'outlet'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'auth'</span><span class="token punctuation">,</span> title <span class="token operator">:</span> <span class="token string">'权限管理'</span><span class="token punctuation">,</span> icon <span class="token operator">:</span> <span class="token string">'outlet'</span><span class="token punctuation">,</span>                                  children<span class="token operator">:</span><span class="token punctuation">[</span>                                    <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'334'</span><span class="token punctuation">,</span> title <span class="token operator">:</span> <span class="token string">'子菜单'</span><span class="token punctuation">,</span> icon <span class="token operator">:</span> <span class="token string">'outlet'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                                    <span class="token punctuation">&#123;</span> name <span class="token operator">:</span> <span class="token string">'453'</span><span class="token punctuation">,</span> title <span class="token operator">:</span> <span class="token string">'子菜单'</span><span class="token punctuation">,</span> icon <span class="token operator">:</span> <span class="token string">'outlet'</span> <span class="token punctuation">&#125;</span>                                  <span class="token punctuation">]</span>                                <span class="token punctuation">&#125;</span>                            <span class="token punctuation">]</span>                         <span class="token punctuation">&#125;</span>                    <span class="token punctuation">]</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span>                    name <span class="token operator">:</span> <span class="token string">'other'</span><span class="token punctuation">,</span>                    title<span class="token operator">:</span> <span class="token string">'其他管理'</span><span class="token punctuation">,</span>                    icon <span class="token operator">:</span> <span class="token string">'outlet'</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        sideMenuItem    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleSelect</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'on-select'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--side-menu-item.vue  子组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Submenu</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parentItem.icon<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; parentItem.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,i) in parentItem.children<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>side-menu-item</span>                <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.children&amp;&amp;item.children.length!==0<span class="token punctuation">"</span></span>                <span class="token attr-name">:parent-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span>                <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.path<span class="token punctuation">"</span></span>                <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span>-<span class="token punctuation">'</span>+i<span class="token punctuation">"</span></span>                <span class="token attr-name">:index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span>-<span class="token punctuation">'</span>+i<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>side-menu-item</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">v-else</span>                <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index+<span class="token punctuation">'</span>-<span class="token punctuation">'</span>+i<span class="token punctuation">"</span></span>  <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.path<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">:type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.icon<span class="token punctuation">"</span></span> <span class="token attr-name">:size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123; item.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Submenu</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'sideMenuItem'</span><span class="token punctuation">,</span>    props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        parentItem<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> Object<span class="token punctuation">,</span>              <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        index<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用watch监听路由参数重新获取数据"><a href="#4-使用watch监听路由参数重新获取数据" class="headerlink" title="4. 使用watch监听路由参数重新获取数据"></a>4. 使用watch监听路由参数重新获取数据</h3><p><strong>很多菜单项都只是入参不一样</strong>，是不会重新走业务逻辑的，我们就用watch监听$router，如果改变就重新请求新的数据。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    watch<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'$route'</span><span class="token operator">:</span><span class="token string">'isChange'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// Do something</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">isChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-刷新：根据地址选中当前菜单项"><a href="#5-刷新：根据地址选中当前菜单项" class="headerlink" title="5. 刷新：根据地址选中当前菜单项"></a>5. 刷新：根据地址选中当前菜单项</h3><p>页面刷新后左侧菜单的默认选中项就和页面对应不上了，我们用$router的beforeEnter方法做判断，根据地址获得路由的key（每一个路由都有一个key的参数），储存到localStorage中，然后菜单组件再从localStorage中取出key，再遍历匹配到当前选项目，比较冗余的是我们要在beforeEnter中获取一遍菜单数据，然后到菜单组件又获取一次数据，请求两次接口。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b57c9899d00e?w=782&h=802&f=png&s=513174"></p><pre class="line-numbers language-none"><code class="language-none">step1 router.js中设置beforeEnter方法，获得地址栏中的key 存储到localStoragestep2 菜单组件取出localStorage中key，递归匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-Axios统一状态码判断、统一增加token字段"><a href="#6-Axios统一状态码判断、统一增加token字段" class="headerlink" title="6. Axios统一状态码判断、统一增加token字段"></a>6. Axios统一状态码判断、统一增加token字段</h3><p>Axios的interceptors方法有request和response两个方法对请求的入参和返回结果做统一的处理。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>request 除登录请求外，其他均增加token字段 <span class="token operator">--</span><span class="token operator">></span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> token <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>token<span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>path <span class="token operator">==</span> <span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 本地无token,未登录 跳转至登录页面</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token operator">==</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      config<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"token"</span><span class="token operator">:</span>token      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"token"</span><span class="token operator">:</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  iView<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>response 返回状态统一处理 <span class="token operator">--</span><span class="token operator">></span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> response<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">998</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 登录超时 跳转至登录页面</span>          iView<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>          router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 成功</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">1060</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//数据定制中</span>         <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">// 失败</span>        iView<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  iView<span class="token punctuation">.</span>Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求失败'</span><span class="token punctuation">)</span>  <span class="token comment">// 请求错误时做些事</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-点击左侧菜单选中项点击刷新页面"><a href="#7-点击左侧菜单选中项点击刷新页面" class="headerlink" title="7. 点击左侧菜单选中项点击刷新页面"></a>7. 点击左侧菜单选中项点击刷新页面</h3><p>测试同学提出bug，左侧菜单选中后，再次点击选中项没有刷新，用户体验不好，产品同学一致通过，我们就用野路子来解决了。<br>给菜单组件设置on-select事件，点击后存储当前选中项的path，每次执行当前点击的path和存储的path做对比，如果一致，跳转到空白页，空白页再返回到当前页，实现假刷新，注：不知道是router.push有节流控制还是怎么回事，不加setTimeout不管用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>菜单的handleSelect事件<span class="token operator">--</span><span class="token operator">></span><span class="token function">handleSelect</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> This <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectIndex <span class="token operator">==</span> <span class="token string">'reset'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 点击再次刷新</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">function_name</span><span class="token punctuation">(</span><span class="token parameter">argument</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          This<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>              path<span class="token operator">:</span> <span class="token string">'/Main/about'</span><span class="token punctuation">,</span>              query<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                t<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectIndex <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'on-select'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>空白页<span class="token operator">--</span><span class="token operator">></span><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> This <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">function_name</span><span class="token punctuation">(</span><span class="token parameter">argument</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      This<span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-使用Axios-CancelToken切换路由取消请求"><a href="#8-使用Axios-CancelToken切换路由取消请求" class="headerlink" title="8. 使用Axios.CancelToken切换路由取消请求"></a>8. 使用Axios.CancelToken切换路由取消请求</h3><p>有一部分情况是切换路由时，只改变参数，在“4. 使用watch监听路由参数重新获取数据”中提到过，还有一部分功能的接口数据返回的特别慢，会出现切换菜单后，数据才加载出来，需要增加切换菜单后取消原来的请求，代码注释中 setp1、2、3为顺序</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// setp1 创建data公共的source变量 </span>      source<span class="token operator">:</span><span class="token string">''</span>                    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 获取搜索数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  watch<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token string">'$route'</span><span class="token operator">:</span><span class="token string">'watchGetSearchData'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// setp2 请求时创建source实例 </span>      <span class="token keyword">let</span> CancelToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span>CancelToken      <span class="token keyword">this</span><span class="token punctuation">.</span>source <span class="token operator">=</span> CancelToken<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">watchGetSearchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// setp3 切换路由时取消source实例 </span>      <span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'0000'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$http        <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/show/map'</span><span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token punctuation">&#123;</span>cancelToken<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span>token<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-element的table组件实现-表头表体合并"><a href="#9-element的table组件实现-表头表体合并" class="headerlink" title="9. element的table组件实现 表头表体合并"></a>9. element的table组件实现 表头表体合并</h3><p>我们项目用到的的组件表格有两种，一种用iview的table，带操作按钮的表格，支持表头跨行跨列，另一种element的table组件，纯数据展示，支持表头和标题的跨行跨列。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b61f1c01782a?w=992&h=346&f=png&s=72840"></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b6330fb064f0?w=913&h=484&f=gif&s=49381"></p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b63510cefa99?w=913&h=484&f=gif&s=260205"></p><p>element的table组件支持表头标题合并，我们定义数据结构包含三部分，表头、表体、表体合并项。<br>表头直接使用递归组件嵌套就可以了，表体数据直接扔给table组件，合并通过cellMerge方法遍历合并项数据遍历合并，代码如下。</p><p><strong>数据结构</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">data<span class="token operator">:</span><span class="token punctuation">&#123;</span>    historyColumns<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token comment">// 表头数据</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"column"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"指标"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"target"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"11/22"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"11/22"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"日环比"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"日环比"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"当周值"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"当周值"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"上周同期"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"上周同期"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"周环比"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"周环比"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"近7日累计"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"近7日累计"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"title"</span><span class="token operator">:</span> <span class="token string">"当月累计"</span><span class="token punctuation">,</span>            <span class="token string">"key"</span><span class="token operator">:</span> <span class="token string">"当月累计"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    histories<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token comment">// 表体数据</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"target"</span><span class="token operator">:</span> <span class="token string">"在售量"</span><span class="token punctuation">,</span>            <span class="token string">"11/22"</span><span class="token operator">:</span> <span class="token number">912</span><span class="token punctuation">,</span>            <span class="token string">"日环比"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span>            <span class="token string">"当周值"</span><span class="token operator">:</span> <span class="token number">912</span><span class="token punctuation">,</span>            <span class="token string">"上周同期"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"周环比"</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>            <span class="token string">"近7日累计"</span><span class="token operator">:</span> <span class="token number">912</span><span class="token punctuation">,</span>            <span class="token string">"当月累计"</span><span class="token operator">:</span> <span class="token number">912</span><span class="token punctuation">,</span>            <span class="token string">"column"</span><span class="token operator">:</span> <span class="token string">"基础指标"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"target"</span><span class="token operator">:</span> <span class="token string">"-在售外库车量"</span><span class="token punctuation">,</span>            <span class="token string">"11/22"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>            <span class="token string">"日环比"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span>            <span class="token string">"当周值"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>            <span class="token string">"上周同期"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"周环比"</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>            <span class="token string">"近7日累计"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>            <span class="token string">"当月累计"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>            <span class="token string">"column"</span><span class="token operator">:</span> <span class="token string">"基础指标"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    merge<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token comment">// 表体合并项</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"rowNum"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"colNum"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"ropSpan"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"copSpan"</span><span class="token operator">:</span> <span class="token number">4</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"rowNum"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">"colNum"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>            <span class="token string">"ropSpan"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token string">"copSpan"</span><span class="token operator">:</span> <span class="token number">27</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表体合并说明：</strong> 表格有cellMerge方法，每一td在渲染时都会执行这个方法，在cellMerge里遍历merge数据，根据cellMerge的入参行、列定位到td，如果是要合并的表格，则return出要合并的行数和列数，如果在合并的范围内，则要return [0,0]，隐藏当前td。</p><p>比如要把A、B、C、D，merge的数据rowNum为A的行、colNum为A的列、ropSpan为2、copSpan为2，在cellMerge方法中，如果坐标为A的单元格，return ropSpan和copSpan，<strong>如果坐标为B、C、D则要return [0,0]隐藏，否则会出现表格错乱</strong>。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/8/1695b6429ddbdb1b?w=1176&h=746&f=png&s=91959"><br><strong>merge方法代码：</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 表格合并主方法  row:行数组  column:列数据  rowIndex、columnIndex行列索引</span><span class="token function">cellMerge</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> rowIndex<span class="token punctuation">,</span> columnIndex <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> This <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>This<span class="token punctuation">.</span>configJson<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> This<span class="token punctuation">.</span>configJson<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> rowNum <span class="token operator">=</span> This<span class="token punctuation">.</span>configJson<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rowNum   <span class="token comment">// 行</span>      <span class="token keyword">let</span> colNum <span class="token operator">=</span> This<span class="token punctuation">.</span>configJson<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>colNum   <span class="token comment">// 列</span>      <span class="token keyword">let</span> ropSpan <span class="token operator">=</span> This<span class="token punctuation">.</span>configJson<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ropSpan <span class="token comment">// 跨列数</span>      <span class="token keyword">let</span> copSpan <span class="token operator">=</span> This<span class="token punctuation">.</span>configJson<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>copSpan <span class="token comment">// 跨行数</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>rowIndex <span class="token operator">==</span> rowNum <span class="token operator">&amp;&amp;</span> columnIndex <span class="token operator">==</span> colNum <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 当前表格index 合并项</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>copSpan<span class="token punctuation">,</span>ropSpan<span class="token punctuation">]</span>      <span class="token comment">// 隐藏范围内容的单元格</span>      <span class="token comment">// 行范围 rowNum &lt;= rowIndex &amp;&amp; rowIndex &lt; (rowNum+copSpan)</span>      <span class="token comment">// 列范围 colNum &lt;= columnIndex &amp;&amp; columnIndex &lt; (colNum+ropSpan)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> rowNum <span class="token operator">&lt;=</span> rowIndex <span class="token operator">&amp;&amp;</span> rowIndex <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rowNum<span class="token operator">+</span>copSpan<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> colNum <span class="token operator">&lt;=</span> columnIndex <span class="token operator">&amp;&amp;</span> columnIndex <span class="token operator">&lt;</span> <span class="token punctuation">(</span>colNum<span class="token operator">+</span>ropSpan<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表头合并说明：</strong>element和iview的表头合并数据格式可以一样，都是递归形式，区别是iview的table组件直接把数据扔给组件就可以了，而element需要自己封装一下表头。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 子组件&lt;template&gt;  &lt;el-table-column :prop&#x3D;&quot;thList.key&quot; :label&#x3D;&quot;thList.title&quot; align&#x3D;&quot;center&quot;&gt;    &lt;template v-for&#x3D;&quot;(item,i) in thList.children&quot; &gt;        &lt;tableItem  v-if&#x3D;&quot;item.children&amp;&amp;item.children.length!&#x3D;&#x3D;0&quot;        :thList&#x3D;&quot;item&quot; &#x2F;&gt;&lt;&#x2F;tableItem&gt;        &lt;el-table-column align&#x3D;&quot;center&quot; v-else              :prop&#x3D;&quot;item.key&quot;              :label&#x3D;&quot;item.title&quot;              :formatter&#x3D;&quot;toThousands&quot;            &gt;                    &lt;&#x2F;el-table-column&gt;      &lt;&#x2F;template&gt;  &lt;&#x2F;el-table-column&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;    name: &#39;tableItem&#39;,    props: &#123;        thList: &#123;            type: Object,              default: () &#x3D;&gt; &#123;&#125;        &#125;,    &#125;,&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装后的table组件：</strong></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&lt;template&gt;  &lt;div&gt;    &lt;el-table :data&#x3D;&quot;Tbody&quot; :stripe&#x3D;&quot;stripe&quot; :border&#x3D;&quot;true&quot; :span-method&#x3D;&quot;cellMerge&quot; align&#x3D;&quot;center&quot; :header-cell-style&#x3D;&quot;tableHeaderColor&quot;  height&#x3D;&quot;600&quot; &gt;      &lt;template v-for&#x3D;&quot;(item,i) in Thead&quot;&gt;          &lt;template v-if&#x3D;&quot;item.children&amp;&amp;item.children.length!&#x3D;&#x3D;0&quot; &gt;            &lt;tableItem :thList&#x3D;&quot;item&quot; &#x2F;&gt;          &lt;&#x2F;template&gt;          &lt;template v-else &gt;            &lt;el-table-column align&#x3D;&quot;center&quot;              :prop&#x3D;&quot;item.key&quot;              :label&#x3D;&quot;item.title&quot;              :formatter&#x3D;&quot;toThousands&quot;            &gt;            &lt;&#x2F;el-table-column&gt;          &lt;&#x2F;template&gt;        &lt;&#x2F;template&gt;      &lt;&#x2F;el-table&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import tableItem from &#39;@&#x2F;components&#x2F;table&#x2F;tableHeader&#x2F;table-Item.vue&#39;export default &#123;    name: &#39;table-header&#39;,    props: &#123;        Thead: &#123;            type: Array,            default: () &#x3D;&gt; &#123;&#125;        &#125;,        Tbody:&#123;          type: Array,          default: () &#x3D;&gt; &#123;&#125;        &#125;,        stripe:&#123;          type:Boolean,          default:false        &#125;,        cellMerge:Function,          default:()&#x3D;&gt;&#123;&#125;    &#125;,    created:function()&#123;    &#125;,    components:&#123;      tableItem    &#125;,    methods:&#123;      tableHeaderColor(&#123; row, column, rowIndex, columnIndex &#125;) &#123;        if (rowIndex &#x3D;&#x3D;&#x3D; 0) &#123;          return &#39;background-color: #f8f8f9;&#39;        &#125;      &#125;    &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他页面复用table</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--引入--></span>import TableList from '@/components/table/tableHeader/index.vue'<span class="token comment">&lt;!--调用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TableList</span> <span class="token attr-name">:Thead</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>historyColumns<span class="token punctuation">"</span></span> <span class="token attr-name">:Tbody</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>historyData<span class="token punctuation">"</span></span> <span class="token attr-name">:cellMerge</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cellMerge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-iview的Menu组件-vuex实现面包屑导航"><a href="#10-iview的Menu组件-vuex实现面包屑导航" class="headerlink" title="10. iview的Menu组件+vuex实现面包屑导航"></a>10. iview的Menu组件+vuex实现面包屑导航</h3><p>iview的Menu组件有on-select方法，可以获得当选选中项的name，我们的name按照数据索引来遍历的，比如三级菜单，选中后会返回<code>2-0-1</code>这样的字符串，表示树菜单第3个菜单下的第1个子菜单下的第2个菜单项，通过这个字符串再筛选出数组<code>[&#39;业务报表&#39;,&#39;B2C报表&#39;,&#39;成交明细&#39;]</code>对应菜单的title，然后发给vuex的Store.state，然后面包屑组件通过计算数据属性监听Store.state拿属性展示就可以了。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 根据字符串筛出title数组 发给$store <span class="token operator">--</span><span class="token operator">></span><span class="token function">toBreadcrumb</span><span class="token punctuation">(</span><span class="token parameter">arrIndex</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> This <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> mapIndex <span class="token operator">=</span> arrIndex<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 获取对应name</span>      <span class="token keyword">let</span> box<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> mapText <span class="token operator">=</span> mapIndex<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            box <span class="token operator">=</span> This<span class="token punctuation">.</span>MenuData<span class="token punctuation">[</span><span class="token function">eval</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            box <span class="token operator">=</span> box<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token function">eval</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">return</span> box<span class="token punctuation">.</span>title<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'toBreadcrumb'</span><span class="token punctuation">,</span>mapText<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vueX代码</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;Vue.use(Vuex)export default new Vuex.Store(&#123;  state: &#123;    Breadcrumb:[],  &#x2F;&#x2F; 面包屑导航    userName: &#39;&#39;,    readyData:&quot;&quot;  &#125;,  mutations: &#123;    toBreadcrumb(state,arr)&#123;      state.Breadcrumb &#x3D; arr;    &#125;  &#125;,  getters: &#123;    getBreadcrumb: state &#x3D;&gt; &#123;      return state.Breadcrumb    &#125;  &#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面包屑组件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Row</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Col</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- &#123;&#123;doneTodosCount&#125;&#125; --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Breadcrumb</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BreadcrumbItem</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in doneTodosCount<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BreadcrumbItem</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Breadcrumb</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Col</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Col</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Login</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Col</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Row</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">'@/components/Login'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'toBreadcrumb'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'首页'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Breadcrumb    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  components<span class="token operator">:</span><span class="token punctuation">&#123;</span>    Login  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-iview上传组件手动上传-接入富文本编辑器"><a href="#11-iview上传组件手动上传-接入富文本编辑器" class="headerlink" title="11. iview上传组件手动上传,接入富文本编辑器"></a>11. iview上传组件手动上传,接入富文本编辑器</h3><p>iview提供的组件特别丰富，我们在做图片上传的时候，需要手动上传，需要调用子组件的file对象通过自己的post方法提交到服务端，actionDate为文件数据，然后再通过on-success回调反馈上传成功或失败。<br><strong>手动上传:</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Upload</span>     <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span>    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>actionDate<span class="token punctuation">"</span></span>    <span class="token attr-name">:on-success</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSuccess<span class="token punctuation">"</span></span>    <span class="token attr-name">:format</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[<span class="token punctuation">'</span>png<span class="token punctuation">'</span>,<span class="token punctuation">'</span>jpg<span class="token punctuation">'</span>]<span class="token punctuation">"</span></span>    <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/api/upload/ccupload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ios-cloud-upload-outline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Upload</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file !== null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    上传文件: &#123;&#123; file.name &#125;&#125;     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadingStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; loadingStatus ? 'Uploading' : '上传' &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// upload 方法</span><span class="token keyword">let</span> uploadFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>file<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>upload<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actionDate<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>upload<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>uploadFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadingStatus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// handleSuccess 方法</span><span class="token keyword">this</span><span class="token punctuation">.</span>loadingStatus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">==</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$Message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$Message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'上传失败'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在联调的过程中后端说接收不到文件，我们只能用node来验证一下是不是组件有问题，于是用express写了一下文件上传。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var express &#x3D; require(&#39;express&#39;);var router &#x3D; express.Router();let fs &#x3D; require(&#39;fs&#39;)var formidable &#x3D; require(&#39;formidable&#39;);&#x2F;&#x2F;表单控件var path &#x3D; require(&#39;path&#39;);var app &#x3D; express();app.use(express.static(&#39;&#x2F;public&#x2F;&#39;));router.post(&#39;&#x2F;test&#39;,(req,res)&#x3D;&gt;&#123;var imgPath &#x3D; path.dirname(__dirname) + &#39;&#x2F;public&#39;;var form &#x3D; new formidable.IncomingForm();form.encoding &#x3D; &#39;utf-8&#39;; &#x2F;&#x2F;设置编辑 form.uploadDir &#x3D; imgPath; &#x2F;&#x2F;设置上传目录form.keepExtensions &#x3D; true; &#x2F;&#x2F;保留后缀form.maxFieldsSize &#x3D; 2 * 1024 * 1024; &#x2F;&#x2F;文件大小form.type &#x3D; true;form.parse(req, function(err, fields, files)&#123;let src &#x3D; files.img.path.split(&#39;&#x2F;&#39;);let urlString &#x3D; src[src.length-1]  if (err) &#123;      console.log(err);      req.flash(&#39;error&#39;,&#39;图片上传失败&#39;);      return;  &#125;  res.json(&#123;      code: &#39;200&#39;,      type:&#39;single&#39;,      url:&#39;http:&#x2F;&#x2F;10.70.74.167:3000&#x2F;&#39;+urlString  &#125;)&#125;);&#125;);module.exports &#x3D; router;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在测试的时候增加了一个图片test的转发配置，然后把组件的action地址替换一下为<code>/test/</code>就可以了，亲测无问题[阴险脸]。<br><strong>vue.config.js</strong></p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">module.exports &#x3D; &#123;  baseUrl: baseUrl,  devServer: &#123;    proxy: &#123;        &#39;&#x2F;api&#39;: &#123; &#x2F;&#x2F; 开发服务器            target: &#39; http:&#x2F;&#x2F;*******&#39;,            changeOrigin: true,        &#125;,        &#39;&#x2F;test&#39;: &#123; &#x2F;&#x2F; 图片上传测试            target: &#39; http:&#x2F;&#x2F;10.70.74.167:3000&#39;,            changeOrigin: true,        &#125;    &#125;  &#125;,  productionSourceMap: false,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>富文本编辑器的图片上传有两种模式，一种是把图片转成base64，通过一个接口把html内容提交给服务端，另一种模式是两个接口，分别把图片上传到服务器，然后返回url字符串到编辑器中，再把编辑器中的html保存到服务器上，我们用的编辑器是<code>vue-quill-editor</code>，使用第二种模式，借助element的el-upload组件自动上传图片，然后返回地址插入到编辑器。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">import &#123;format&#125; from &#39;@&#x2F;lib&#x2F;js&#x2F;utils.js&#39;import &#123;quillEditor&#125; from &#39;vue-quill-editor&#39;const toolbarOptions &#x3D; [    [&#39;bold&#39;, &#39;italic&#39;, &#39;underline&#39;, &#39;strike&#39;],        &#x2F;&#x2F; toggled buttons    [&#123;&#39;header&#39;: 1&#125;, &#123;&#39;header&#39;: 2&#125;],               &#x2F;&#x2F; custom button values    [&#123;&#39;list&#39;: &#39;ordered&#39;&#125;, &#123;&#39;list&#39;: &#39;bullet&#39;&#125;],    [&#123;&#39;indent&#39;: &#39;-1&#39;&#125;, &#123;&#39;indent&#39;: &#39;+1&#39;&#125;],          &#x2F;&#x2F; outdent&#x2F;indent    [&#123;&#39;direction&#39;: &#39;rtl&#39;&#125;],                         &#x2F;&#x2F; text direction    [&#123;&#39;size&#39;: [&#39;small&#39;, false, &#39;large&#39;, &#39;huge&#39;]&#125;],  &#x2F;&#x2F; custom dropdown    [&#123;&#39;header&#39;: [1, 2, 3, 4, 5, 6, false]&#125;],    [&#123;&#39;color&#39;: []&#125;, &#123;&#39;background&#39;: []&#125;],          &#x2F;&#x2F; dropdown with defaults from theme    [&#123;&#39;font&#39;: []&#125;],    [&#123;&#39;align&#39;: []&#125;],    [&#39;link&#39;, &#39;image&#39;],    [&#39;clean&#39;]  ]    export default &#123;        data () &#123;            return &#123;            options2:&#123;&#125;,            quillUpdateImg: false, &#x2F;&#x2F; 根据图片上传状态来确定是否显示loading动画，刚开始是false,不显示            content:&#39;&#39;, &#x2F;&#x2F; 富文本内容            title:&#39;新建&#39;,                editorOption:&#123;            placeholder: &#39;&#39;,      theme: &#39;snow&#39;,  &#x2F;&#x2F; or &#39;bubble&#39;      modules:&#123;            toolbar: &#123;              container: toolbarOptions,              handlers: &#123;                &#39;image&#39;: function (value) &#123;                  if (value) &#123;                    &#x2F;&#x2F; 触发input框选择图片文件                    document.querySelector(&#39;.avatar-uploader input&#39;).click()                  &#125; else &#123;                    this.quill.format(&#39;image&#39;, false);                  &#125;                &#125;              &#125;            &#125;        &#125;                &#125;,        serverUrl: &#39;&#x2F;api&#x2F;add&#x2F;upload?key&#x3D;&#39;+this.$route.params.key,  &#x2F;&#x2F; 这里写你要上传的图片服务器地址        header: &#123;          &#x2F;&#x2F; token: sessionStorage.token        &#125;,                current: 0,                formValidate: &#123;                    device_name: &#39;集团BI&#39;,                    versions: &#39;&#39;,                    publish_time: &#39;&#39;,                    desc: &#39;&#39;,                &#125;,                ruleValidate: &#123;                    device_name: [                        &#123; required: true, message: &#39;请选择系统名称&#39;, trigger: &#39;change&#39; &#125;                    ],                    versions: [                        &#123; required: true, message: &#39;请输入版本信息&#39;, trigger: &#39;blur&#39; &#125;                    ],                    publish_time: [                        &#123; required: true, type: &#39;date&#39;, message: &#39;请选择发版时间&#39;, trigger: &#39;change&#39; &#125;                    ],                    desc: [                        &#123; required: true, message: &#39;请输入对于该版本的总体描述&#39;, trigger: &#39;blur&#39; &#125;,                        &#123; type: &#39;string&#39;, min: 20, message: &#39;版本的总体描述不少于20个字&#39;, trigger: &#39;blur&#39; &#125;                    ]                &#125;,                isFirst: true,                isSecond: false,                isThird: false,                versionid:&#39;&#39;            &#125;        &#125;,        created:function()&#123;        this.limit();        this.initialization();       &#125;,        methods: &#123;        limit()&#123;                this.options2 &#x3D;  &#123;                  disabledDate (date) &#123;                    return (date &amp;&amp; date.valueOf() &gt; new Date().getTime()) || (date &amp;&amp; date.valueOf() &lt; new Date(&quot;2017-12-31&quot;))                  &#125;                &#125;            &#125;,        &#x2F;&#x2F;初始判定是新增&#x2F;修改        initialization()&#123;        let id &#x3D; this.$route.params.id;        if(id !&#x3D;0)&#123;        this.title &#x3D; &quot;编辑&quot;;        let obj &#x3D; &#123;&#125;;        obj.version_id &#x3D; this.$route.params.id;        obj.key &#x3D; this.$route.params.key;        this.$http            .post(&#39;&#x2F;api&#x2F;show&#x2F;version&#39;,obj).then(response &#x3D;&gt; (               this.formValidate.device_name &#x3D; response.data.data.device_name,               this.formValidate.versions &#x3D; response.data.data.versions,               this.formValidate.publish_time &#x3D; response.data.data.publish_time,               this.formValidate.desc &#x3D; response.data.data.desc,               this.content &#x3D; response.data.data.pc_html        ))        &#125;else&#123;        this.title &#x3D; &quot;新建&quot;;        &#125;        &#125;,        &#x2F;&#x2F;第一步基本信息（发布）        firstSubmit(name)&#123;        this.$refs[name].validate((valid) &#x3D;&gt; &#123;                    if (valid) &#123;                        this.$Message.success(&#39;信息添加成功&#39;);                        this.current +&#x3D; 1;                        this.isFirst &#x3D; !this.isFirst;                        this.isSecond &#x3D; !this.isSecond;                    &#125;else&#123;                        this.$Message.error(&#39;请完善必填信息&#39;);                    &#125;                &#125;)        &#125;,        &#x2F;&#x2F;第二步的表单数据提交（发布）        save()&#123;        let id &#x3D; this.$route.params.id;        let addObj &#x3D; this.formValidate;        addObj.publish_time &#x3D; format(this.formValidate.publish_time);        addObj.pc_html &#x3D; this.content;        addObj.key &#x3D; this.$route.params.key;        if(this.$route.params.id !&#x3D; 0)&#123;        addObj.version_id &#x3D; id;        &#125;        this.$http            .post(&#39;&#x2F;api&#x2F;add&#x2F;version&#39;,addObj).then(response &#x3D;&gt; (               this.secondSubmit(response.data.version_id)        ))        &#125;,        &#x2F;&#x2F;第二步提交成功后转至第三步（发布）        secondSubmit(id)&#123;        this.current +&#x3D; 1;                this.isSecond &#x3D; false;                this.isThird &#x3D; !this.isThird;                this.versionid &#x3D; id;        &#125;,        &#x2F;&#x2F;第三步跳转至[预览]        preview()&#123;        this.$router.push(&#123; path:&quot;&#x2F;Main&#x2F;VersionManagementInfo&#x2F;system_versions&#x2F;&quot;+this.versionid&#125;);        &#125;,        &#x2F;&#x2F;第三步发布        release()&#123;        let status &#x3D; this.$route.params.status;        if(status !&#x3D; 2)&#123;        let obj &#x3D; &#123;&#125;;        if(this.$route.params.id &#x3D;&#x3D; 0)&#123;        obj.version_id &#x3D; this.versionid;        &#125;else&#123;        obj.version_id &#x3D; this.$route.params.id;        &#125;        obj.key &#x3D; this.$route.params.key;        this.$http            .post(&#39;&#x2F;api&#x2F;edit&#x2F;publish&#x2F;version&#39;,obj).then(response &#x3D;&gt; (               this.releaseLink()        ))        &#125;else&#123;        this.releaseLink()        &#125;        &#125;,        &#x2F;&#x2F;第三步发布跳转        releaseLink()&#123;        this.$router.push(&#123; path:&quot;&#x2F;Main&#x2F;VersionManagement&#x2F;system_versions&quot;&#125;);        &#125;,        &#x2F;&#x2F;上一步操作            returns () &#123;                if (this.current !&#x3D; 0) &#123;                    this.current -&#x3D; 1;                    this.isFirst &#x3D; true;                    this.isSecond &#x3D; false;                &#125;            &#125;,            &#x2F;&#x2F;富文本内容改变事件            onEditorChange(&#123;editor, html, text&#125;) &#123;        this.content &#x3D; html     &#125;,    &#x2F;&#x2F;富文本图片上传前    beforeUpload() &#123;        &#x2F;&#x2F; 显示loading动画        this.quillUpdateImg &#x3D; true    &#125;,    &#x2F;&#x2F;富文本图片上传成功    uploadSuccess(res, file) &#123;        &#x2F;&#x2F; res为图片服务器返回的数据        &#x2F;&#x2F; 获取富文本组件实例        console.log(res,file);        let quill &#x3D; this.$refs.myQuillEditor.quill        &#x2F;&#x2F; 如果上传成功        if (res.code &#x3D;&#x3D; 1000 ) &#123;          &#x2F;&#x2F; 获取光标所在位置          let length &#x3D; quill.getSelection().index;          &#x2F;&#x2F; 插入图片  res.url为服务器返回的图片地址          quill.insertEmbed(length, &#39;image&#39;, res.data)          &#x2F;&#x2F; 调整光标到最后          quill.setSelection(length + 1)        &#125; else &#123;          this.$message.error(&#39;图片插入失败&#39;)        &#125;        &#x2F;&#x2F; loading动画消失        this.quillUpdateImg &#x3D; false      &#125;,    &#x2F;&#x2F; 富文本图片上传失败    uploadError() &#123;        &#x2F;&#x2F; loading动画消失        this.quillUpdateImg &#x3D; false        this.$message.error(&#39;图片插入失败&#39;)    &#125;,         &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-使用cheerio展示字符串表格"><a href="#12-使用cheerio展示字符串表格" class="headerlink" title="12. 使用cheerio展示字符串表格"></a>12. 使用cheerio展示字符串表格</h3><p>有一部分表格数据比较难处理，是后端直接把xlsx文件转成字符串发给前端，cheerio可以把字符串转为类似jquery对象的虚拟DOM，然后用jquery的api操作这个虚拟DOM。</p><pre class="line-numbers language-none"><code class="language-none">import cheerio from &quot;cheerio&quot;this.$http.post(&#39;&#x2F;api&#x2F;list&#x2F;statement-table&#39;,p).then(function(response)&#123;               if(response.data&#x3D;&#x3D;&quot;&quot;)&#123;                  This.isShow&#x3D;false;This.content&#x3D;true;This.title&#x3D;false&#x2F;&#x2F;无数据时数据加载中和标题数据的盒子隐藏                  This.message&#x3D;&quot;&lt;div style&#x3D;&#39;text-align:center&#39;&gt;暂无数据&lt;&#x2F;div&gt;&quot;               &#125;else&#123;                    &#x2F;&#x2F;console.log(response)                    This.isShow&#x3D;false;                    This.content&#x3D;true;&#x2F;&#x2F;有数据时 数据加载中隐藏 标题和表体显示                    let $ &#x3D; cheerio.load(response.data);                    &#x2F;&#x2F;删除自带的行内样式                    $(&quot;body style&quot;).remove();                    $(&quot;body table&quot;).css(&#123;&quot;border&quot;:&quot;1px solid #e8eaec&quot; &#125;);                    $(&quot;body table td&quot;).css(&#123;&quot;border&quot;:&quot;1px solid #e8eaec&quot;,&quot;padding&quot;:&quot;10px&quot;,&quot;color&quot;:&quot;#515a6e&quot;&#125;);                    &#x2F;&#x2F;全文匹配 剔除&amp;quot;                    This.message &#x3D; $(&quot;body&quot;).html().replace(&#x2F;&amp;quot;&#x2F;g,&quot;&quot;);               &#125;           &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-keep-live组件缓存"><a href="#13-keep-live组件缓存" class="headerlink" title="13. keep-live组件缓存"></a>13. keep-live组件缓存</h3><p>产品的需求是从列表页面点击查看按钮进入详情页面，详情页面再点击返回，列表页面要不能刷新，就需要把组件缓存起来。</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/11/1696bbd3e9ddfa00?w=1006&h=503&f=gif&s=256501"><br>组件缓存直接加<code>keep-live</code>就可以了，比较麻烦的是我们在这个组件里判断三种情况，1.第一次进入 2.从其他栏目进入 3.从详情页进入，如果从为1、2这两种情况，我们需要刷新页面，如果是3，则不刷新。</p><p>思路是：<br><code>created</code>钩子中着增加<code>isFirstEnter</code>标识，<code>beforeRouteEnter</code>钩子中判断是否为详情页面返回，如果是则加上<code>meta.isBack</code>的标识，在<code>activated</code>钩子里判断是第几种情况，如果为1或2，则重新请求列表页数据，如果是3就不用动管了。</p><p><code>router.js</code>增加标识meta的<code>keepAlive</code>和<code>isBack</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/******** 业务报表 Start ********/</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/Main/BusinessReport/:key'</span><span class="token punctuation">,</span> <span class="token comment">// 业务报表-列表</span>    name<span class="token operator">:</span> <span class="token string">'BusinessReport'</span><span class="token punctuation">,</span>    meta<span class="token operator">:</span> <span class="token punctuation">&#123;</span> keepAlive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>isBack<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./pages/BusinessReport/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    path<span class="token operator">:</span> <span class="token string">'/Main/BusinessReportInfo/:sn/:is_check/:key/:type/:cmd5/:time/:is_down'</span><span class="token punctuation">,</span> <span class="token comment">// 业务报表-详情</span>    name<span class="token operator">:</span> <span class="token string">'BusinessReportInfo'</span><span class="token punctuation">,</span>    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./pages/BusinessReportInfo/index.vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/******** 业务报表 End ********/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据<code>mate.keepAlive</code>渲染不同的<code>router-view</code>（忘记为什么是这么写的了，感觉很low）。</p><pre class="line-numbers language-none"><code class="language-none">&lt;keep-alive&gt;    &lt;router-view v-if&#x3D;&quot;$route.meta.keepAlive&quot; &gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;&lt;router-view v-if&#x3D;&quot;!$route.meta.keepAlive&quot; &gt;    &lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件代码钩子事件<code>created</code>、<code>beforeRouteEnter</code>、<code>activated</code>方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>        isFirstEnter<span class="token operator">:</span><span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isFirstEnter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'BusinessReportInfo'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//判断是从哪个路由过来的，若是BusinessReportInfo页面不需要刷新获取新数据，直接用之前缓存的数据即可</span>      to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isBack <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isBack <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isFirstEnter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token string">""</span>        <span class="token comment">//如果isBack是false，表明需要获取新数据，否则就不再请求，直接使用缓存的数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ajax获取数据方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isBack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>isFirstEnter<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//恢复成默认的false，避免isBack一直是true，导致下次无法获取数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-不要在子组件中操作父组件的数据"><a href="#14-不要在子组件中操作父组件的数据" class="headerlink" title="14. 不要在子组件中操作父组件的数据"></a>14. 不要在子组件中操作父组件的数据</h3><p>确实可以在子组件中修改父组件的数据，但强烈建议不要在子组件中操作父组件数据，期间我接手过一个功能，梳理了半天逻辑，没找到触发点在哪里，原来是在子组件中操作了父组件的数据，不利于维护，我自己起了个名字，让数据保持单向流动，不知道是不是可以定义为单项数据了原则😂。</p><p>在开发的过程中我们发现，每个人写的业务组件代码风格都不一致，怎样是一致，关于业务组件，有没有好的规范或者原则呢？还希望大家给点资料和建议非常感谢。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一直想把一大篇的总结写完、写好，感觉自己拖延太严重还总想写完美，然后好多笔记都死在编辑器里了，以后还按照一个小节一个小节的更新吧，小步快跑😂，先发出来，以后再迭代吧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近我们参与开发了一个（年前了）BI</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React无门槛实现拖拽布局、表单设计器</title>
    <link href="https://nihaojob.github.io/2021/07/04/react-drag-layout/"/>
    <id>https://nihaojob.github.io/2021/07/04/react-drag-layout/</id>
    <published>2021-07-04T12:12:28.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>现在有很多优秀的拖拽布局工具，<a href="http://tools.xiaoyaoji.cn/form/#/">表单设计器</a>，<a href="http://lowcode.magicalcoder.com/layui">layui拖拽布局</a>, <a href="https://jaweii.github.io/Vue-Layout/dist/#/">Vue-Layout</a>。</p><p>我们最近也实现了类似的功能，废话不多说，先把预览贴出来（不知道为什么掘金现在图片不支持gif了，还要自己上传到图床）。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6cc8698acd56?w=1121&h=584&f=gif&s=397631"><br><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6cd0ee554ebd?w=1121&h=584&f=gif&s=351009"><br><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6cd95e45b824?w=1121&h=584&f=gif&s=217033"></p><p>在实现这个的功能的过程中，也走了一点弯路，我们内部1.0版本的时候，使用的是<code>sortablejs</code>，由于代码写的比较混乱，拖拽功能经常出现卡死的现象，以为是<code>sortablejs</code>的问题，然后又换成大名鼎鼎的<code>React Dnd</code>，和<code>Redux</code>是同一个作者，但是Dnd并不是太符合我们的需求，拖拽的API确实很强大，但是排序、跨级拖拽等好多功能都要自己手动实现，在实现完跨级拖拽以后，老大让我换成了<code>sortablejs</code>。</p><p>拖拽工具：<a href="http://sortablejs.github.io/Sortable/">sortablejs</a><br>，<a href="http://react-dnd.github.io/react-dnd/">React Dnd</a></p><p>我们还是先说下思路，还有我们在1.0里给自己挖的坑，你们也要小心哈😂。</p><p>如果有过树组件开发经验的小伙伴，应该对<strong>递归</strong>很熟悉了，左侧的页面结构要用到，右侧的渲染也要用到，整体来说，左侧的组件树和右侧的画布区，就是两个递归函数。</p><h3 id="页面即数组，组件即对象"><a href="#页面即数组，组件即对象" class="headerlink" title="页面即数组，组件即对象"></a>页面即数组，组件即对象</h3><p>我们要生成页面，肯定不是只看看页面长什么样子，好不好看，而是要把数据保存起来，生成我们想要的格式，首先就要面临的问题是，这个数据应该长什么样子，都有哪些字段，分别干什么用。</p><p>页面即数组很好理解，一个页面上可以有多个组件，而且有顺序，用数组就比较方便了，如果有子元素怎么办，不管vue还是react，UI框里都会有<code>Tree</code>组件，数据格式都是使用<code>children</code>向下嵌套数据组，这点好理解吧？</p><p>举个栗子，iview的tree组件<a href="https://www.iviewui.com/components/tree">文档</a><br><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6e99d8026311?w=2116&h=1566&f=png&s=195924"></p><p>子元素和我们有什么关系呢，我们看<a href="http://tools.xiaoyaoji.cn/form/#/">表单设计器</a>和<a href="http://lowcode.magicalcoder.com/layui">layui拖拽布局</a>里，都有<strong>容器组件</strong>，什么意思呢，就是可以在这个组件下继续拖拽放入组件，如果数据无限的向下延伸，那就需要<code>children</code>帮忙向下无限嵌套。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6f06476e553b?w=1332&h=1322&f=png&s=227412"></p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de6f163e826a9f?w=1726&h=1324&f=png&s=187847"></p><p>嵌套的问题解决了，组件怎么渲染呢，我们先不考虑拖拽的问题，单单一个数据对象渲染成组件，怎么实现呢？<br>先大致想一下，我们如果使用<code>Ant Design</code>的组件，我们得知道组件的名称吧？得有自己<code>props</code>吧？<br>暂定两个字段<code>name</code>和<code>attr</code>，包括上面提到的<code>children</code>字段，我们先简单的做个demo，用ant的模板。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Rate<span class="token punctuation">,</span>Input<span class="token punctuation">,</span>DatePicker <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> MonthPicker<span class="token punctuation">,</span> RangePicker<span class="token punctuation">,</span> WeekPicker <span class="token punctuation">&#125;</span> <span class="token operator">=</span> DatePicker<span class="token punctuation">;</span><span class="token keyword">const</span> GlobalComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Rate<span class="token punctuation">,</span>    Input<span class="token punctuation">,</span>    MonthPicker<span class="token punctuation">,</span>    RangePicker<span class="token punctuation">,</span>    WeekPicker<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EditPage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 测试数据</span>        <span class="token keyword">const</span> Data <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>                attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    size<span class="token operator">:</span><span class="token string">'large'</span><span class="token punctuation">,</span>                    value<span class="token operator">:</span><span class="token string">'第一个'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>                attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    size<span class="token operator">:</span><span class="token string">'default'</span><span class="token punctuation">,</span>                    value<span class="token operator">:</span><span class="token string">'第二个'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>                attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    size<span class="token operator">:</span><span class="token string">'small'</span><span class="token punctuation">,</span>                    value<span class="token operator">:</span><span class="token string">'第三个'</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'Containers'</span><span class="token punctuation">,</span>                attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    style<span class="token operator">:</span><span class="token punctuation">&#123;</span>                        border<span class="token operator">:</span><span class="token string">'1px solid red'</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                children<span class="token operator">:</span><span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>                        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            size<span class="token operator">:</span><span class="token string">'small'</span><span class="token punctuation">,</span>                            value<span class="token operator">:</span><span class="token string">'嵌套的input'</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'Rate'</span><span class="token punctuation">,</span>                        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            size<span class="token operator">:</span><span class="token string">'small'</span><span class="token punctuation">,</span>                            value<span class="token operator">:</span><span class="token string">'嵌套的input'</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'MonthPicker'</span><span class="token punctuation">,</span>                        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'RangePicker'</span><span class="token punctuation">,</span>                        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#123;</span>                        name<span class="token operator">:</span> <span class="token string">'WeekPicker'</span><span class="token punctuation">,</span>                        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 递归函数</span>        <span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>            arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div <span class="token punctuation">&#123;</span><span class="token operator">...</span>item<span class="token punctuation">.</span>attr<span class="token punctuation">&#125;</span> <span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> ComponentInfo <span class="token operator">=</span> GlobalComponent<span class="token punctuation">[</span>item<span class="token punctuation">.</span>name<span class="token punctuation">]</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>ComponentInfo <span class="token punctuation">&#123;</span><span class="token operator">...</span>item<span class="token punctuation">.</span>attr<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span><span class="token operator">></span>                <span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> EditPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>页面已经渲染出来了，怎么样 很简单吧？ 接下来 我们一起来实现拖拽吧</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de756a1de2405f?w=2610&h=850&f=png&s=75190"></p><h3 id="拖拽的实现"><a href="#拖拽的实现" class="headerlink" title="拖拽的实现"></a>拖拽的实现</h3><p>数据格式我们有了，渲染也实现了，剩下的就是拖拽了，我们先了解一下了<a href="http://sortablejs.github.io/Sortable/">sortablejs</a>这个插件，官方有提供<code>react</code>版的组件<code>react-sortablejs</code>。</p><p>安装依赖，在页面中引入组件，不多说，看<a href="https://github.com/SortableJS/react-sortablejs">react-sortablejs文档</a>。</p><p>接下来先说一下<code>sortablejs</code><strong>提供给我们什么功能</strong>。</p><ol><li>如果从容器A拖拽到容器B，两个容器<code>group</code>参数的<code>name</code>保持一致才能实现相互拖拽。</li><li>容器是否可移入和移出，是在<code>group</code>中配置<code>pull</code>和<code>put</code>属性。</li><li>容器有两个监听事件，一个是移入的<code>onAdd</code>方法，一个是更新的<code>onUpdate</code>方法</li><li><code>onAdd</code>和<code>onUpdate</code>只能监听到拖拽元素的<code>data-id</code>属性</li></ol><p>我们怎么借助这些功能实现？</p><ol><li>组件列表，就是左侧供我们拖拽的源组件列表，不能移出，并且<code>data-id</code>需要为组件名称，才能告知右侧的容器拖拽进入的是什么组件。</li><li>右侧容器需要嵌套，递归展示，有子元素时要展示容器而不是组件。</li><li>右侧的容器要可移入移出，方便跨容器拖拽。</li><li>为了把新增的组件数据放进右侧对应的位置，右侧容器的<code>data-id</code>修改为下标的路径<code>2-3-2</code>这样的形式，对应根数组的第2个元素的第3个子元素的第2个子元素。</li></ol><p>好了，现在先把供我们拖拽的源组件列表写出来</p><p>然后把右侧的容器改造一下，如果有子元素则展示一个新的容器，并且加上add的监听方法。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de8bd55d219032?w=1046&h=549&f=gif&s=755753"><br>需要注意的是，跨级拖拽的时候触发<code>onAdd</code>，需要判断一下进入的<code>data-id</code>到底是下标还是组件，如果为组件直接添加，如果为下标，则<strong>对比一下新增和删除的路径，先操作靠下方的路径，再操作靠上的路径</strong>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Rate<span class="token punctuation">,</span>Input<span class="token punctuation">,</span>DatePicker<span class="token punctuation">,</span>Tag <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Sortable <span class="token keyword">from</span> <span class="token string">'react-sortablejs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> uniqueId <span class="token keyword">from</span> <span class="token string">'lodash/uniqueId'</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> MonthPicker<span class="token punctuation">,</span> RangePicker<span class="token punctuation">,</span> WeekPicker <span class="token punctuation">&#125;</span> <span class="token operator">=</span> DatePicker<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> indexToArray<span class="token punctuation">,</span> getItem<span class="token punctuation">,</span> setInfo<span class="token punctuation">,</span> isPath<span class="token punctuation">,</span> getCloneItem<span class="token punctuation">,</span> itemRemove<span class="token punctuation">,</span> itemAdd <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils'</span><span class="token punctuation">;</span><span class="token keyword">import</span> find <span class="token keyword">from</span> <span class="token string">'find-process'</span><span class="token punctuation">;</span><span class="token keyword">const</span> GlobalComponent <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    Rate<span class="token punctuation">,</span>    Input<span class="token punctuation">,</span>    MonthPicker<span class="token punctuation">,</span>    RangePicker<span class="token punctuation">,</span>    WeekPicker<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> soundData <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'MonthPicker'</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'RangePicker'</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'WeekPicker'</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            size<span class="token operator">:</span><span class="token string">'large'</span><span class="token punctuation">,</span>            value<span class="token operator">:</span><span class="token string">'第一个'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>        name<span class="token operator">:</span> <span class="token string">'Containers'</span><span class="token punctuation">,</span>        attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            style<span class="token operator">:</span><span class="token punctuation">&#123;</span>                border<span class="token operator">:</span><span class="token string">'1px solid red'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">EditPage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            Data<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'Input'</span><span class="token punctuation">,</span>                attr<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    size<span class="token operator">:</span><span class="token string">'large'</span><span class="token punctuation">,</span>                    value<span class="token operator">:</span><span class="token string">'第一个'</span>                <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// 拖拽的添加方法</span>     <span class="token function-variable function">sortableAdd</span> <span class="token operator">=</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 组件名或路径</span>        <span class="token keyword">const</span> nameOrIndex <span class="token operator">=</span> evt<span class="token punctuation">.</span>clone<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 父节点路径</span>        <span class="token keyword">const</span> parentPath <span class="token operator">=</span> evt<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拖拽元素的目标路径</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> newIndex <span class="token punctuation">&#125;</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>        <span class="token comment">// 新路径 为根节点时直接使用index</span>        <span class="token keyword">const</span> newPath <span class="token operator">=</span> parentPath <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parentPath<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newIndex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> newIndex<span class="token punctuation">;</span>        <span class="token comment">// 判断是否为路径 路径执行移动，非路径为新增</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPath</span><span class="token punctuation">(</span>nameOrIndex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 旧的路径index</span>            <span class="token keyword">const</span> oldIndex <span class="token operator">=</span> nameOrIndex<span class="token punctuation">;</span>            <span class="token comment">// 克隆要移动的元素</span>            <span class="token keyword">const</span> dragItem <span class="token operator">=</span> <span class="token function">getCloneItem</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>            <span class="token comment">// 比较路径的上下位置 先执行靠下的数据 再执行考上数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">indexToArray</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">indexToArray</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 删除元素 获得新数据</span>                <span class="token keyword">let</span> newTreeData <span class="token operator">=</span> <span class="token function">itemRemove</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加拖拽元素</span>                newTreeData <span class="token operator">=</span> <span class="token function">itemAdd</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> newTreeData<span class="token punctuation">,</span> dragItem<span class="token punctuation">)</span>                <span class="token comment">// 更新视图</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Data<span class="token operator">:</span>newTreeData<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 添加拖拽元素</span>            <span class="token keyword">let</span> newData <span class="token operator">=</span> <span class="token function">itemAdd</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> dragItem<span class="token punctuation">)</span>            <span class="token comment">// 删除元素 获得新数据</span>            newData <span class="token operator">=</span> <span class="token function">itemRemove</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> newData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Data<span class="token operator">:</span>newData<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 新增流程 创建元素 => 插入元素 => 更新视图</span>        <span class="token keyword">const</span> id <span class="token operator">=</span> nameOrIndex                <span class="token keyword">const</span> newItem <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>soundData<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>name <span class="token operator">===</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 为容器或者弹框时增加子元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> newItem<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Containers'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> ComponentsInfo <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>GlobalComponent<span class="token punctuation">[</span>newItem<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment">// 判断是否包含默认数据</span>            newItem<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">let</span> Data <span class="token operator">=</span> <span class="token function">itemAdd</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> newItem<span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 递归函数</span>        <span class="token keyword">const</span> <span class="token function-variable function">loop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>            arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> indexs <span class="token operator">=</span> index <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div <span class="token punctuation">&#123;</span><span class="token operator">...</span>item<span class="token punctuation">.</span>attr<span class="token punctuation">&#125;</span>                         data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>indexs<span class="token punctuation">&#125;</span>                    <span class="token operator">></span>                        <span class="token operator">&lt;</span>Sortable                            key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">uniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                            style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>                                minHeight<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>                                margin<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                            ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sortable <span class="token operator">=</span> c<span class="token punctuation">.</span>sortable<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                            options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>                                <span class="token operator">...</span>sortableOption<span class="token punctuation">,</span>                                <span class="token comment">// onUpdate: evt => (this.sortableUpdate(evt)),</span>                                <span class="token function-variable function">onAdd</span><span class="token operator">:</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortableAdd</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                        <span class="token operator">></span>                            <span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>children<span class="token punctuation">,</span>indexs<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>Sortable<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> ComponentInfo <span class="token operator">=</span> GlobalComponent<span class="token punctuation">[</span>item<span class="token punctuation">.</span>name<span class="token punctuation">]</span>                <span class="token keyword">return</span> <span class="token operator">&lt;</span>div data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>indexs<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span>ComponentInfo <span class="token punctuation">&#123;</span><span class="token operator">...</span>item<span class="token punctuation">.</span>attr<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">const</span> sortableOption <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            animation<span class="token operator">:</span> <span class="token number">150</span><span class="token punctuation">,</span>            fallbackOnBody<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            swapThreshold<span class="token operator">:</span> <span class="token number">0.65</span><span class="token punctuation">,</span>            group<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                name<span class="token operator">:</span> <span class="token string">'formItem'</span><span class="token punctuation">,</span>                pull<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                put<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>h2<span class="token operator">></span>组件列表<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>Sortable                    options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>                            group<span class="token operator">:</span><span class="token punctuation">&#123;</span>                                name<span class="token operator">:</span> <span class="token string">'formItem'</span><span class="token punctuation">,</span>                                pull<span class="token operator">:</span> <span class="token string">'clone'</span><span class="token punctuation">,</span>                                put<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                            sort<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                <span class="token operator">></span>                    <span class="token punctuation">&#123;</span>                        soundData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                            <span class="token keyword">return</span> <span class="token operator">&lt;</span>div data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span>Tag<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Tag<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Sortable<span class="token operator">></span>                <span class="token operator">&lt;</span>h2<span class="token operator">></span>容器<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>                <span class="token operator">&lt;</span>Sortable                    ref<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sortable <span class="token operator">=</span> c<span class="token punctuation">.</span>sortable<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                    options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>                        <span class="token operator">...</span>sortableOption<span class="token punctuation">,</span>                        <span class="token comment">// onUpdate: evt => (this.sortableUpdate(evt)),</span>                        <span class="token function-variable function">onAdd</span><span class="token operator">:</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortableAdd</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>                    key<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">uniqueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                <span class="token operator">></span>                    <span class="token punctuation">&#123;</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Sortable<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> EditPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在跨级操作和新增已经完成了，接下来我们补充一下同级交换位置的功能，我们用了<code>immutability-helper</code>这个工具函数，具体的自己看文档吧，只是用到了数组换位。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> update <span class="token keyword">from</span> <span class="token string">'immutability-helper'</span><span class="token comment">// 拖拽的排序方法</span><span class="token function-variable function">sortableUpdate</span> <span class="token operator">=</span> <span class="token parameter">evt</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 交换数组</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> newIndex<span class="token punctuation">,</span> oldIndex <span class="token punctuation">&#125;</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>    <span class="token comment">// 父节点路径</span>    <span class="token keyword">const</span> parentPath <span class="token operator">=</span> evt<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 父元素 根节点时直接调用data</span>    <span class="token keyword">let</span> parent <span class="token operator">=</span> parentPath <span class="token operator">?</span> <span class="token function">getItem</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>    <span class="token comment">// 当前拖拽元素</span>    <span class="token keyword">const</span> dragItem <span class="token operator">=</span> parent<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 更新后的父节点</span>    parent <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        $splice<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>newIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dragItem<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 最新的数据 根节点时直接调用data</span>    <span class="token keyword">const</span> Data <span class="token operator">=</span> parentPath <span class="token operator">?</span> <span class="token function">setInfo</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Data<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token operator">:</span> parent    <span class="token comment">// 调用父组件更新方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Data<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在跨级和同级的排序的功能都已经完成了，我们看看预览图吧。</p><p><img src="https://user-gold-cdn.xitu.io/2019/10/20/16de8cab1fc829e4?w=1046&h=549&f=gif&s=805784"></p><p>在<code>onUpdate</code>和<code>onAdd</code>的函数中，自己封装了一些根据下标操作数组的方法，也是按照函数式的方式，每个函数返回新的结果，写的不是特别好，多多见谅哈，剩下的删除、选中啦，根据自己的需求增加功能就可以了，我把源码放在了github上，有需要的拿去吧，码字码到手酸，吃饭去了😂。</p><p><a href="https://nihaojob.github.io/DragLayout/">演示地址</a></p><p><a href="https://github.com/nihaojob/DragLayout">源码：https://github.com/nihaojob/DragLayout</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;现在有很多优秀的拖拽布局工具，&lt;a href=&quot;http://tools.xiaoyaoji.cn/form/#/&quot;&gt;表单设计器&lt;/a&gt;，&lt;a href=&quot;http://lowcode.magicalcoder.com/layui&quot;&gt;layui拖拽布局&lt;/a&gt;, &lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第三期 |《早早聊搞搭建》搞过搭建的我收获了什么？（下篇）</title>
    <link href="https://nihaojob.github.io/2021/07/04/zzl-2/"/>
    <id>https://nihaojob.github.io/2021/07/04/zzl-2/</id>
    <published>2021-07-04T12:10:32.000Z</published>
    <updated>2022-07-28T02:23:30.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇大致提及了本篇的主要内容，首先是把自己在搭建系统中见识的<strong>秒开、跨端、海量部署</strong>的学舌给大家（自己掌握的不牢靠，只能大概阐述），主题内容是自己在参加完大会后<strong>反刍对搭建工具的理解</strong>。</p><p><a href="https://juejin.im/post/6844904106767695880#heading-21">第三期 |《早早聊搞搭建》搞过搭建的我收获了什么？（上篇）</a></p><h2 id="第五场-《如何设计实现-toC-营销搭建系统-终端秒开》"><a href="#第五场-《如何设计实现-toC-营销搭建系统-终端秒开》" class="headerlink" title="第五场 《如何设计实现 toC 营销搭建系统 | 终端秒开》"></a>第五场 《如何设计实现 toC 营销搭建系统 | 终端秒开》</h2><p>这是供一个运营人员的快速搭建平台，提及了其他系统没有的功能：<strong>灰度</strong>，更重要的主题是<strong>秒开</strong>。<br>讲师重点介绍了，<strong>如何把不同page的相同module代码做到复用</strong>，页面在进入时，双链路并行提高加载速度。</p><ol><li>客户端预加载页面代码</li><li>请求用户数据</li></ol><p>这也依赖了客户端强大的缓存能力。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e5091c5c?w=3840&h=2160&f=jpeg&s=483844"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e5159aae?w=3840&h=2160&f=jpeg&s=529937"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e5166dba?w=3840&h=2160&f=jpeg&s=883914"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e55e34fa?w=3840&h=2160&f=jpeg&s=803329"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e57d4aee?w=3840&h=2160&f=jpeg&s=714138"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f316f2d54a?w=1840&h=186&f=jpeg&s=39934"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f3466bf162?w=3840&h=2160&f=jpeg&s=862084"></p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>说一个小插曲，主持人对步天说： <strong>咱们现在聊的他们听不到</strong>，而我则坐在屏幕前怀疑是不是自己的耳朵出问题了，哈哈哈。</p><p>后边的分享越来越干货，群里的同学也有反馈说听不太懂。<br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f43a76dfc56e?w=950&h=227&f=png&s=93114"></p><p>自己也是听个大概思路，随着时间的推移和经验的积累，没准哪天就能看得懂并用得上这些巧妙的设计了。<br><strong>如果整场分享都是你所了解的内容，不能否定它对你了解的内容有强化和加深，但并不能扩宽你的认知</strong>。</p><h2 id="第六场《如何设计实现跨端页面搭建系统-跨端模块》"><a href="#第六场《如何设计实现跨端页面搭建系统-跨端模块》" class="headerlink" title="第六场《如何设计实现跨端页面搭建系统 - 跨端模块》"></a>第六场《如何设计实现跨端页面搭建系统 - 跨端模块》</h2><p>本场和上一场的分享是相辅相成的，上一篇的主题在双链路加载和模块代码复用，这一场则介绍了更多实现细节。<br>再一次强调了是针对非技术人使用，页面数据为一维度结构，这意味着更简单便捷的操作，不必让非技术人员理解DOM树；</p><p>跨端的工作交给处理<a href="https://rax.js.org/">Rax</a>处理； 在用阿里开源SchemaForm工具<a href="https://github.com/alibaba/formily/blob/master/README.zh-cn.md">formily</a>，并提到一个值得注意的问题：<strong>scheam 只能定义第一次的格式，交互变化后则没办法定义</strong>；讲师还分享了组件管理、工程化方面的心得。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f363125d22?w=3840&h=2160&f=jpeg&s=452952"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f357579b5d?w=3840&h=2160&f=jpeg&s=872740"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f36d5bc76d?w=3840&h=2160&f=jpeg&s=928992"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f371e56fdf?w=3840&h=2160&f=jpeg&s=548113"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f375890dd5?w=3840&h=2160&f=jpeg&s=572848"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f375b3d361?w=3840&h=2160&f=jpeg&s=727255"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f385b5d544?w=3840&h=2160&f=jpeg&s=551571"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f39a6391a8?w=3840&h=2160&f=jpeg&s=614835"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f39e497423?w=3840&h=2160&f=jpeg&s=637838"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f3a70cf326?w=3840&h=2160&f=jpeg&s=538248"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f2e512965f?w=3840&h=2160&f=jpeg&s=463987"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f319e48f43?w=3840&h=2160&f=jpeg&s=487379"></p><h2 id="第七场-《如何设计-toB-商家搭建系统-海量部署》"><a href="#第七场-《如何设计-toB-商家搭建系统-海量部署》" class="headerlink" title="第七场 《如何设计 toB 商家搭建系统 | 海量部署》"></a>第七场 《如何设计 toB 商家搭建系统 | 海量部署》</h2><p>这是一个针对B端用户使用的营销平台，快速搭建营销页面，讲师分享了一些关于编辑器的设计，但基本上之前的讲师都讲过了，感觉最后讲好吃亏。不过从标题我们就能看出来，意不在此，拥有百万级的页面，<strong>更重要的是海量部署问题</strong>。</p><p>讲师从原有的架构开始讲到如何演变成现有架构，自己也就听个七七八八，更多是运维层面的东西，从原来使用CDN静态资源演变到使用发布平台通知消息队列，再通过消息队列通知Node服务自动部署，有点分治之的意思。</p><p><strong>最后真的是抗不下去睡着了</strong>😂，技术栈是<a href="https://midwayjs.org/midway/">midway</a>，有用到消息队列；思考：像算法一样，<br><strong>如果把时间维度拉长，面对海量数据，规模膨胀如何处理</strong>。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f31a9e182c?w=3840&h=2160&f=jpeg&s=628209"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f31de587d1?w=3840&h=2160&f=jpeg&s=970251"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f320fe2d4c?w=3840&h=2160&f=jpeg&s=762829"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f32210495d?w=3840&h=2160&f=jpeg&s=805797"><br><img src="https://user-gold-cdn.xitu.io/2020/3/31/1712f3f342429767?w=3840&h=2160&f=jpeg&s=727307"></p><h2 id="大会复盘"><a href="#大会复盘" class="headerlink" title="大会复盘"></a>大会复盘</h2><p>最后一场要比其他几场时间稍微长一点，最后主持人结尾告一段落。</p><p>自己在贪婪的摄取讲师们宝贵的经验时，也记录了自己的体检表，也希望办方能越来越好，让参会的同学有更好的用户体验。</p><p><strong>讲师注意事项</strong> <br /><br>会前告知讲师处理好手机问题，防止来电导致分享画面被切出。<br /><br>讲解复杂架构图时，配合鼠标指示（一头雾水的在架构图中找重点）。</p><p><strong>群消息</strong><br /><br>微信全程很打扰，但又不敢退出，怕万一直播有问题或群里发布重要消息而错过。<br /><br>提供提问模板表单，有提问的同学直接填写表单，主持人根据表单结果像讲师提问。</p><p><strong>参与感</strong><br /><br>在直播前收集参会同学的问题，然后讲师认领并在分享中回答，这样互动性更强，更具有针对性。</p><h2 id="思考与反刍"><a href="#思考与反刍" class="headerlink" title="思考与反刍"></a>思考与反刍</h2><p>在如今这个时代，前端加上Node的如虎添翼，而前端搭建工具加vue/react的组件化后，实现一个拖拽页面组件编辑器也不再一个有门槛的技术活，前端可视化搭建工具更是百家争鸣、遍地开花，前端可视化搭建工具存在的价值毋庸置疑，如果你准备或已经着手开发适合自己公司业务情况的可视化搭建工具，有几个问题可参考😁？</p><h4 id="明确目标人群"><a href="#明确目标人群" class="headerlink" title="明确目标人群"></a>明确目标人群</h4><p>搭建平台的类型NoCode、LowCode以及很相似的AutoCode 、ProCode，没有最好，只要最适合，这取决于你的解决方式，毫无疑问，技术人员在代码上是强项；相反，对于非技术人员NoCode更适合。</p><h4 id="Schema协议"><a href="#Schema协议" class="headerlink" title="Schema协议"></a>Schema协议</h4><p>看了这么多搭建工具，讲师们无一例外都讲到了Schema，解决方案也五花八门，组件Schema保障所有组件属性可配置，页面Schema负责组件组件间的关系，<strong>Schema协议是生成工具的核心</strong>。</p><p>组件Schema了普通数据类的定义外，<strong>更复杂的是配合页面Schema定义事件和组件通讯</strong>，至于页面数据具体是code还是data则无关紧要。云凤蝶的实现是状态外置做组件通讯，虽然已经有很多开源的Schema协议，但大都没提及关于事件和网络请求的相关内容，<strong>一个健壮而优雅的Schema方案迫在眉睫</strong>，组件其实就是函数，而typescript的interface应该被重视。</p><h4 id="编辑器架构"><a href="#编辑器架构" class="headerlink" title="编辑器架构"></a>编辑器架构</h4><p>如果你做的不是傻瓜到像穿梭框组件一样，就必须考虑模块间的接口、扩展、维护等问题，值得参考也是业界最知名的也就是Erich Gamma 的VScode架构了。</p><h4 id="组件管理"><a href="#组件管理" class="headerlink" title="组件管理"></a>组件管理</h4><p>在组件管理方面，要考虑组件版本，组件依赖，以及文档；组件在不同规模的使用量情况下如何升级等（W+），以及安全方面的沙箱隔离，如果保证组件不影响你的平台；相比于制定组件规范和创建生态，云凤蝶的方案更优雅，组件即package，交给npm管理，根据typescript读取interface，不限制组件物料，不需要手动维护组件Schema。</p><h4 id="基础能力"><a href="#基础能力" class="headerlink" title="基础能力"></a>基础能力</h4><p>不同业务场景需要的基础能力也不同，如果是应用级则需要提供用户管理、权限管理、单点登录等功能；如表单类工具至少需要OSS相关的能力；营销类工具则更重视性能与数据监控；需要多端实现也不是那么复杂，毕竟可视化搭建生成工具只是获取组件配置数据，具体生成一份还是多份就看个人选择了。</p><h4 id="多人编辑"><a href="#多人编辑" class="headerlink" title="多人编辑"></a>多人编辑</h4><p>这不是一个必选的功能，如果针对开发人员可能很难绕过多人协作，这方面已经有很完善的解决方案，就看哪个更适合自己了。</p><h4 id="启发"><a href="#启发" class="headerlink" title="启发"></a>启发</h4><p>imgCook给了我们很大的启发，不一定局限在搭建工具层面，比如，使用人工智能的方式建立适合自己的领域模型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在参加这次分享之前，我还对可视化搭建产品懵懵懂懂，在了解完大厂的可视化搭建产品架构后，使我看到了业界搭建产品的全貌；如果只靠自己摸索和探寻，难以想象会遇到多少弯路和挫折，希望自己能在这个领域内持续学习和积累。</p><p><strong>经验是宝贵的财富，也只有互联网独有的礼物文化中才能发酵一个一个有价值的学习分享会，再次感谢讲师们和主办方的付出和馈赠。</strong><br><br /></p><hr><br />相关连接<ul><li><a href="https://os.alipayobjects.com/rmsportal/sJqXvOtwePsVWGNIwlas.pdf">前端服务化：通向零成本开发之路</a></li><li><a href="http://www.alloyteam.com/2019/07/h5-build-tool-pipeline/">页面可视化搭建工具技术要点</a></li><li><a href="https://www.cnblogs.com/sskyy/p/6496287.html">前端服务化——页面搭建工具的死与生</a></li><li><a href="https://zhuanlan.zhihu.com/p/101665976">云凤蝶可视化搭建的推导与实现 - SEE Conf</a></li><li><a href="https://github.com/CntChen/cntchen.github.io/issues/15">页面可视化搭建工具前生今世</a></li><li><a href="https://zhuanlan.zhihu.com/p/90746742">云凤蝶可视化搭建的推导与实现</a></li><li><a href="https://zhuanlan.zhihu.com/p/92469406">云凤蝶如何打造媲美 sketch 的自由画布</a></li><li><a href="https://zhuanlan.zhihu.com/p/96180775">从零开始的可视化搭建系统</a></li><li><a href="https://zhuanlan.zhihu.com/p/96041706">从 VSCode 看大型 IDE 技术架构</a></li><li><a href="https://zhuanlan.zhihu.com/p/113961511">编辑器设计系列：每天都在用，你真的了解它么？</a></li><li><a href="https://juejin.im/post/6844903950508883982">前端工程实践之可视化搭建系统（一）</a></li><li><a href="https://zhuanlan.zhihu.com/p/90238943">蚂蚁中后台快速研发平台的领域思考</a></li><li><a href="https://github.com/ymm-tech/gods-pen/wiki/%E7%A0%81%E8%89%AF%E7%B3%BB%E7%BB%9F%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF">码良系统核心实现思路</a></li></ul><hr><p><strong>关于大会：前端早早聊大会目标成为用得上，听得懂，抄得走的前端大会</strong>，计划 2020 年办 12 期，由前端早早聊与掘金联合举办，未来前端早早聊大会行程动态、资料下载请扫码下方公众号跟进：<br><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296246b334e12?w=600&h=600&f=png&s=134434" alt="1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇大致提及了本篇的主要内容，首先是把自己在搭建系统中见识的&lt;strong&gt;秒开、跨端、海量部署&lt;/strong&gt;的学舌给大家（自己掌握的不</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第三期 |《早早聊搞搭建》搞过搭建的我收获了什么？（上篇）</title>
    <link href="https://nihaojob.github.io/2021/07/04/zzl-1/"/>
    <id>https://nihaojob.github.io/2021/07/04/zzl-1/</id>
    <published>2021-07-04T12:10:29.000Z</published>
    <updated>2022-07-28T02:23:30.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>主题与内容介绍</strong></p><ol><li>目前在做搭建系统的我，从这期以搭建为主题的《早早聊大会》收获了什么？</li><li>参加《早早聊大会》直播是一种怎样的体验？</li></ol><p>本想用 “参加《早早聊大会是一种怎样的体验》”为标题，在互联网界的分享会中这真是一个长盛不衰的标题，可这期毕竟是<strong>一个线上直播形式的分享会</strong>，如果单纯以体验为主题，难免有些强差人意，<strong>更多的应该以搭建与收获为主旋律</strong>。</p><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>近六个月的时间一直在参与开发公司内部的<strong>业务系统可视化自动搭建平台</strong>，从0到1的实现了我们需要的功能，并用它上线了交撮、网关、日志、BFE等内部系统。我对自动搭建平台架构生疏，所以一直也在寻觅这方面的资料。</p><p>作为一个互联网从业者，不得不说<strong>掘金我是每天必去的社区</strong>，偶然中发现<strong>竟然有整整7个项目全部以搭建为主题</strong>的一期《早早聊大会》；报名之前我一直在犹豫，要不要花钱报名看直播呢？还是等后续免费的视频和资料，眼睁睁的看着早鸟票没了，在<strong>渴望了解大厂如何实现可视化搭建</strong>与<strong>Scott大神创办的《早早聊大会》究竟是怎样一个组织</strong>的双重驱动下，我还是买票了并按时参加了直播，那收获到底值不值得回门票钱呢？哈哈 继续往下看。</p><h4 id="带着问题听直播"><a href="#带着问题听直播" class="headerlink" title="带着问题听直播"></a>带着问题听直播</h4><p>单正如这期《早早聊大会》的小姐姐讲师妙净所说，<strong>这类工具从来就不是什么新鲜事物</strong>。各个大厂都有自己的解决方案，一直学习页面可视化生成工具（自动搭建平台）的相关资料，其中知乎的<a href="https://zhuanlan.zhihu.com/xtech">《蚂蚁金服体验科技》</a>专栏里有云凤蝶生成工具详细实现介绍，参加了蚂蚁金服的<a href="https://seeconf.antfin.com/">《第三届 SEE Conf》</a>的<a href="https://www.yuque.com/seeconf/2020/yunfengdie">《云凤蝶可视化搭建的推导与实现》</a>、<a href="https://www.yuque.com/seeconf/2020/slide#RfQ52">《智能可视化体系 AVA》</a>的线上直播，<strong>受益良多却也实在不过瘾，毕竟只有2个以搭建主题的项目</strong>。</p><p>在大会前一天就迫不及待的进入直播间听Scott大神调试设备，等第二天早上醒来才知道，这位大神夜里合并了200多页讲师们要在大会上使用的PPT，并做好了当天大会的准备工作，那么<strong>我们是不是也要有所准备呢</strong>。</p><p>在这之前自己也一直在搭建工具上进行大小不一的曲折探索和尝试，也写过一些笔记和心得(按时间排序)，想来对这次大会这么翘首以盼也可能是走过的弯路所驱使。</p><ul><li><a href="https://juejin.im/post/6844903650456764424">记表格设计规范整理与页面可视化生成工具开发</a></li><li><a href="https://juejin.im/post/6844903891713130510">再不用写查询列表页面了 | 减少低端重复劳动 vue+iview</a></li><li><a href="https://juejin.im/post/6844903970150809614">开发一个前端系统生成工具的实现思路</a></li><li><a href="https://juejin.im/post/6844903974244630535">React无门槛实现拖拽布局、表单设计器</a></li><li><a href="https://juejin.im/post/6844904052615036936">把会话放在Node层 我们这样做的很开心</a></li></ul><p>对于一个在搭建系统领域的雏鸟，我有很多疑惑和问题，<strong>能从这期分享中里找到答案吗</strong>？</p><ol><li><strong>这类工具到底给谁使用？</strong></li><li>必须具备哪些能力？</li><li>如何架构，哪些分别有哪些模块？</li><li>有没有健壮的开源schema协议？</li><li><strong>搭建工具的未来走向哪里？</strong></li></ol><p>还有一个题外话，之前和我的leader也讨论过，页面数据究竟以数据的形式存在还是以代码的形式存在？这些繁杂而琐碎的小问题大厂是如何解决的呢？</p><h2 id="第一场《如何实现PC站点搭建-Schema》"><a href="#第一场《如何实现PC站点搭建-Schema》" class="headerlink" title="第一场《如何实现PC站点搭建 | Schema》"></a>第一场《如何实现PC站点搭建 | Schema》</h2><p>吃过早餐我就进入直播间了，主持人和Scott在忙碌着做大会前最后的准备，由于钉钉软件投屏的使用问题，可把我们的主持人小哥哥急坏了，最后讲师一出手统统解决，原来只是个闹剧，不过主持人小哥哥责任心大大的，一直光着脚在调试，袜子都没穿，除了对主办方可靠的形象所打动，隔着麦克风都感到了一阵凉意，嘶~~。</p><p>好了，进入正题，<strong>Scott首先致辞，介绍了大会的宗旨</strong>，然后第一位讲师洛尘开始了鲁班工具的分享。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>鲁班可以在系统中快速建立站点应用，页面通过组件拼装上线，在分享中了解到该团队<strong>大部分项目都是同一类型项目</strong>，功能比较确定，做搭建工具也就有迹可循，<strong>以提高重复工作的效率</strong>，和我们内部开发的系统很类似，只不过我们是后台业务系统，而鲁班是类似CMS门户或者商城类应用，<strong>其中配套的有权限管理和数据统计</strong>，个人认为<strong>以应用为单位的搭建平台势必要考虑用户、权限的问题，而数据统计这个功能最大的优势则在于捎带手就能完成。</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296239e80e142?w=1754&h=932&f=jpeg&s=273586"></p><h4 id="如何实现组件的属性配置"><a href="#如何实现组件的属性配置" class="headerlink" title="如何实现组件的属性配置"></a>如何实现组件的属性配置</h4><p>关于如何实现拼装，我们先拆分一下，<strong>应用 =&gt; 页面 =&gt; 组件 =&gt; 属性</strong>，最后就是组件的属性，属性是什么？也就是组件的props，对就是json，如何实现组件属性可配置？主要依赖 json Schema描述，洛尘详细的描述了这一部分，<strong>属性配置就是要实现一个jsonSchema规范的可视化面板，较复杂的功能点是对数组、对象类型的递归</strong>，详见PPT。</p><p><strong>当然，属性配置是可视化的体现，在这个领域里是必须且基础的冰山一角</strong>，比如阿里的AVA图表工具就是通过算法分析数据后通过属性配置来生成图表，而真正要支撑起一套成熟的方案还有很多问题要解决，比如组件版本管理、组件依赖，静态资源的打包、不同分支环境的部署等等。</p><p>有小伙伴里提问，组件中使用了NPM的依赖怎么处理，<strong>洛尘小哥哥很负责而诚实的回答我们目前还没有做这块的处理。</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296239e94acbd?w=3702&h=1880&f=jpeg&s=300586"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296239e5384f4?w=3840&h=2160&f=jpeg&s=330797"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296239faa570a?w=3840&h=2160&f=jpeg&s=468499"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623cfbf4cbf?w=3840&h=2160&f=jpeg&s=428682"></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>关于部署这部分，鲁班给出的一个很有启发性的方式，<strong>鲁班本身只是一个生成工具，它自身不应该也不需要区分环境，</strong>但鲁班可以<strong>直接将生成的项目发布到各个环境</strong>。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962475274d53?w=3480&h=1908&f=jpeg&s=619607"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>洛尘还提出一个问题，我们把工具做成很强大势必会很复杂的工具还是一个让运营更简单更易用的工具？</p><p>根据自己在做可视化搭建工具的经验之上，又强化和加深了我对组件管理方面的理解，如组件粒度、质量、通讯方式、性能等。</p><h2 id="第二场-《如何设计实现低代码页面搭建系统-Paas-服务》"><a href="#第二场-《如何设计实现低代码页面搭建系统-Paas-服务》" class="headerlink" title="第二场 《如何设计实现低代码页面搭建系统 | Paas 服务》"></a>第二场 《如何设计实现低代码页面搭建系统 | Paas 服务》</h2><p>如果上一场分享对我而言主题是深化，那么这一场的分享对我来说就是启发性的。</p><h4 id="初步释疑"><a href="#初步释疑" class="headerlink" title="初步释疑"></a>初步释疑</h4><p>工具是面向运营还是面向研发？我好想有了更清晰的认识，非研发人员更适合no-code，研发人员更适合low-code。<br>ps:单起一个小节只是为了加深自己对工具的理解；</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962494760a9a?w=3840&h=2160&f=jpeg&s=476931"></p><h4 id="规范-VS-生态"><a href="#规范-VS-生态" class="headerlink" title="规范 VS 生态"></a>规范 VS 生态</h4><p>如果你把iceluna单纯的理解成一个页面搭建系统那你就大错特错了，<strong>iceluna要做的是一整套的搭建平台协议，统一页面搭建平台规范，孵化搭建产品</strong>，iceluna并不是一开始就有这样的雄心壮志，也是在一步步的探索和积累，时至今日已经历时3年半。<strong>诚然，再小的一个搭建平台也需要最少半年的时间做基础建设，相比于像盘散沙一样各自为阵，组建一个规范联盟不是更好吗？</strong></p><p>比如iceluna提出的Scheam协议就应该很受重视，是很宝贵的经验财富，我们就曾遇到频繁增加和修改Scheam协议而陷入泥潭；不过目前iceluna还没开源，它的编辑器架构真是太诱人了，我们一起了解下吧？</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962484f87cda?w=3840&h=2160&f=jpeg&s=631917"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624950332d4?w=4240&h=2152&f=png&s=1917345" alt="image.png"></p><h4 id="基建狂魔"><a href="#基建狂魔" class="headerlink" title="基建狂魔"></a>基建狂魔</h4><p>从我个人的经验来看，<strong>一个自动搭建工具要依赖很多基础建设</strong>，比如我们内部开发的工具要真正单独打包出来其实很难，用户登录需要接入SSO系统，权限管理需要接入RBAC系统，必备的OSS的文件管理能力，git仓库与分支管理、依赖运维的自动部署等等，编辑器的组件拽排版、渲染引擎、沙箱隔离、属性/事件配置、多人协作，项目维度的管理(域名、日志等)，组件维度的版本、依赖、文档等。</p><p><strong>每一项都要耗费时间和精力，重点是这些工作并没有成熟的规范和协议，极大可能会被推翻重构或者因为错误设计而导致无法维护，</strong> 如果iceluna这样一个大厂产品致力于推动自动搭建工具的规范和提供基础设施服务，那真是一件让人欢欣鼓舞的事情。（ps：编辑器的架构不得不人想起VScode）<strong>。</strong><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296249ad5b75c?w=3840&h=2160&f=jpeg&s=872752"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624a3885bfa?w=3840&h=2160&f=jpeg&s=678860"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624cafcd49d?w=3840&h=2160&f=jpeg&s=779969"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624cba54e2f?w=3840&h=2160&f=jpeg&s=742353"></p><h4 id="霍尔斯特德软件复杂度算法模型"><a href="#霍尔斯特德软件复杂度算法模型" class="headerlink" title="霍尔斯特德软件复杂度算法模型"></a>霍尔斯特德软件复杂度算法模型</h4><p>大厂做事就是这么有理有据有礼有节，拿出了科学指导的理论依据。实事求是的说，<strong>简单而重复的场景确实可以做到10倍甚至数十倍的提高</strong>，而方法也不一定是可视化搭建，比如复制模板同样可以达到；换言之，<strong>复杂的或者定制化要求高的工作更适合单独开发。</strong><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962532b94f9c?w=3840&h=2160&f=jpeg&s=702088"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>沉浸在iceluna的启发与美好期盼中，如果成立协议委员会，多么希望加入这样的组织奉献自己的一点绵薄之力。</p><h2 id="中场休息"><a href="#中场休息" class="headerlink" title="中场休息"></a>中场休息</h2><p>转眼间已经中午12点了，上午讲师们精彩的分享真是精神上饕餮盛宴，可我的那罐哈啤却撑不起饥饿的肚皮，赶紧煮了包米线填饱肚子。</p><p>以往听老罗的演讲，主办方总要放几首撩人的歌曲，直播间里却只放了一张静态日程图片，开玩笑般在群里问了下小助手，难不成是怕出版权费？原来在中午短暂的时间，里我正狼吞虎咽时，主持人和发起人还要赶紧重启电脑，<strong>为了下午更稳定的直播，真是操碎了心呀。</strong></p><h2 id="第三场《如何设计实现-H5-页面搭建系统-数据模型》"><a href="#第三场《如何设计实现-H5-页面搭建系统-数据模型》" class="headerlink" title="第三场《如何设计实现 H5 页面搭建系统 | 数据模型》"></a>第三场《如何设计实现 H5 页面搭建系统 | 数据模型》</h2><p>这是一个1.9W+的页面生成工具，想必是很成熟的工具了，MPM目标很明确，运营人员使用，在排版能力上化繁为简，但并不是简单的简；MPM在性能上可谓是惊艳群芳，<strong>这场分享给我留下印象最的就是标题里4个字</strong>“<strong>数据模型”</strong>，个人认为这场分享的主题内容也就是这4个字，那到底什么意思呢？我们一起看下吧。<br><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624a8f4a25e?w=3840&h=2160&f=jpeg&s=503899"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624b935a5f7?w=3840&h=2160&f=jpeg&s=539850"></p><h4 id="模板、多端、SSR"><a href="#模板、多端、SSR" class="headerlink" title="模板、多端、SSR"></a>模板、多端、SSR</h4><p>一个搭建工具的基础且必备的功能不再赘述，与其他搭建平台有差别的是<strong>自动化测试、测速</strong>，保持可靠性的容灾。另外，关于<strong>模板的概念也不太一样</strong>，依次拆分，页面 =&gt;  组件  =&gt;  模板 + 属性，而且<strong>模板和主题很类似</strong>，<strong>一个组件有多个模板</strong>，等于多个主题，另外<strong>MPM是面向多端，包括小程序、静态H5、SSR能力</strong>。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624e7e06407?w=3840&h=2160&f=jpeg&s=475599"><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296239e5b228a?w=3840&h=2160&f=jpeg&s=479088"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623cf5ddc5b?w=3840&h=2160&f=jpeg&s=559533"></p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>重点来了，回到一个问题，数据模型什么意思？<strong>对于组件拼装的展示型页面，极大概率会使请求重复、散乱，</strong>而对于营销页面则要求更为苛刻，<strong>如何在保障多端适配、快速搭建、SSR能力的基础上再实现接口聚合呢？</strong></p><p>MPM在这点上做的极为细腻，从组件的数据源规范、页面数据、SSR的初态函数等一系列的细节处理，听完沐童的分享，我想<strong>就MPM而言，可能没有什么词比讲师自己定义的 “数据模型” 更贴切了。</strong><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623cff8ef6d?w=3840&h=2160&f=jpeg&s=267837"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623dfd11d2d?w=3840&h=2160&f=jpeg&s=494625"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623eaa0bfd5?w=3840&h=2160&f=jpeg&s=555040"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129623f24025c0?w=3840&h=2160&f=jpeg&s=564075"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624041110bf?w=3840&h=2160&f=jpeg&s=438677"><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624227e8cc2?w=3840&h=2160&f=jpeg&s=563201"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>现场有同学提问：同一页面同一接口的2次请求，只是参数不一样如何聚合？讲师当即做出回答：入参合并，一次请求返回2个结果；这大概就是做过与没做过的区别。</p><p>当然，这是一个对性能要求极为苛刻的解决方案，针对性较强，并不一定适合所有的页面搭建平台；但<strong>我们确实应该在网络优化方面做出一些思考，在搭建平台中如何正确的处理网络请求</strong>。</p><h2 id="第四场-《如何为搭建物料智能生成代码-自动编码》"><a href="#第四场-《如何为搭建物料智能生成代码-自动编码》" class="headerlink" title="第四场 《如何为搭建物料智能生成代码| 自动编码》"></a>第四场 《如何为搭建物料智能生成代码| 自动编码》</h2><p>首先我们应该感谢这位小姐姐讲师，听的出来<strong>妙净感冒严重，但依然坚持给我们分享，感动中</strong>。</p><p>之前道听途说过imgCook，印象中只是单纯的认为是一个PSD To html + css代码的工具，听到妙净的分享才知道自己错误的离谱，<strong>这是一个货真价实的人工智能项目</strong>。</p><p>讲师从代码生成工具的历史切入，<strong>引领我们进入更高维度的思考：智能化变革，人工智能不单单发生其他各个领域，同样发生在我们自己的编程领域。</strong> 这有助于我们理解人工智能，而不是停留在单纯的代码生成工具层面，并且阐述了nocode/autocode与lowcode的场景，<strong>更重要的是procode概念，如何人工干预生成结果，全链路监控，反向训练模型，保持imgCook的可持续正向增长。</strong> 并且iceluna和阿里大部分的搭建工具都已接入imgCook，并使用imgCookS生成组件。</p><p><strong>imgCook不目标仅仅是把生成PSD To html+css的算法训练的更成熟，而是根据PRD和PSD直接生成业务代码，</strong> 我即看到了未来，又感到了焦虑。</p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624228627c4?w=3840&h=2160&f=jpeg&s=626979"></p><p><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962422b21488?w=3840&h=2160&f=jpeg&s=720764"><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962429d5db75?w=3840&h=2160&f=jpeg&s=992480"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962441f93ba2?w=3646&h=544&f=jpeg&s=196523"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624430a2456?w=2514&h=1304&f=jpeg&s=411571"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/17129624535b38c7?w=3840&h=2160&f=jpeg&s=563532"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296245d1b1e6f?w=3840&h=2160&f=jpeg&s=986108"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/1712962460d337e4?w=3840&h=2160&f=jpeg&s=609943"><br><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296246188ba1f?w=3840&h=2160&f=jpeg&s=868474"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>整个分享我都在扶着自己的下巴，防止它因为惊愕而掉在地面上，个人人为<strong>这场分享是这期大会的高潮</strong>，<strong>猛一下把同学们的思维从代码工具拉到人工智能</strong>，<strong>重新定义我们与代码的关系，</strong> 把所有人精神都抓了起来；</p><p>末尾讲师还鼓励我们，应该鼓起勇气接触和进入人工智能领域，它并没有那么吓人，讲师的团队内有很多前端工程师在慢慢转向人工智能的岗位，也使我对python产生强烈的学习意愿，不过在此之前，我想我更应该好好的了解一下openCV、tensorflow.js 等人工智能相关的知识，最后也希望pipcook能够尽早的出现在我们的工作中，进而<strong>我们可以转向更高阶层的编程工作</strong>。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我沉浸在imgCook的人工智能思潮中，早已把门票的事情忘的一干二净，如果你已经被我<strong>粗浅的前4场参会笔记吊足了胃口</strong>，那么你应该如同我在报名前一样，按捺不住火热的心，迫切等待大会的录播视频和PPT，唯一的区别可能是，我当时可以报名😜，<strong>如果你在关注可视化搭建领域，我敢保证这绝对是一份值得期待的技术硬菜</strong>。</p><h2 id="关于下篇"><a href="#关于下篇" class="headerlink" title="关于下篇"></a>关于下篇</h2><p>为了尽早分享我的收获与喜悦，我不得不将这篇笔记拆分成上下2篇，<strong>我不知道“下篇”与大会录播哪个先来</strong>，但我绝对会按照自己的方式写完下篇，那么下一篇到底有什么内容呢？</p><p>从海报中能知道，除了我鹦鹉学舌讲师们的技术硬货<strong>秒开、跨端、海量部署</strong>外，在了解到大厂搭建产品的架构后，我会更多的思考和总结自己对搭建工具的理解。</p><p>同时，<strong>我复盘了自己的参会体验</strong>，在《前端早早聊大会》如火如荼的进行时，无奈自己只能用建议的方式贡献绵薄之力，在键盘前敲出一些小而苛刻的问题和建议；但我相信，<strong>让参会同学有更好的用户体验，也是Scott的初心</strong>。</p><p>最后 给人一赞，手有余香，哈哈😸。</p><p><a href="https://juejin.im/post/6844904110731296775#heading-6">第三期 |《早早聊搞搭建》搞过搭建的我收获了什么？（下篇）</a></p><hr><p><strong>关于大会：前端早早聊大会目标成为用得上，听得懂，抄得走的前端大会</strong>，计划 2020 年办 12 期，由前端早早聊与掘金联合举办，未来前端早早聊大会行程动态、资料下载请扫码下方公众号跟进：<br><img src="https://user-gold-cdn.xitu.io/2020/3/30/171296246b334e12?w=600&h=600&f=png&s=134434" alt="1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;主题与内容介绍&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目前在做搭建系统的我，从这期以搭建为主题的《早早聊大会》收获了什</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用TypeScript + React发布组件到Npm</title>
    <link href="https://nihaojob.github.io/2021/07/04/npm-react-ts/"/>
    <id>https://nihaojob.github.io/2021/07/04/npm-react-ts/</id>
    <published>2021-07-04T12:09:20.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>最近封装了项目中使用的React地图组件，摸爬滚打发布到npm上；学到的知识点也比较散，如TypeScript、Commit规范/版本语义化、React组件测试、Npm发布更新、Readme模板、组件文档搭建等，有的知识点也是浅尝辄止（一知半解😱），先记录下来，后期有时间深挖。</p><ul><li>✨ GitHub主页：<a href="https://github.com/nihaojob/mapLine">https://github.com/nihaojob/mapLine</a></li><li>文档地址：<a href="http://nihaojob.gitee.io/carui/#/carui/maps">http://nihaojob.gitee.io/carui/#/carui/maps</a></li><li>Npm主页：<a href="https://www.npmjs.com/package/maplib2">https://www.npmjs.com/package/maplib2</a></li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ol><li>脚手架选择</li><li>tsdx使用与配置</li><li>TypeScript基础</li><li>Commit规范</li><li>Npm发布/配置/更新</li><li>Readme模板</li><li>React测试</li><li>组件文档搭建</li></ol><h3 id="1-脚手架选择"><a href="#1-脚手架选择" class="headerlink" title="1. 脚手架选择"></a>1. 脚手架选择</h3><p>发布前看了很多教程，都是自己配置Webpack、Babel、Rollup，辅助的还有ESLint、Jest，想想都头大，社区有很多<strong>开箱即用的零配置脚手架</strong>，我用的<code>tsdx</code>，自行参考吧。</p><ul><li><a href="https://github.com/transitive-bullshit/create-react-library#readme">create-react-library</a> 有中文文档</li><li><a href="https://github.com/Hermanya/create-react-hook#create-react-hook">create-react-hook</a> Hook + TypeScript</li><li><a href="https://github.com/insin/nwb">nwb</a></li><li><a href="https://github.com/formik/tsdx">tsdx</a></li></ul><p>有推荐或更好用的脚手架还请告知😘，留着下次用。</p><h3 id="2-tsdx使用与配置"><a href="#2-tsdx使用与配置" class="headerlink" title="2. tsdx使用与配置"></a>2. tsdx使用与配置</h3><p>按照文档生成项目即可，需自己手动配置Less、ESLint，如下：</p><h4 id="Less配置"><a href="#Less配置" class="headerlink" title="Less配置"></a>Less配置</h4><p>安装依赖插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> rollup-plugin-postcss autoprefixer cssnano <span class="token function">less</span> --dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tsdx.config.js配置文件修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> postcss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rollup-plugin-postcss'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cssnano <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cssnano'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">rollup</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      <span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        plugins<span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">cssnano</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            preset<span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        inject<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment">// only write out CSS for the first bundle (avoids pointless extra files):</span>        <span class="token comment">// extract: !!options.writeMeta,</span>        extract<span class="token operator">:</span> <span class="token string">'mapLine.min.css'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ESLint配置"><a href="#ESLint配置" class="headerlink" title="ESLint配置"></a>ESLint配置</h4><p>脚手架创建的项目没有<code>.eslintrc.js</code>和<code>.eslintignore</code>文件，需手动添加。</p><p>也可以用<code>yarn lint --write-file</code>生成，文档有说明。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/602ed25a76874764a4ea67887a7a09a8~tplv-k3u1fbpfcp-zoom-1.image"></p><p><a href="https://github.com/nihaojob/mapLine/blob/master/.eslintrc.js"><code>.eslintrc.js</code></a>文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"react-app"</span><span class="token punctuation">,</span>    <span class="token string">"prettier/@typescript-eslint"</span><span class="token punctuation">,</span>    <span class="token string">"plugin:prettier/recommended"</span> <span class="token comment">// 重点</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"settings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"react"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"detect"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Start-预览"><a href="#Start-预览" class="headerlink" title="Start 预览"></a>Start 预览</h4><p>源码在<code>src</code>目录下，<code>example</code>目录可预览，需要分别在根目录和<code>example</code>下安装依赖和<code>Start</code>，先在根目录<code>Start</code>再<code>example Start</code>。</p><p><a href="https://juejin.im/post/6844904162497757192">参考教程</a></p><h3 id="3-TypeScript基础"><a href="#3-TypeScript基础" class="headerlink" title="3. TypeScript基础"></a>3. TypeScript基础</h3><p>刚开始使用<code>TypeScript</code>很可能会写出<code>AnyScript</code>风格的代码，画风如下🙋（我写的）。</p><p>阮一峰推荐教程：<a href="https://ts.xcatliu.com/">TypeScript 入门教程</a>很赞 👍。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a7f4dfe2dcc4e2bb8e995159c74dabc~tplv-k3u1fbpfcp-zoom-1.image"></p><p>我是先用jsx写出功能，又迁移到<code>TypeScript</code>，记录几个常用的<code>Interface</code>定义语法。</p><h4 id="非必选"><a href="#非必选" class="headerlink" title="非必选"></a>非必选</h4><p>在类型定义中，有些属性为非必须参数，使用<code>?</code>标识。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface anime &#123;  show?: boolean;  icon?: string;  pathColor?: string;  type?: string;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h4><p>在数组中放置对象，可使用<code>Array&lt;InterfaceName&gt;</code>或<code>InterfaceName[]</code>定义。</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface pathItem &#123;  iconText: string;  title: string;  theme?: number;&#125;interface defaultOptions &#123;  path: Array&lt;pathItem&gt;;  pathColor?: string;  donePath?: pathItem[];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="未知属性、继承"><a href="#未知属性、继承" class="headerlink" title="未知属性、继承"></a>未知属性、继承</h4><p>已知属性名但不知道类型，可以用<code>any</code>定义，未知属性名已知类型可使用<code>[propName: string]: string;</code>定义；为了不重复定义，使用<code>extends</code>关键词继承其他<code>interface</code>。</p><p>代码：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">interface pathItem extends donePathItem &#123;  iconText: string;  title: string;  [propName: string]: any;&#125;interface donePathItem &#123;  LT: number[];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Commit规范"><a href="#4-Commit规范" class="headerlink" title="4. Commit规范"></a>4. Commit规范</h3><p>之前对Git规范不是很深入，只有使用 <code>git rebase</code>合并一些无用<code>commit</code>信息，推荐下开源的规范文档。</p><ul><li><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">阮一峰：Commit message 和 Change log 编写指南</a></li><li><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0-beta.4/">约定式提交</a></li><li><a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit">Angular 提交准则 英文</a></li></ul><h4 id="7个类别"><a href="#7个类别" class="headerlink" title="7个类别"></a>7个类别</h4><p>翻看了几个开源项目的<code>commit</code>和规范说明，主要是标明<code>commit</code>的7个类别。</p><pre class="line-numbers language-none"><code class="language-none">- feat：新功能（feature）- fix：修补bug- docs：文档（documentation）- style： 格式（不影响代码运行的变动）- refactor：重构（即不是新增功能，也不是修改bug的代码变动）- test：增加测试- chore：构建过程或辅助工具的变动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="VsCode插件使用"><a href="#VsCode插件使用" class="headerlink" title="VsCode插件使用"></a>VsCode插件使用</h4><p>我个人主要是在<code>VsCode</code>中提交<code>Commit</code>，推荐2个插件。</p><p>快捷生成message：<a href="https://marketplace.visualstudio.com/items?itemName=redjue.git-commit-plugin">git-commit-plugin</a></p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0cc28373ef8c4dfb8af54ebb65c1bf82~tplv-k3u1fbpfcp-zoom-1.image"></p><p>Commit记录展示：<a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory">Git History</a></p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c91a18711a664c538a94f702c199b5d1~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="命令行配置"><a href="#命令行配置" class="headerlink" title="命令行配置"></a>命令行配置</h4><p>在命令行中使用<code>Git</code>可以使用<code>Commitizen</code>生成<code>Commit message</code>模板，并用<code>Commitlint</code>检查；参见<a href="https://zhuanlan.zhihu.com/p/34223150">教程</a>。</p><h3 id="5-Npm发布-配置-更新"><a href="#5-Npm发布-配置-更新" class="headerlink" title="5. Npm发布/配置/更新"></a>5. Npm发布/配置/更新</h3><p>注册不再赘述，我这么笨的人都可以搞定，聪明的你一定没问题👩‍🎓‍，以下是细节。</p><h4 id="打包路径"><a href="#打包路径" class="headerlink" title="打包路径"></a>打包路径</h4><p>使用<code>yarn build</code>打包完以后，文件生成到<code>dist</code>目录，检查<code>package.json</code>中的<code>main</code>与打包路径一致即可。</p><h4 id="主页与仓库地址"><a href="#主页与仓库地址" class="headerlink" title="主页与仓库地址"></a>主页与仓库地址</h4><p>正确配置<code>homepage</code>和<code>repository</code>才能在<code>Npm</code>介绍中展示出来。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"http://nihaojob.gitee.io/carui/#/carui/maps"</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/nihaojob/mapLine.git"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b30d109f86f42e69dcb4ad60375df80~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>国内很多小伙伴设置过npm镜像源，记得还原为官方，然后按照提示输入信息就成功了，简单吧💁 ？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/$ <span class="token function">npm</span> publish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>修改Readem文件后，使用以下命令更新。</p><p>官方文档：<a href="https://docs.npmjs.com/about-package-readme-files">https://docs.npmjs.com/about-package-readme-files</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> version patch  // <span class="token number">1.0</span>.1 表示小的bug修复$ <span class="token function">npm</span> version minor // <span class="token number">1.1</span>.0 表示新增一些小功能$ <span class="token function">npm</span> version mmajor // <span class="token number">2.0</span>.0 表示大的版本或大升级$ <span class="token function">npm</span> version preminor // <span class="token number">1.1</span>.0-0 后面多了个0，表示预发布<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> version patch$ <span class="token function">npm</span> publish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本也要遵循规范，没有来得及深挖，先留坑位🏌。</p><ul><li>语义化版本 2.0.0：<a href="https://semver.org/lang/zh-CN/">https://semver.org/lang/zh-CN/</a></li></ul><h3 id="6-Readme模板"><a href="#6-Readme模板" class="headerlink" title="6. Readme模板"></a>6. Readme模板</h3><p><code>Readme</code>应该告诉人们为什么应该使用以及如何安装、使用。留坑优化🏌。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>推荐一份高Start的模板：<a href="https://github.com/RichardLitt/standard-readme">standard-readme</a>。</p><p>也可以使用<a href="https://github.com/kefranabg/readme-md-generator">readme-md-generator</a>交互式的生成<code>Readme</code>文件。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b9fece8099f42429f4111729ddbd56a~tplv-k3u1fbpfcp-zoom-1.image"></p><h4 id="徽标生成"><a href="#徽标生成" class="headerlink" title="徽标生成"></a>徽标生成</h4><p><a href="https://shields.io/">https://shields.io</a>可根据GitHub仓库自动生成徽标。</p><p><strong>CI徽标</strong></p><p>GitHub配置的<code>Actions</code>成功执行，就可以从CI页面拷贝徽标。</p><p><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰：GitHub Actions 入门教程</a></p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de6e915ee5f145aaac5762d5ec5fb7a2~tplv-k3u1fbpfcp-zoom-1.image"></p><p><strong>测试覆盖率徽标</strong></p><p>多种多样的的工具和方法，我还没学会，等我更新🏌。</p><h3 id="7-React测试"><a href="#7-React测试" class="headerlink" title="7. React测试"></a>7. React测试</h3><p>tsdx并没有自动生成<code>jest.config.js</code>文件，如需定义可以手动增加，列下遇见的问题。</p><h4 id="组件中引入less报错"><a href="#组件中引入less报错" class="headerlink" title="组件中引入less报错"></a>组件中引入less报错</h4><p>安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> --dev identity-obj-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>package.json</code>配置moduleNameMapper</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span> <span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/__mocks__/fileMock.js"</span><span class="token punctuation">,</span>      <span class="token property">"\\.(css|less)$"</span><span class="token operator">:</span> <span class="token string">"identity-obj-proxy"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="document-is-not-defined"><a href="#document-is-not-defined" class="headerlink" title="document is not defined"></a>document is not defined</h4><p>在测试文件头部增加环境说明，<a href="https://github.com/nihaojob/mapLine/blob/master/test/blah.test.tsx">例子</a>。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @jest-environment jsdom *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="引入第三方sdk"><a href="#引入第三方sdk" class="headerlink" title="引入第三方sdk"></a>引入第三方sdk</h4><p>我在组件内有使用高德的全局变量，需要高德的SDK文件加载完毕后再执行测试，参考了<a href="https://github.com/ElemeFE/react-amap">react-amap</a>的实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// PromiseScript加载</span><span class="token keyword">function</span> <span class="token function">getAmapuiPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> <span class="token function">buildScriptTag</span><span class="token punctuation">(</span>    <span class="token string">'https://webapi.amap.com/maps?v=1.4.15&amp;key=你的key&amp;plugin=AMap.Driving'</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建script标签</span><span class="token keyword">function</span> <span class="token function">buildScriptTag</span><span class="token punctuation">(</span><span class="token parameter">src<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>defer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>  <span class="token keyword">return</span> script<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'it'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'正常渲染'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 加载高德后执行</span>    <span class="token function">getAmapuiPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">initDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">initDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Maps <span class="token punctuation">&#123;</span><span class="token operator">...</span>options<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span>      ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-组件文档搭建"><a href="#8-组件文档搭建" class="headerlink" title="8. 组件文档搭建"></a>8. 组件文档搭建</h3><p>有很多类似的工具，主要是为了解决组件文档的问题。</p><ul><li><a href="https://github.com/benjycui/bisheng">bisheng</a> Ant 系列在用</li><li><a href="https://d.umijs.org/">dumi</a> umi系列</li><li><a href="https://vuepress.vuejs.org/zh/">VuePress</a> Vue</li><li><a href="https://github.com/imweb/redemo">redemo</a> 腾讯出品 单个组件</li><li><a href="https://www.docz.site/">Docz</a></li><li><a href="https://www.gatsbyjs.org/">Gatsby.js</a> React官网在用</li></ul><p>我选了dumi，原因是文档好看💁，dumi刚发布不久，但使用体验真的不错。</p><p>官方介绍为：是一款基于 Umi 打造、为组件开发场景而生的文档工具。</p><p><img src="//p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/604333ff894b470d88f8d50f3028ae36~tplv-k3u1fbpfcp-zoom-1.image"></p><p>文档源码：<a href="https://gitee.com/nihaojob/CarUI">https://gitee.com/nihaojob/CarUI</a></p><h3 id="留坑与总结"><a href="#留坑与总结" class="headerlink" title="留坑与总结"></a>留坑与总结</h3><p>还有很多没有搞定的事情，需要学的也越来越多，为了<strong>质量和落地</strong>，先列个ToDoList。</p><ul><li><input disabled="" type="checkbox"> VsCode Jest debug配置</li><li><input disabled="" type="checkbox"> React Jest 补充测试用例</li><li><input disabled="" type="checkbox"> 测试覆盖率徽标</li><li><input disabled="" type="checkbox"> Readme按照模板修改</li><li><input disabled="" type="checkbox"> 版本语义化落地</li><li><input disabled="" type="checkbox"> np工具熟悉</li><li><input disabled="" type="checkbox"> TypeScript深入学习</li></ul><p><strong>才疏学浅，恳请斧正</strong>，还请Stars、点赞鼓励💁。</p><p>GitHub项目：<a href="https://github.com/nihaojob/mapLine">https://github.com/nihaojob/mapLine</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近封装了项目中使用的React地图组件，摸爬滚打发布到npm上；学到的知识点也比较散，如TypeScript、Commit规范/版本语义化、React组件测试、Npm发布更新、Readme模板、组件文档搭建等，有的知识点也是浅尝辄止（一知半解😱），先记录下来，后期有时间</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>快速开发一个锤子便签</title>
    <link href="https://nihaojob.github.io/2021/07/04/dev-smartisan/"/>
    <id>https://nihaojob.github.io/2021/07/04/dev-smartisan/</id>
    <published>2021-07-04T12:08:05.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>借助Vue、Marked、dom-to-image，40行代码快速开发一个锤子便签。</p></blockquote><ul><li>项目地址：<a href="https://github.com/nihaojob/markdown-css-smartisan">https://github.com/nihaojob/markdown-css-smartisan</a></li><li>使用编辑器：<a href="https://nihaojob.github.io/markdown-css-smartisan/examples/index.html">地址</a></li><li>预览主题：<a href="https://nihaojob.github.io/markdown-css-smartisan/">地址</a></li><li>欢迎点start😍，鼓励我一下。</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deac83d6405e49ce9e8c80f8c4c40b44~tplv-k3u1fbpfcp-watermark.image" alt="2021-03-28 11.45.58.gif"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a8f5f4c50374363bdd27ee68b9bfbd2~tplv-k3u1fbpfcp-watermark.image" alt="image (3).png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我是锤子便签的深度用户，除了写日记、备忘、文章外，偶尔也用来写技术笔记，有一段短时间把设计模式和《重构》的笔记用便签 + 代码的形式发布到掘金沸点记录下来。</p><p>但是锤子便签不能把主题迁移到别处使用，想复制一份复用，就在夜深人静时Fork了<code>Markdown css</code>，把心结了了。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/414060b30509436188e74257971485ac~tplv-k3u1fbpfcp-watermark.image" alt="Foxmail20210328114339.png"></p><p>样式复制完成后，仅仅有一个个<code>CSS</code>和<code>HTML</code>，无法体验开发成果😌，又接接入了<code>Marked</code>，<strong>一共40行逻辑代码</strong>，满足了自己的产品瘾。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fef93cf03d94b9087c55d24a18ea55f~tplv-k3u1fbpfcp-watermark.image" alt="Foxmail20210328115457.png"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用工具vue、marked、dom-to-img、splitpanes、lodash。</p><ol><li>框架：Vue</li><li>解析markdown字符串：marked</li><li>转图片：dom-to-img</li><li>节流：lodash</li><li>左右拖拽：splitpanes</li><li>css主题：markdown-css-smartisan</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    el<span class="token operator">:</span> <span class="token string">"#editor"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        downIng<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        input<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">compiledMarkdown</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">marked</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> sanitize<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    components<span class="token operator">:</span> <span class="token punctuation">&#123;</span> Splitpanes<span class="token operator">:</span> splitpanes<span class="token punctuation">.</span>Splitpanes<span class="token punctuation">,</span> Pane<span class="token operator">:</span>splitpanes<span class="token punctuation">.</span>Pane <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">created</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'smartisan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'smartisan'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> md        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> md        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        update<span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function-variable function">save</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'smartisan'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">)</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'缓存成功'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">down</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            domtoimage<span class="token punctuation">.</span><span class="token function">toJpeg</span><span class="token punctuation">(</span>                document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'markdown-down-id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">&#123;</span> quality<span class="token operator">:</span> <span class="token number">0.95</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dataUrl</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token string">'Markdown-Smartisan.jpeg'</span><span class="token punctuation">;</span>                    link<span class="token punctuation">.</span>href <span class="token operator">=</span> dataUrl<span class="token punctuation">;</span>                    link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">clear</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript生态繁荣，开发一个功能只需要引入几个工具包就轻松完成，用着自己开发的便签小工具还是挺有成就感的😄。</p><blockquote><p>每一个生命来到世间，都注定改变世界，这是你的宿命，你别无选择。你要么把世界变得好一点，要么把世界变得坏一点。</p><p>摘自《生命不息，折腾不止》—-罗永浩</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;借助Vue、Marked、dom-to-image，40行代码快速开发一个锤子便签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;项目地址：&lt;a href=&quot;https://github.com/nihaojob/markdown-css</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式笔记：3个设计原则、14个设计模式、9个技巧（干货）</title>
    <link href="https://nihaojob.github.io/2021/07/04/patterns/"/>
    <id>https://nihaojob.github.io/2021/07/04/patterns/</id>
    <published>2021-07-04T11:55:27.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>软件开发的基础理论对于非科班出身的我来说一直是个弱项，前一段时间立了个flag，把 <strong>《JavaScript设计模式与开发实践》</strong> 这本书里的设计模式和设计原则整理成简单易懂的便签😂</p><p>一是自己加深理解，倒逼输出，二来可以请大家帮忙纠错，防止自己理解偏差；</p><p>喜欢刷沸点小伙伴们可能有看见过最近发的<strong>设计模式便签</strong>🔖，<br>由于每天早晚看娃，很少有整块的时间，只能一天抽几分钟整理一两个便签，还好这个flag算是勉勉强强的完成了，<strong>收获确实很多，下面就是整理的笔记，如有错误，恳请拍砖，em….，用力拍👋👋👋</strong>。</p><p>可能很多优秀的模式模式是潜移默化在你的代码和实现思路里，只不过叫不上名字，如果粗略的理解一下设计模式，至少和别人讨论实现思路时可以喷出几个名词(开玩笑)😴，<strong>毕竟作为一个编程人员这些知识还是很很很重要的</strong>。</p><h1 id="3个设计原则"><a href="#3个设计原则" class="headerlink" title="3个设计原则"></a>3个设计原则</h1><h2 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h2><blockquote><p>就一个类而言，应仅有一个引起它变化的原因。</p></blockquote><p>单一职责原则（SRP）的职责被定义为“引起变化的原因”。<br>如果我们有两个动机去改写一个方法，那么这个方法就具有两个职责。每个职责都是变化的一个轴线，如果一个方法承担了过多的职责，那么在需求的变迁过程中，需要改写这个方法的可能性就越大。</p><p>此时，这个方法通常是一个不稳定的方法，修改代码总是一件危险的事情，特别是当两个职责耦合在一起的时候，一个职责发生变化可能会影响到其他职责的实现，造成意想不到的破坏，这种耦合性得到的是低内聚和脆弱的设计。</p><p><strong>SRP原则体现为：一个对象/方法，只做一件事情。</strong></p><h4 id="SRP原则的应用难点是如何分离职责"><a href="#SRP原则的应用难点是如何分离职责" class="headerlink" title="SRP原则的应用难点是如何分离职责"></a>SRP原则的应用难点是如何分离职责</h4><p>SRP原则是所有原则中最简单也是最难正确运用的原则之一。<br>要明确的是，并不是所有的职责都应该一一分离。</p><ul><li>一方面，如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们。比如在ajax请求的时候，创建xhr对象和发送xhr请求几乎总是在一起的，那么创建xhr对象的职责和发送xhr请求的职责就没有必要分开。</li><li>另一方面，职责的变化轴线仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们，在代码需要重构的时候再进行分离也不迟。</li></ul><p><strong>SRP原则的优缺点</strong><br>SRP原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。</p><p>最明显的缺点是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p><h2 id="最少知识原则（LKP）"><a href="#最少知识原则（LKP）" class="headerlink" title="最少知识原则（LKP）"></a>最少知识原则（LKP）</h2><blockquote><p>最少知识原则（LKP）说的是一个软件实体应当尽可能少地与其他实体发生相互作用。这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。</p></blockquote><h4 id="减少对象之间的联系"><a href="#减少对象之间的联系" class="headerlink" title="减少对象之间的联系"></a>减少对象之间的联系</h4><p>最少知识原则要求我们在设计程序时，应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系。</p><h4 id="迪米特法则（Law-of-Demeter，LoD）"><a href="#迪米特法则（Law-of-Demeter，LoD）" class="headerlink" title="迪米特法则（Law of Demeter，LoD）"></a>迪米特法则（Law of Demeter，LoD）</h4><p>最少知识原则也叫迪米特法则（Law of Demeter，LoD），“迪米特”这个名字源自1987年美国东北大学一个名为“Demeter”的研究项目。<br>在实际开发中，是否选择让代码符合最少知识原则，要根据具体的环境来定。</p><h2 id="开放-封闭原则"><a href="#开放-封闭原则" class="headerlink" title="开放-封闭原则"></a>开放-封闭原则</h2><p>开放-封闭原则最早由Eiffel语言的设计者Bertrand Meyer在其著作Object-Oriented Software Construction 中提出。它的定义如下：</p><blockquote><p>软件实体（类、模块、函数）等应该是可以扩展的，但是不可修改。</p></blockquote><h4 id="开放-封闭原则的思想："><a href="#开放-封闭原则的思想：" class="headerlink" title="开放-封闭原则的思想："></a>开放-封闭原则的思想：</h4><p>当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27ced098d3a1c?w=1262&h=744&f=png&s=117217"></p><h3 id="实践方法"><a href="#实践方法" class="headerlink" title="实践方法"></a>实践方法</h3><ul><li>用对象的多态性消除条件分支</li><li>找出变化的地方<br>找出程序中将要发生变化的地方，把变化封装起来，稳定不变的部分和容易变化的部分隔离开来。在系统的演变过程中，我们只需要替换那些容易变化的部分，变化的部分使用如下方法。<ol><li>放置挂钩</li><li>使用回调函数</li></ol></li></ul><h4 id="开放-封闭原则与设计模式"><a href="#开放-封闭原则与设计模式" class="headerlink" title="开放-封闭原则与设计模式"></a>开放-封闭原则与设计模式</h4><p>不管是具体的各种设计模式，还是更抽象的面向对象设计原则，比如单一职责原则、最少知识原则、依赖倒置原则等，<strong>都是为了让程序遵守开放-封闭原则而出现的</strong>。</p><h4 id="堆砌设计模式与过度设计"><a href="#堆砌设计模式与过度设计" class="headerlink" title="堆砌设计模式与过度设计"></a>堆砌设计模式与过度设计</h4><p>让程序保持完全封闭是不容易做到的。就算技术上做得到，也需要花费太多的时间和精力。<br>下面这段话引自Bob大叔的《敏捷软件开发原则、模式与实践》：</p><blockquote><p>有句古老的谚语说：“愚弄我一次，应该羞愧的是你。再次愚弄我，应该羞愧的是我。”这也是一种有效的对待软件设计的态度。为了防止软件背着不必要的复杂性，我们会允许自己被愚弄一次。</p></blockquote><p>这有点像星矢说的：“圣斗士不会被同样的招数击倒第二次。”</p><h1 id="14个设计模式"><a href="#14个设计模式" class="headerlink" title="14个设计模式"></a>14个设计模式</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>即保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><p>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如线程池、全局缓存、浏 览器中的 window 对象等。在 JavaScript 开发中，单例模式的用途同样非常广泛。试想一下，当我 们单击登录按钮的时候，页面中会出现一个登录浮窗，而这个登录浮窗是唯一的，无论单击多少 次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p></blockquote><p>一个基于策略模式的程序至少由两部分组成。</p><ul><li>第一个部分是一组策略类，策略类封装了具体 的算法，并负责具体的计算过程。 </li><li>第二个部分是环境类 Context，Context 接受客户的请求，随后 把请求委托给某一个策略类。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27d379921cb09?w=1142&h=930&f=png&s=129320"></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote><p>代理模式是为本体对象提供一个替身，以便控制对本体的访问。</p></blockquote><p>代理模式的关键是，当我们不方便直接访问一个对象或者不满足需要的时候，提供一个替身对象来控制对这个对象的访问，我们实际上访问的是替身对象。替身对象对请求做出一些处理之后，再把请求转交给本体对象</p><p><strong>可以帮助对象过滤掉一些不满足特定条件的请求，把一些开销很大的请求，延迟到真正需要它的时候才去执行等等。</strong></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27d7793c60ca6?w=1382&h=1308&f=png&s=221050"></p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote><p>指提供一种方法顺序访问一个聚合对象中的各个元素而又不需要暴露该对象的内部表示。</p></blockquote><p>迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素，如 jQuery 中的$.each 函数。</p><h4 id="内部与外部迭代"><a href="#内部与外部迭代" class="headerlink" title="内部与外部迭代"></a>内部与外部迭代</h4><p>内部迭代即调用一次循环所有元素，外部迭代需要手动触发下一个元素的迭代，如图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27dca5f2ca2fc?w=1010&h=472&f=png&s=83851"></p><h4 id="可迭代特性"><a href="#可迭代特性" class="headerlink" title="可迭代特性"></a>可迭代特性</h4><p>无论是内部迭代器还是外部迭代器，只要被迭代的聚合对象拥有 length 属性而且可以用下标访问，那它就可以被迭代。</p><h4 id="迭代顺序"><a href="#迭代顺序" class="headerlink" title="迭代顺序"></a>迭代顺序</h4><p>迭代器模式提供了循环访问一个聚合对象中每个元素的方法，但它没有规定我们以顺序、倒序还是中序来循环遍历聚合对象。</p><h4 id="终止迭代器"><a href="#终止迭代器" class="headerlink" title="终止迭代器"></a>终止迭代器</h4><p>迭代器可以像普通 for 循环中的 break 一样，提供一种跳出循环的方法。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>迭代器模式是一种相对简单的模式，简单到很多时候我们都不认为它是一种设计模式。目前的绝大部分语言都内置了迭代器。</p><h2 id="发布—订阅模式"><a href="#发布—订阅模式" class="headerlink" title="发布—订阅模式"></a>发布—订阅模式</h2><blockquote><p>发布—订阅模式和观察者模式类似，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p></blockquote><p>发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。</p><p>让两个对象松耦合地联系在一起，可以在不太清楚彼此的细节的情况下相互通信。</p><p>当有新的订阅者出现时，发布者的代码不需要任何修改；同样发布者需要改变时，也不会影响到之前的订阅者。只要约定的事件名没有变化，就可以自由地改变它们。</p><h4 id="订阅实现的关键点"><a href="#订阅实现的关键点" class="headerlink" title="订阅实现的关键点"></a>订阅实现的关键点</h4><ul><li>发布者</li><li>订阅列表</li><li>订阅方法</li><li>发布方法</li><li>取消订阅方法</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27e07ebbe3eaf?w=988&h=762&f=png&s=109362"></p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>发布—订阅模式的优点非常明显，时间、对象之间的解耦，从架构上来看，无论是 MVC 还是 MVVM， 都少不了发布—订阅模式的参与。</p><p>创建订阅者本身要消耗一定的时间和内存，订阅一个消息后，也许此消息最后都未发生，但订阅者始终存在内存中。另外，发布—订阅模式会弱化对象之间的联系，过度使用后，对象和对象之间的必要联系也将被深埋在背后，导致程序难以跟踪维护和理解。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote><p>命令模式是最简单和优雅的模式之一，命令模式中的命令(command)指的是一个执行某些特定事情的指令。</p></blockquote><p>命令模式的由来其实是回调(callback)函数的一个面向对象的替代品，跟许多其他语言不同，JavaScript 可以用高阶函数方便地实现命令模式。</p><h4 id="封装命令类"><a href="#封装命令类" class="headerlink" title="封装命令类"></a>封装命令类</h4><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27e9d90743903?w=1270&h=2290&f=png&s=455632"></p><h4 id="封装在普通函数"><a href="#封装在普通函数" class="headerlink" title="封装在普通函数"></a>封装在普通函数</h4><p>JavaScript 作为将函数作为一等对象的语言，跟策略模式一样，命令模式也早已融入到了 JavaScript 语言之中。运算块不一定要封装在命令类中，也可以封装在普通函数中。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27e9878a60da8?w=794&h=1102&f=png&s=127511"></p><p><strong>撤销命令：</strong> 某个命令需要运行较长时间，可以增加撤销操作。</p><p><strong>命令队列：</strong> 我们把命令存入一个队列，可以很简单的实现如“回放”、“后退”的功能。</p><p><strong>宏命令 ：</strong> 一组命令的集合，一次执行一组命令。</p><p><strong>命令模式在 JavaScript 语言中是一种隐形的模式。</strong></p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote><p>组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也许是由更 小的“孙对象”构成的。</p></blockquote><p>组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。 除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>提供了一种遍历树形结构的方案，组合模式可以非常方便地描述对象的层次结构。</p><p>统一地使用组合结构中的所有对象，不需要关心它究竟是组合对象还是单个对象。</p><h4 id="组合模式不是父子关系"><a href="#组合模式不是父子关系" class="headerlink" title="组合模式不是父子关系"></a>组合模式不是父子关系</h4><p>有时候把上下级对象称为父子节点，但大家要知道，它们并非真正意义上的父子关系。</p><h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><p>只有用一致的方式对待列表中的每个叶对象的时候，才适合使用组合模式。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>我们可以把相同的操作应用在组合对象和单个对象上。大多数情况下，我们都可以忽略掉组合对象和单个对象之间的差别，从而用一致的方式来处理它们。</p><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><blockquote><p>严重依赖抽象类，使用继承和重写父类的某些方法来实现功能的设计模式。</p></blockquote><h4 id="两部分组成"><a href="#两部分组成" class="headerlink" title="两部分组成"></a>两部分组成</h4><ul><li>抽象父类：封装了子类的算法框架、公共方法、以及子类中所有方法的执行顺序。</li><li>子类：继承抽象类，按照整个算法结构选择重写父类的某些方法。</li></ul><p>JavaScript 没有从语法层面提供对抽象类怎么办？</p><ul><li>接口检查，确保子类重写了父类的方法。</li><li>未重写方法直接抛出异常。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27f05855e60bf?w=1079&h=2491&f=png&s=374451"></p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。子类的方法种类和执行顺序在抽象类中定义且不可变，新功能通过增加子类且不需要改动抽象父类及其他子类即可实现，这也符合开放-封闭原则。</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote><p>享元模式是一种用于性能优化的模式，核心是运用共享技术来有效支持大量细粒度的对象。</p></blockquote><p>享元模式要求将对象的属性划分为内部状态与外部状态，目标是尽量减少共享对象的数量。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27fc6329882e2?w=1594&h=1940&f=png&s=351100"></p><h4 id="内部状态存储于对象内部"><a href="#内部状态存储于对象内部" class="headerlink" title="内部状态存储于对象内部"></a>内部状态存储于对象内部</h4><ul><li>内部状态可以被一些对象共享。</li><li>内部状态独立于具体的场景，通常不会改变。</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</li></ul><h4 id="享元模式适用的场景"><a href="#享元模式适用的场景" class="headerlink" title="享元模式适用的场景"></a>享元模式适用的场景</h4><ul><li>对象的大多数状态都可以变为外部状态。</li><li>一个程序中使用了大量的相似对象。</li><li>由于使用了大量对象，造成很大的内存开销。</li><li>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li></ul><h4 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h4><p>对象池维护一个装载空闲对象的池子，需要对象的时候，不是直接 new，而是转从对象池里获取。如果对象池里没有空闲对象，则创建一个新对象，当获取出的对象完成它的职责之后， 再进入池子等待被下次获取。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f27f77d816b162?w=1359&h=1690&f=png&s=269985"></p><h4 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h4><p>享元模式是为解决性能问题而生的模式，大部分模式的诞生原因都不一样。在一个存在大量相似对象的系统中，享元模式可以很好地解决大量对象带来的性能问题。</p><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><blockquote><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f2801d644d0af9?w=1354&h=1168&f=png&s=237383"></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f280218e162066?w=1680&h=1267&f=png&s=310909"></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f28027dbce08bc?w=1193&h=936&f=png&s=144297"></p><h4 id="传统实现的缺点"><a href="#传统实现的缺点" class="headerlink" title="传统实现的缺点"></a>传统实现的缺点</h4><p>传统实现就像一根环环相扣打了死结的链条，如果要增加、拆除或者移动一个节点，就必须得先砸烂这根链条。</p><h4 id="职责链模式优点"><a href="#职责链模式优点" class="headerlink" title="职责链模式优点"></a>职责链模式优点</h4><p>职责链模式的最大优点就是解耦了请求发送者和 N 个接收者之间的复杂关系，<br>请求发送者只需要知道链中的第一个节点，弱化了发送者和一组接收者之间的强联系。</p><h4 id="职责链模式缺点"><a href="#职责链模式缺点" class="headerlink" title="职责链模式缺点"></a>职责链模式缺点</h4><p>不能保证某个请求一定会被链中的节点处理，大部分节点没有起到实质性的作用，仅是让请求传递下去。<br>从性能方面考虑，我们要避免过长的职责链带来的性能损耗。</p><h4 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h4><p>在 JavaScript 开发中，职责链模式是最容易被忽视的模式之一。只要运用得当，可以降低发起请求的对象和处理请求对象之间的耦合性，<strong>可以自由变化职责链中的节点数量和顺序</strong>。</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><blockquote><p>用来降低多个对象和类之间的通信复杂性，它提供了一个中介类，该类处理不同类之间的通信，并支持松耦合，使代码易于维护。</p></blockquote><p>面向对象设计鼓励将行为分布到各个对象中，把对象划分成更小的粒度，有助于增强对象的可复用性，但由于这些细粒度对象之间的联系激增，又有可能会反过来降低它们的可复用性。</p><h4 id="中介者模式的作用"><a href="#中介者模式的作用" class="headerlink" title="中介者模式的作用"></a>中介者模式的作用</h4><p>中介者模式的作用就是<strong>解除对象与对象之间的紧耦合关系</strong>。</p><p>增加一个中介者对象后，所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可。</p><p>中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。</p><p>中介者模式的缺点是系统中会新增一个中介者对象，因为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介者对象自身往往就是一个难以维护的对象。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f2805b8a8ac55b?w=1645&h=1368&f=png&s=388142"></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f28062511c59dc?w=1734&h=2791&f=png&s=685817"></p><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><blockquote><p>在不改变对象自身的基础上，程序运行期间动态给对象添加职责的方式称为装饰者模式。</p></blockquote><p>在程序开发中并不希望某个类天生就非常庞大，一次性包含许多职责；<br>装饰者模式可以动态地给某个对象添加一些额外的职责，而不会影响这个类派生的其他对象。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f2808f345ed637?w=1222&h=1118&f=png&s=201849"></p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f280968e67980c?w=1222&h=1118&f=png&s=201849"></p><h4 id="装饰者也是包装器"><a href="#装饰者也是包装器" class="headerlink" title="装饰者也是包装器"></a>装饰者也是包装器</h4><p>在《设计模式》成书之前，GoF原想把装饰者（decorator）模式称为包装器（wrapper）模式。</p><p>从功能上而言，decorator能很好地描述这个模式，但从结构上看，wrapper的说法更加贴切。装饰者模式将一个对象嵌入另一个对象之中，实际上相当于这个对象被另一个对象包装起来，形成一条包装链。请求随着这条链依次传递到所有的对象，每个对象都有处理这条请求的机会</p><h4 id="装饰者模式和代理模式的区别"><a href="#装饰者模式和代理模式的区别" class="headerlink" title="装饰者模式和代理模式的区别"></a>装饰者模式和代理模式的区别</h4><p>代理模式和装饰者模式最重要的区别在于它们的<strong>意图和设计目的</strong>。</p><p>两种模式都描述了怎样为对象提供一定程度上的间接引用，它们的实现部分都保留了对另外一个对象的引用，并且向那个对象发送请求。</p><p>代理模式的目的是，当直接访问本体不方便或者不符合需要时，为这个本体提供一个替代者。本体定义了关键功能，而代理提供访问本体之前做一些额外的事情，或拒绝对它的访问，<br>代理模式强调一种关系（Proxy与它的实体之间的关系），<strong>这种关系可以静态的表达，一开始就可以被确定。</strong></p><p>装饰者模式的作用就是为对象动态加入行为，而<strong>装饰者模式用于一开始不能确定对象的全部功能时使用</strong>。代理模式通常只有一层代理，而装饰者模式经常会形成一条长长的装饰链。</p><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><blockquote><p>允许一个对象在内部状态改变时改变它的行为。</p></blockquote><p>状态模式的关键是区分事物的内部状态，事物状态的改变会带来事物行为的改变，<strong>每种状态都封装成单独的类，跟此种状态有关的行为都被封装在这个类的内部</strong>，当请求对象的某个行为时，把这个请求委托给当前的状态对象的行为即可。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f280d2e34c604c?w=1442&h=1523&f=png&s=265121"></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>状态模式定义了状态与行为之间的关系，并将它们封装在一个类里。通过增加新的状态类，很容易增加新的状态和转换。</li><li>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然。<br>Context中的请求动作和状态类中封装的行为可以非常容易地独立变化而互不影响。</li><li>状态模式的缺点是会在系统中定义许多状态类</li></ul><h4 id="策略模式与状态模式"><a href="#策略模式与状态模式" class="headerlink" title="策略模式与状态模式"></a>策略模式与状态模式</h4><ul><li>都有一个上下文、一些策略或者状态类，上下文把请求委托给这些类来执行。</li><li>使用策略模式时，客户必须熟知这些策略类的作用，以便可以随时主动切换算法；</li><li>状态模式中，状态和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为”这件事情发生在状态模式内部。</li></ul><h4 id="javascript-state-machine-有限状态机"><a href="#javascript-state-machine-有限状态机" class="headerlink" title="javascript-state-machine  有限状态机"></a>javascript-state-machine  有限状态机</h4><p><a href="https://github.com/jakesgordon/javascript-state-machine">https://github.com/jakesgordon/javascript-state-machine</a></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。</p></blockquote><p>当我们试图调用模块或者对象的某个接口时，发现这个接口的格式并不符合目前的需求时，<br>创建一个适配器，将原接口转换为客户希望的另一个接口，客户只需要和适配器打交道。<br>使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f280f90ffb5622?w=983&h=1111&f=png&s=176511"></p><p><strong>适配器模式是一种“亡羊补牢”的模式</strong>，没有人会在程序的设计之初就使用它。</p><h4 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h4><p>适配器模式是一对相对简单的模式。有一些模式跟适配器模式的结构非常相似，比如装饰者模式、代理模式和外观模式，这几种模式都属于“包装模式”，都是由一个对象来包装另一个对象。区别它们的关键仍然是模式的意图。</p><h1 id="代码重构技巧"><a href="#代码重构技巧" class="headerlink" title="代码重构技巧"></a>代码重构技巧</h1><p>原文是这么说的：</p><blockquote><p>从某种角度来看，设计模式的目的就是为许多重构行为提供目标。</p></blockquote><h2 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h2><p>如果在函数中有一段代码可以被独立出来，最好把这些代码放进另外一个独立的函数中。</p><ul><li>避免出现超大函数。</li><li>独立出来的函数有助于代码复用。</li><li>独立出来的函数更容易被覆写。</li><li>独立出来的函数如拥有良好的命名，本身就起到了注释作用。</li></ul><h2 id="合并重复的条件片段"><a href="#合并重复的条件片段" class="headerlink" title="合并重复的条件片段"></a>合并重复的条件片段</h2><p>如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，那么就有必要进行合并去重工作。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f307bfad561f3a?w=836&h=932&f=png&s=123446"></p><h2 id="把条件分支语句提炼成函数"><a href="#把条件分支语句提炼成函数" class="headerlink" title="把条件分支语句提炼成函数"></a>把条件分支语句提炼成函数</h2><p>在程序设计中，复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致一个庞大的函数。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f28160a3adb714?w=1227&h=935&f=png&s=153430"></p><h2 id="合理使用循环"><a href="#合理使用循环" class="headerlink" title="合理使用循环"></a>合理使用循环</h2><p>在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以完成同样的功能，还可以使代码量更少。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f307c7ad9a5478?w=1495&h=1264&f=png&s=187620"></p><h2 id="提前让函数退出代替嵌套条件分支"><a href="#提前让函数退出代替嵌套条件分支" class="headerlink" title="提前让函数退出代替嵌套条件分支"></a>提前让函数退出代替嵌套条件分支</h2><p>用《重构》里的话说：</p><blockquote><p>嵌套的条件分支往往是由一些深信“每个函数只能有一个出口的”程序员写出的。但实际上，如果对函数的剩余部分不感兴趣，那就应该立即退出。引导阅读者去看一些没有用的else片段，只会妨碍他们对程序的理解。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f307ceb7d9a9f9?w=961&h=1078&f=png&s=139665"></p><h2 id="传递对象参数代替过长的参数列表"><a href="#传递对象参数代替过长的参数列表" class="headerlink" title="传递对象参数代替过长的参数列表"></a>传递对象参数代替过长的参数列表</h2><p>一个函数接收的参数数量越多，函数就越难理解和使用。在使用的时候，还要防止少传了某个参数或者把两个参数搞反了位置。<br>使用对象就可以不用再关心参数的数量和顺序，只要保证参数对应的key值不变就可以了。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/23/16f307b7e316f1bc?w=1355&h=1260&f=png&s=216994"></p><h2 id="尽量减少参数数量"><a href="#尽量减少参数数量" class="headerlink" title="尽量减少参数数量"></a>尽量减少参数数量</h2><p>如果一个函数不需要传入任何参数就可以使用，这种函数是深受人们喜爱的。在实际开发中，向函数传递参数不可避免，但我们应该尽量减少函数接收的参数数量。</p><h2 id="少用三目运算符"><a href="#少用三目运算符" class="headerlink" title="少用三目运算符"></a>少用三目运算符</h2><p>使用三目运算符和使用if、else代码循环一百万次，时间开销仍处在同一个级别里。<br>如果条件分支逻辑简单清晰可用三目运算符，如逻辑复杂建议还是使用if、else。</p><p>合理使用链式调用<br>链式调用带来的坏处是调试非常不方便，如果链条很容易发生变化，建议使用普通调用的形式。</p><h2 id="用return退出多重循环"><a href="#用return退出多重循环" class="headerlink" title="用return退出多重循环"></a>用return退出多重循环</h2><p>假设在函数体内有一个两重循环语句，使用控制标记变量或者设置循环标记这两种做法无疑都让人头晕目眩。 用return直接退出方法会带来一个问题，将来不能执行循环之后的代码，可以return函数。</p><p><img src="https://user-gold-cdn.xitu.io/2019/12/21/16f2812957baf6e9?w=774&h=1849&f=png&s=200722"></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>你要是能看到这里，真的是太厉害了，这是一篇罗列知识点的总结，本身就很枯燥，我在整理汇总的时候已经快失去耐心了🤧，能看完的一定是很厉害的大牛，也想请大家推荐几本关于软件设计的理论方面的书，感谢亲哒哒哒~~~，哦，对了🤗，撩骚一下，有收获的话就给个小心心吧😍😍😘。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;软件开发的基础理论对于非科班出身的我来说一直是个弱项，前一段时间立了个flag，把 &lt;strong&gt;《JavaScript设计模式与开发实践</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Node.js开发实践，前端工程师的MVP利器</title>
    <link href="https://nihaojob.github.io/2021/07/04/node-mvp/"/>
    <id>https://nihaojob.github.io/2021/07/04/node-mvp/</id>
    <published>2021-07-04T11:53:36.000Z</published>
    <updated>2022-07-28T02:23:30.468Z</updated>
    
    <content type="html"><![CDATA[<p>什么是MVP，来自伟大的百科:</p><blockquote><p><strong>Minimum Viable Product –最简化可实行产品</strong>。</p><p>是指<strong>以最低成本尽可能展现核心概念的产品策略，即是指用最快、最简明的方式建立一个可用的产品原型</strong>，这个原型要表达出你产品最终想要的效果，然后通过迭代来完善细节。该术语由弗兰克·罗宾逊和埃里克·里斯推广于Web应用程序 ，它也可能涉及到进行市场前手的分析。</p></blockquote><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>Node是前端工程师的贵人，拓宽了前端工程师的能力边界，对比前几年用<a href="https://baike.baidu.com/item/Adobe%20Dreamweaver/10015800?fromtitle=DREAMWEAVER&fromid=216984">Dreamweaver</a>写table页面的我来说，感受到的变化是日新月异；前端搞搞工程化和框架什么的也就算了，竟然连编辑器都自己搞🤔，<strong>js你说你是不是有点过分了？</strong></p><p>当然，这个过分的js帮助了我很多，从被后端大佬揪着耳朵按到工位上温声细语的说：“<strong>我套完页面样式乱了，帮我调下样式</strong>”，演变成大佬气冲冲的跑到我工位慈眉善目的拍着桌子说：“<strong>TM接口参数传错了</strong>”。</p><p>感谢Node吧，至少我可以在自己的工位上改自己写的Bug了🤓。</p><p>言归正传，再这么贫真就写不下去代码了，随着Node能力的发展，我自己感觉出来自己有点飘了，因为有用Kindle看书的陋习，一直觉的市面上所有的kindle笔记软件都是垃圾🤥，于是自己写了一个满意的垃圾；这都不算啥，我居然因为要减肥，就写了个体重记录小程序，上线以后我冲着镜子里浑身赘肉的自己喊：“<strong>以为自己就是Node吗？过分</strong>”🤧。</p><p>体重记录小程序的故事并没有突兀的结束，有些用户反馈有bug，我借口taro更新太快项目跑不起来了，而且腾讯云函数我用的很不方便，于是很不负责的停更了；在年后疫情期间，因为实在太闲就打开了后台留言，看到有一个<strong>莫名其妙的留言说寻求合作</strong>🤷‍♂️。</p><p>我忐忑的拨通了电话，在说明了我是小程序的开发者以后，这个人上来就开始说瞎话：“你这个小程序太好了”🤦‍♂️，他阐述了一下自己的经历，是一位开了8年健身房的教练，后来混不下去把健身房关了，做在线减脂指导，竟然收入还不错，真是造化弄人🤪，<strong>他咨询我可以一起做一个减脂管理系统吗？不要钱那种，我恬不知耻的说：“好呀”</strong>。</p><p>不久我们见面了，约在北京东五环外的常营龙湖·长楹天街，他问我可以吃川菜吗？我说可以，于是我们找了一家老屋川菜馆，坐在我面前的这个人因为吃了一口自己点的辣子鸡，然后拿着纸巾一把鼻涕一把泪的忏悔自己是个假重庆人🤦‍♂️，我羞涩的吐掉了口中的辣椒，一起构想了我们小程序的未来，<strong>现在回想起自己的高谈阔论，都有些不好意思</strong>😌。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>上边的段子根据个人情况改编，纯属娱乐，如果没有Node的开发能力，别人可能会安慰我：<strong>“你还是去写个页面把”</strong>，😭 苦涩的泪水从眼眶涌出。</p><p>简单介绍了下最近折腾的3个项目的由来，从第一个体重记录小程序，到Kindle笔记工具，再到现在的一套小程序 + 后台，作为一个前端程序员独立作出一套可以跑起来的小系统还是比较有成就感的，虽然可能会被吐槽：<strong>不就是增删改查吗？</strong> 但是不用担心被吐槽：<strong>又没写过增删改查懂个屁？😝</strong></p><p>下边内容介绍了3个项目的积累，重点贴一下第三个项目Node用到的代码。<strong>共同交流，恳请斧正</strong>。</p><h3 id="21天体重记录小程序"><a href="#21天体重记录小程序" class="headerlink" title="21天体重记录小程序"></a>21天体重记录小程序</h3><p>累计7千用户和每天不超过20个活跃用户的数据，还有3篇实践笔记。<br><strong>小程序提供的Node云函数 + 数据库，可以不花一毛钱就能跑起来自己的小程序</strong>，最早是原生写法，后来切换到<code>Taro React</code>语法，效率提高很多，对小程序登录流程、云开发有了一些经验积累，也意识到自己对表结构设计的欠缺。</p><p>奇怪的是竟然累计了7千用户，用户从哪来的呢，难道是因为名字起的好吗？🤔后续准备再更新探索下。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/699419ab5d774792932fff67a6c6b3b2~tplv-k3u1fbpfcp-watermark.image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b977eb4d796a482b9034975fbdd03634~tplv-k3u1fbpfcp-watermark.image"></p><ul><li><a href="https://juejin.cn/post/6844903894816915463">【小程序 + 云开发】体重记录小程序 上手笔记</a></li><li><a href="https://juejin.cn/post/6844903896943427597">【小程序 + 云开发 】 随机读取数据并生成分享图片 上手笔记</a></li><li><a href="https://juejin.cn/post/6844903918896414727">【小程序 + 云开发】体重排行榜 上手笔记</a></li></ul><h3 id="kindle-笔记整理工具"><a href="#kindle-笔记整理工具" class="headerlink" title="kindle 笔记整理工具"></a>kindle 笔记整理工具</h3><p>最早是在本地开发，开发了用户注册、密码找回、书籍管理、笔记管理的功能，然后买服务器部署到线上。</p><p>前端使用的 <code>Ant Pro</code>，因为引入了<code>Echarts</code>，没有做按需引入，所以第一次进入比较慢，目前只有自己用，就没优化。</p><p>整套流程跑起来以后，用着自己做的小工具觉得还挺香，也有信心做一些更大的挑战了。</p><p>地址：<a href="http://nihaojob.com/">http://nihaojob.com/</a></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f1e2d2d174a4ea4a855eb77275ac6f1~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f71ee9beadf40c1a1b988176fdfdb6a~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7da7d10e790f4e9783d35e145e1016e9~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="减脂管理系统开发"><a href="#减脂管理系统开发" class="headerlink" title="减脂管理系统开发"></a>减脂管理系统开发</h3><p>终于到今天的主题了，先说下应用场景，学员在报名减脂教练的课程后，教练需要先了解学员日常饮食、睡眠、运动等生活习惯，然后根据学员状况定制运动计划和饮食方案，以及日常的运营如对学员的饮食和运动的打卡审核、积分减重排行榜、知识库等。</p><p><strong>主要的6个功能：</strong></p><ol><li>教练账号管理</li><li>问卷收集</li><li>方案下发</li><li>打卡审核</li><li>知识管理</li><li>积分、减重排行榜</li></ol><p><strong>后台预览：</strong><br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0262dd330c6640c485721bf0fcaf4c41~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7561f7a05aa34daf87e27cdb84a0488e~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7aec2460b51b48398186b66ca71178d0~tplv-k3u1fbpfcp-watermark.image"></p><p>小程序预览：<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e9148c286444be3a845334a05d352f5~tplv-k3u1fbpfcp-watermark.image"><br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35e30326f1564f5393f98ff2065f5ed4~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="服务器-域名-备案"><a href="#服务器-域名-备案" class="headerlink" title="服务器 域名 备案"></a>服务器 域名 备案</h4><p>我是从滴滴云上买的服务器，一年才几百块，域名是之前在腾讯买的<code>nihaojob.com</code>，<br>备案过程中滴滴说有政策调整，花了20多天的时间，备案建议提前做准备，备案期间可以把Nginx + Node + Mongodb环境搭建起来。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/36897f6db6244568bd5eec75a1ea6ab2~tplv-k3u1fbpfcp-watermark.image"></p><h4 id="HTTPS证书申请与Nginx配置"><a href="#HTTPS证书申请与Nginx配置" class="headerlink" title="HTTPS证书申请与Nginx配置"></a>HTTPS证书申请与Nginx配置</h4><p>微信小程序的开发域名必须是<code>HTTPS</code>，滴滴云有免费的证书。<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/442186f0063f46aaa006b917567e45ac~tplv-k3u1fbpfcp-watermark.image"><br>证书申请后需要在域名解析汇总增加TXT记录，不懂就问滴滴云客服，服务很nice。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b72cbd8c9a97425a9ec9f28a272f1485~tplv-k3u1fbpfcp-watermark.image"><br>证书申请成功后，把证书上传到服务器，在Nginx的<code>/etc/nginx/conf.d</code>目录下，<code>https.conf</code>文件中<code>ssl_certificate</code>、<code>ssl_certificate_key</code>配置证书路径。</p><pre class="line-numbers language-NGINX" data-language="NGINX"><code class="language-NGINX">server &#123;  listen    443 ssl;  server_name  api.nihaojob.com;  ssl_session_timeout 5m;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置  ssl_prefer_server_ciphers on;  ssl_certificate &#x2F;root&#x2F;sslcert&#x2F;cert.crt;  ssl_certificate_key &#x2F;root&#x2F;sslcert&#x2F;private.key;  location &#x2F; &#123;      alias &#x2F;root&#x2F;coach&#x2F;coach-fe&#x2F;dist&#x2F;;  &#125;  location &#x2F;prod-api&#x2F; &#123;     proxy_pass http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;;  &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h4><p>这里设置了跨域请求头，因为<code>Origin</code>是根据入参来的，很容易造成<code>CROS</code>攻击，对安全系数有要求的系统还是用别的方案吧，也可以使用<code>express</code>推荐的<code>cors</code>中间件。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Origin, X-Requested-With, Content-Type, Accept, token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*让options请求快速返回*/</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="express-jwt使用"><a href="#express-jwt使用" class="headerlink" title="express jwt使用"></a>express jwt使用</h4><p>前端在登录时根据用户<code>id</code>生成一个<code>Token</code>发给前端，前端之后的所有请求都携带这个<code>Token</code>，后端根据<code>Token</code>解开后的用户id来进行数据操作。</p><p>利用<code>jsonwebtoken</code>生成<code>Token</code>，<code>express-jwt</code>进行校验和非必需登录接口检查。</p><p>个人认为开发同学都应该深挖一下无状态<code>Token</code>机制与有状态<code>session</code>机制的知识点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//引入</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> expressJwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-jwt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义签名字符串</span><span class="token keyword">const</span> secret <span class="token operator">=</span> <span class="token string">'anyThingString'</span><span class="token punctuation">;</span><span class="token comment">//使用中间件验证token合法性</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">expressJwt</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  secret<span class="token operator">:</span> secret<span class="token punctuation">,</span>  <span class="token function-variable function">getToken</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">fromHeaderOrQuerystring</span><span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token <span class="token operator">||</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 使用query.token</span>      <span class="token keyword">return</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unless</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  path<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'/login'</span><span class="token punctuation">,</span><span class="token string">'/users/register'</span><span class="token punctuation">,</span> <span class="token string">'/students/login'</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>  <span class="token comment">//除了这些地址，其他的URL都需要验证</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拦截器</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//当token验证失败时会抛出如下错误</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'UnauthorizedError'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个需要根据自己的业务逻辑来处理（ 具体的err值 请看下面）</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">'未登录'</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token number">41002</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析token中间件 后续所有接口可直接使用req.tokenDecode获取参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取token</span>  <span class="token keyword">let</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token <span class="token operator">||</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>token<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span>tokenDecode <span class="token operator">=</span> decoded  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回token给客户端.</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> mail<span class="token punctuation">,</span> password <span class="token punctuation">&#125;</span><span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>  <span class="token comment">// 格式校验</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> mail <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">||</span> password <span class="token operator">===</span> <span class="token string">''</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">'非法参数'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> userInfo  <span class="token operator">=</span> <span class="token keyword">await</span> userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mail<span class="token operator">:</span> mail<span class="token punctuation">,</span> password<span class="token operator">:</span> password  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">'信息错误'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> _id<span class="token punctuation">,</span> mail<span class="token punctuation">,</span> mobile<span class="token punctuation">,</span> type <span class="token punctuation">&#125;</span> <span class="token operator">=</span> userInfo<span class="token punctuation">;</span>    <span class="token comment">//生成token</span>    <span class="token keyword">const</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> _id<span class="token punctuation">,</span> mail<span class="token punctuation">,</span> mobile<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      expiresIn<span class="token operator">:</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token comment">//秒到期时间</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      maxAge<span class="token operator">:</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span>      httpOnly<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> status<span class="token operator">:</span> <span class="token string">'ok'</span><span class="token punctuation">,</span> data<span class="token operator">:</span><span class="token punctuation">&#123;</span> userInfo<span class="token punctuation">,</span> token <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>环境变量在<code>npm script</code>中设置，本地开发时用<code>nodemon yarn start</code>，部署线上环境时使用<code>pm2 start --name coEnd npm -- run startPro</code>。</p><p>需要根据环境变量走不同的数据库连接地址和图片前缀地址，如果公众号或者小程序有区分测试和正式环境，也可以在这里配置<code>APPID</code>和<code>SECRET</code>。</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">&quot;scripts&quot;: &#123;    &quot;start&quot;: &quot;NODE_ENV&#x3D;development node .&#x2F;bin&#x2F;www&quot;,    &quot;startPro&quot;: &quot;NODE_ENV&#x3D;production node .&#x2F;bin&#x2F;www&quot;  &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 全局配置文件 &#x2F;utils&#x2F;config.jsconst configBase &#x3D; &#123;mongoDb: &#123; &#x2F;&#x2F; 数据库        development:&#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;coach&#39;,        production:&#39;mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;coach&#39;,    &#125;,    fileUrl:&#123; &#x2F;&#x2F; 图片地址        development:&#39;http:&#x2F;&#x2F;127.0.0.1:3000&#x2F;&#39;,        production:&#39;https:&#x2F;&#x2F;api.nihaojob.com&#x2F;prod-api&#x2F;&#39;,    &#125;&#125;&#x2F;&#x2F; 引用的配置对象 在各分模块中调用let infoConfig &#x3D; &#123;&#125;let envKey &#x3D; process.env.NODE_ENV&#x2F;&#x2F; 预知环境变量let keys &#x3D; [&#39;development&#39;,&#39;production&#39;]&#x2F;&#x2F; 拼接引用的配置对象Object.keys(configBase).forEach(item &#x3D;&gt; &#123;&#x2F;&#x2F; 预知环境变量if(keys.includes(envKey))&#123;infoConfig[item] &#x3D; configBase[item][envKey]&#125;else&#123;&#x2F;&#x2F; 本地infoConfig[item] &#x3D; configBase[item].host&#125;&#125;)module.exports &#x3D; infoConfig;&#x2F;&#x2F; 使用const &#123; fileUrl &#125; &#x3D; require(&quot;..&#x2F;utils&#x2F;config&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mongooes-连接"><a href="#Mongooes-连接" class="headerlink" title="Mongooes 连接"></a>Mongooes 连接</h4><p>在<code>app.js</code>中执行 <code>require(&#39;./utils/dbs&#39;)()</code>，并且把DB实例挂到<code>global</code>上。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">&#x2F;&#x2F; 配置文件var baseConfig &#x3D; require(&#39;.&#x2F;config.js&#39;);const dbs &#x3D; async function (env) &#123;    const mongoose &#x3D; require(&#39;mongoose&#39;);    mongoose.connect(baseConfig.mongoDb, &#123; useNewUrlParser: true, auto_reconnect: true, poolSize: 10 &#125;);    const db &#x3D; mongoose.connection;    db.on(&#39;error&#39;, console.error.bind(console, &#39;数据库链接失败&#39;));    db.once(&#39;open&#39;, callback &#x3D;&gt; &#123;        console.log(&#96;数据库链接成功，地址：$&#123;baseConfig.mongoDb&#125;&#96;)    &#125;);    global.db &#x3D; db;&#125;module.exports &#x3D; dbs;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mongooes-增删改"><a href="#Mongooes-增删改" class="headerlink" title="Mongooes 增删改"></a>Mongooes 增删改</h4><p>这部分不多说了，利ORM框架<code>Mongooes</code>增删改特别简单，先创建模型再根据模型操作。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const mongoose &#x3D; require(&#39;mongoose&#39;);const &#123; db &#125; &#x3D; global;&#x2F;&#x2F; 创建Modelconst model &#x3D; new mongoose.Schema(&#123;    coachId:String, &#x2F;&#x2F; 教练ID&#125;, &#123;    timestamps: true, &#x2F;&#x2F; 自动增加创建、更新时间&#125;);const dbManage &#x3D; db.model(&#39;tag&#39;, model);&#x2F;&#x2F; 创建dbManage.create(&#123; name:&#39;&#39; &#125;)&#x2F;&#x2F; 更新 前边为查询条件 后边为更新内容dbManage.updateOne(&#123;_id:&#39;id&#39;&#125;,&#123; name:&#39;&#39; &#125;)&#x2F;&#x2F; 删除dbManage.remove(&#123;_id : &#39;id&#39;&#125;)&#x2F;&#x2F; 查找dbManage.find(&#123;_id : &#39;id&#39; &#125;)dbManage.findOne(&#123;_id : &#39;id&#39; &#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mongooes-查询"><a href="#Mongooes-查询" class="headerlink" title="Mongooes 查询"></a>Mongooes 查询</h4><p>查询的功能比较多了，比如字符串模糊查询，常见的分页、排序，时间范围搜索等。<br>直接贴一个模板吧，copy直接用版，哈哈。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getList'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> nickName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> tel <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> newStatus <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token string">'1900-01-01'</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token string">'2222-01-01'</span>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> current <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize <span class="token operator">=</span> <span class="token number">20</span>  <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query    <span class="token keyword">const</span> startTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> endTime <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> queryParams <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        $and<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span> nickName<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $regex<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>nickName<span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 昵称模糊查询</span>            <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $regex<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 姓名模糊查询</span>            <span class="token punctuation">&#123;</span> tel<span class="token operator">:</span> <span class="token punctuation">&#123;</span> $regex<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>tel<span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token comment">//手机号模糊查询</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        coachId<span class="token operator">:</span> req<span class="token punctuation">.</span>tokenDecode<span class="token punctuation">.</span>_id<span class="token punctuation">,</span>        createdAt<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            $gte<span class="token operator">:</span> startTime<span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            $lte<span class="token operator">:</span> <span class="token function">moment</span><span class="token punctuation">(</span>endTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endOf</span><span class="token punctuation">(</span><span class="token string">'day'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// $lte: moment(today).endOf('day').toDate() // 查询当天</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStatus <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 数字状态模糊查询</span>        queryParams<span class="token punctuation">.</span>$and<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> newStatus<span class="token operator">:</span> newStatus <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 分页 skip跳过数 limit每页数 sort排序方式</span>    <span class="token keyword">const</span> resault <span class="token operator">=</span> <span class="token keyword">await</span> studentsModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Number</span><span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> createdAt<span class="token operator">:</span> <span class="token string">'desc'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 总数</span>    <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token keyword">await</span> studentsModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        code<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        data<span class="token operator">:</span><span class="token punctuation">&#123;</span>            list<span class="token operator">:</span> resault<span class="token punctuation">,</span>            page<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                total<span class="token punctuation">,</span>                current<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 当前页</span>                pageSize<span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h4><p>很多地方都要用到图片上传，使用<code>formidable</code>插件，设置上传路径为<code>public</code>，根据环境变量 + 文件名拼接图片地址，单独把图片地址存到一张表中，方便其他地方复用。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> formidable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'formidable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> inFileModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../model/inFile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 环境变量配置</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> fileUrl <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../utils/config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上传文件</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> imgPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/public'</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidable<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    form<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">;</span> <span class="token comment">//设置编辑</span>    form<span class="token punctuation">.</span>uploadDir <span class="token operator">=</span> imgPath<span class="token punctuation">;</span> <span class="token comment">//设置上传目录</span>    form<span class="token punctuation">.</span>keepExtensions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//保留后缀</span>    form<span class="token punctuation">.</span>maxFieldsSize <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">//文件大小</span>    form<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">awaitFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> src <span class="token operator">=</span> files<span class="token punctuation">.</span>file<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> urlString <span class="token operator">=</span> src<span class="token punctuation">[</span>src<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 文件名</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">awaitFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 储存上传记录</span>    <span class="token keyword">const</span> fileInfo <span class="token operator">=</span> <span class="token keyword">await</span> inFileModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> fileName<span class="token operator">:</span>fileUrl <span class="token operator">+</span> filePath<span class="token punctuation">,</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token string">'上传成功'</span><span class="token punctuation">,</span> data<span class="token operator">:</span>fileInfo <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时获取accesstoken"><a href="#定时获取accesstoken" class="headerlink" title="定时获取accesstoken"></a>定时获取accesstoken</h4><p>有过微信开发经验的同学都知道，调用微信服务端api需要<code>accesstoken</code>，时效2小时，利用<code>CronJob</code>定时获取<code>accesstoken</code>并保存成文件，获取失败时利用<code>nodemailer</code>发送报警邮件。</p><p>在部署时单独跑一个PM2进程，<code>pm2 start cronTask.js</code>。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// cronTask.js</span><span class="token keyword">var</span> CronJob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cron'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CronJob<span class="token punctuation">;</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> writeFile <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promises<span class="token keyword">const</span> axios <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'axios'</span><span class="token punctuation">)</span><span class="token keyword">var</span> weConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils/weConfig'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'nodemailer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取微信token</span><span class="token keyword">var</span> getWeToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronJob</span><span class="token punctuation">(</span><span class="token string">'0 0 0/1 * * *'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'获取token任务执行：'</span><span class="token punctuation">,</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token constant">APPID</span><span class="token punctuation">,</span> <span class="token constant">SECRET</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> weConfig  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">APPID</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;secret=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">SECRET</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 保存accesstoken文件</span>      <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./accesstoken.txt'</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>access_token<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 发送报警内容</span>      <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token string">'nihaojob@163.com'</span><span class="token punctuation">,</span> <span class="token string">'保存错误：'</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'America/Los_Angeles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token parameter">mail<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 发送邮箱配置</span>  <span class="token keyword">var</span> mailTransport <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    host<span class="token operator">:</span> <span class="token string">'smtp.163.com'</span><span class="token punctuation">,</span>    port<span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span>    secureConnection<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 使用SSL方式（安全方式，防止被窃取信息）</span>    auth<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      user<span class="token operator">:</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>      pass<span class="token operator">:</span> <span class="token string">'密码'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>mailTransport<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> from<span class="token operator">:</span> <span class="token string">'nihaojob@163.com'</span><span class="token punctuation">,</span> to<span class="token operator">:</span> mail <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    subject<span class="token operator">:</span> <span class="token string">'token获取失败报警'</span><span class="token punctuation">,</span>    text<span class="token operator">:</span> text<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  mailTransport<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> msg<span class="token operator">:</span> err <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    mailTransport<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>getWeToken<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成小程序参数二维码"><a href="#生成小程序参数二维码" class="headerlink" title="生成小程序参数二维码"></a>生成小程序参数二维码</h4><p>读取<code>accesstoken.txt</code>获取<code>token</code>，利用<code>axios</code>发送给微信服务器获取图片，这块有个点需要注意，请求会直接返回图片，需设置<code>responseType: &#39;arraybuffer&#39;</code>直接把<code>buffer</code>数据保存为图片。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">var express &#x3D; require(&#39;express&#39;);var router &#x3D; express.Router();const &#123; fileUrl &#125; &#x3D; require(&quot;..&#x2F;utils&#x2F;config&quot;);const &#123; writeFile, readFile &#125; &#x3D; require(&#39;fs&#39;).promisesconst axios &#x3D; require(&#39;axios&#39;)router.post(&#39;&#x2F;getQrcode&#39;, async function (req, res, next) &#123;  const &#123; path &#x3D; &#39;&#39;, scene &#x3D; &#39;&#39; &#125; &#x3D; req.body;  &#x2F;&#x2F; 格式校验  if (path &#x3D;&#x3D;&#x3D; &#39;&#39;)&#123;    res.send(&#123; code: -1, msg: &#39;非法参数&#39; &#125;);    return  &#125;  const accessToken &#x3D; await readFile(&#39;.&#x2F;accesstoken.txt&#39;)  const url &#x3D; &#96;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;wxa&#x2F;getwxacodeunlimit?access_token&#x3D;$&#123;accessToken.toString()&#125;&#96;  const data &#x3D; await axios.post(url,&#123;    scene: scene,    page: path,    width:430,  &#125;,&#123;    headers:&#123;      &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;    &#125;,    responseType: &#39;arraybuffer&#39;,  &#125;)  if (data.data)&#123;    const fileName &#x3D;  &#39;qrCode_&#39; + new Date().getTime() + &#39;.jpg&#39;    await writeFile(&#39;.&#x2F;public&#x2F;&#39; + fileName, data.data)    res.send(&#123; code: 1, data: fileUrl + fileName &#125;);  &#125;else&#123;    res.send(&#123; code:-1, msg:&#39;请求错误&#39; &#125;)  &#125;&#125;);module.exports &#x3D; router;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-await使用"><a href="#for-await使用" class="headerlink" title="for await使用"></a>for await使用</h4><p>我们有一个用户列表，需要根据用户列表里的用户id查询另外一张列表里的用户详情，将他们拼接成一个新的列表返回给前端，我不太会用关联查询，探索出一个比较笨的方法，用<code>for await</code>这种方法实现的。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">router.get(&#39;&#x2F;getTopList&#39;, async function (req, res, next) &#123;    const &#123; coachId &#125; &#x3D; req.tokenDecode;    let data &#x3D; await topModel.find(&#123; coachId &#125;).sort(&#123; integral: &#39;desc&#39; &#125;);    if (data &amp;&amp; data.length !&#x3D;&#x3D; 0) &#123;        data &#x3D; JSON.parse(JSON.stringify(data))        for (const item of data) &#123;            const info &#x3D; await studentsModel.findOne(&#123; _id: item.studentsId&#125;)            item.info &#x3D; info        &#125;    &#125;    res.send(&#123;code: 1, data &#125;)&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="taro小程序"><a href="#taro小程序" class="headerlink" title="taro小程序"></a>taro小程序</h4><p>这篇笔记的重点在Node上，就不展开聊了，简单写下登录、request封装、环境变量。</p><p><strong>登录</strong></p><p>登录的流程是，用户点击<code>openType</code>为<code>getUserInfo</code>的按钮发起授权，授权成功后调用<code>Taro.login</code>获取<code>code</code>，再把<code>code</code>发给后端，后端通过<code>code</code>、<code>APPID</code>、<code>SECRET</code>获取<code>openid</code>，剩下的就是用<code>openid</code>来绑定用户关系了。</p><blockquote><p>getUserInfo按钮 =&gt; 授权 =&gt; getCode =&gt; 获取openid</p></blockquote><p><strong>taro-request</strong></p><p>taro官网上有一个<code>taro-request</code>的封装，蛮好用的<a href="https://github.com/TigerHee/taro-request">地址</a>。</p><p><strong>环境变量</strong></p><p>Taro的环境变量从<code>process.env.NODE_ENV</code>中读取，内置环境变量为<code>development</code>、<code>production</code>，前端需要根据环境变量走不同的环境。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getBaseUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开发环境</span>    <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 生产环境</span>    <span class="token constant">BASE_URL</span> <span class="token operator">=</span> <span class="token string">'https://api.nihaojob.com/prod-api'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token constant">BASE_URL</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> getBaseUrl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后台部分"><a href="#后台部分" class="headerlink" title="后台部分"></a>后台部分</h4><p>后台使用<code>vue-element-admin</code>模板，几乎没有复杂的内容，接入了图表、富文本、图片上传，就不展开了，后续会开发发菜单、权限管理，有可能使用<code>node-casbin</code>或<code>acl</code>实现。</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>前端静态文件直接使用<code>Nginx</code>指定静态目录，后端接口通过PM2启动服务，并用<code>Nginx</code>的<code>proxy_pass</code>转到后端服务端口上。<strong>HTTPS证书申请与Nginx配置</strong>小节中有贴出，列一下自己最常用的几个PM2命令。</p><pre class="line-numbers language-BASH" data-language="BASH"><code class="language-BASH">&#x2F;&#x2F; npm script 启动应用$ pm2 start --name 应用名称 npm -- run &#39;npm sctipt名称&#39;&#x2F;&#x2F; 应用列表$ pm2 list&#x2F;&#x2F; 查看日志$ pm2 log&#x2F;&#x2F; 重启应用$ pm2 restart &#39;应用id&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aed14f790ef64f66b907639f2e7acb1f~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>开头段子中有调侃后端大佬，纯粹只是玩笑；互联网技术日新月异，大家都在齐头并进，前端的内容都学不完，又怎敢对不懂的行业指手画脚。希望自己<strong>拥抱变化，保持敬畏</strong>。</p><p>听说每个程序员都有一个创业梦，前端工程师真的可以借助Node跑起来自己的第一个MVP。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是MVP，来自伟大的百科:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Minimum Viable Product –最简化可实行产品&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;是指&lt;strong&gt;以最低成本尽可能展现核心概念的产品策略，即是指用最快、最简明的方式</summary>
      
    
    
    
    
  </entry>
  
</feed>
